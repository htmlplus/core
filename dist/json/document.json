{
  "elements": [
    {
      "events": [
        {
          "cancelable": true,
          "deprecated": false,
          "description": "Fires when the element is about to collapse.This event can be [canceled](TODO).",
          "detail": "EventEmitter<void>",
          "experimental": false,
          "model": false,
          "name": "plusCollapse",
          "tags": [
            {
              "key": "",
              "value": "Fires when the element is about to collapse.This event can be [canceled](TODO)."
            }
          ]
        },
        {
          "cancelable": false,
          "deprecated": false,
          "description": "Fires after the element has collapsed.",
          "detail": "EventEmitter<void>",
          "experimental": false,
          "model": false,
          "name": "plusCollapsed",
          "tags": [
            {
              "key": "",
              "value": "Fires after the element has collapsed."
            }
          ]
        },
        {
          "cancelable": true,
          "deprecated": false,
          "description": "Fires when the element is about to expand.This event can be [canceled](TODO).",
          "detail": "EventEmitter<void>",
          "experimental": false,
          "model": false,
          "name": "plusExpand",
          "tags": [
            {
              "key": "",
              "value": "Fires when the element is about to expand.This event can be [canceled](TODO)."
            }
          ]
        },
        {
          "cancelable": false,
          "deprecated": false,
          "description": "Fires after the element has expanded.",
          "detail": "EventEmitter<void>",
          "experimental": false,
          "model": false,
          "name": "plusExpanded",
          "tags": [
            {
              "key": "",
              "value": "Fires after the element has expanded."
            }
          ]
        }
      ],
      "deprecated": false,
      "description": "A vertically stacked list of headers that reveal or hide associated sections of content.",
      "experimental": false,
      "key": "accordion",
      "lastModified": "2024-02-17T09:22:22.456Z",
      "methods": [
        {
          "async": false,
          "description": "Collapses the element.",
          "deprecated": false,
          "experimental": false,
          "name": "collapse",
          "parameters": [],
          "returns": "Promise<boolean>",
          "tags": [
            {
              "key": "",
              "value": "Collapses the element."
            },
            {
              "key": "returns",
              "value": "{Promise<boolean>} A Promise that resolves to `true` if theoperation was successful or `false` if it was canceled."
            }
          ],
          "signature": "collapse() => Promise<boolean>"
        },
        {
          "async": false,
          "description": "Expands the element.",
          "deprecated": false,
          "experimental": false,
          "name": "expand",
          "parameters": [],
          "returns": "Promise<boolean>",
          "tags": [
            {
              "key": "",
              "value": "Expands the element."
            },
            {
              "key": "returns",
              "value": "{Promise<boolean>} A Promise that resolves to `true` if theoperation was successful or `false` if it was canceled."
            }
          ],
          "signature": "expand() => Promise<boolean>"
        },
        {
          "async": false,
          "description": "Toggles between `collapse` and `expand` state.",
          "deprecated": false,
          "experimental": false,
          "name": "toggle",
          "parameters": [],
          "returns": "Promise<boolean>",
          "tags": [
            {
              "key": "",
              "value": "Toggles between `collapse` and `expand` state."
            },
            {
              "key": "returns",
              "value": "{Promise<boolean>} A Promise that resolves to `true` if theoperation was successful or `false` if it was canceled."
            }
          ],
          "signature": "toggle() => Promise<boolean>"
        }
      ],
      "parts": [
        {
          "name": "body",
          "description": "The body element."
        },
        {
          "name": "content",
          "description": "The content element."
        },
        {
          "name": "summary",
          "description": "The summary element."
        },
        {
          "name": "svg",
          "description": "The svg element."
        }
      ],
      "properties": [
        {
          "attribute": "disabled",
          "deprecated": false,
          "description": "Disables the element functionality.",
          "experimental": false,
          "model": false,
          "name": "disabled",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Disables the element functionality."
            }
          ],
          "type": "boolean"
        },
        {
          "attribute": "open",
          "deprecated": false,
          "description": "Control the element to expand or not.",
          "experimental": false,
          "model": false,
          "name": "open",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Control the element to expand or not."
            }
          ],
          "type": "boolean"
        },
        {
          "attribute": "summary",
          "deprecated": false,
          "description": "The summary text displayed on the header.",
          "experimental": false,
          "model": false,
          "name": "summary",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "The summary text displayed on the header."
            }
          ],
          "type": "string"
        }
      ],
      "readmeContent": "# Accordion\r\n\r\nA vertically stacked list of headers that reveal or hide associated sections of content.\r\n\r\n<Playground />\r\n\r\n<Usage />\r\n\r\n<Api />\r\n\r\n<GlobalConfig />\r\n\r\n<Examples />\r\n\r\n### Default\r\n\r\n<Example value=\"default\" />\r\n\r\n### Disabled\r\n\r\n<Example value=\"disabled\" />\r\n\r\n### Open\r\n\r\n<Example value=\"open\" />\r\n\r\n### Methods\r\n\r\nOpen the developer console.\r\n\r\n<Example value=\"methods\" />\r\n\r\n### Persistent\r\n\r\n<Example value=\"persistent\" />\r\n\r\n### Custom Icon\r\n\r\n<Example value=\"custom-icon\" />\r\n\r\n### Customized\r\n\r\n<Example value=\"customized\" />\r\n\r\n### Custom Summary Template\r\n\r\n<Example value=\"custom-summary-template\" />\r\n\r\n### Prevent From Toggling\r\n\r\n<Example value=\"prevent-from-toggling\" />\r\n\r\n### Slots\r\n\r\n<Example value=\"slots\" />\r\n\r\n### Async Content\r\n\r\n<Example value=\"async-content\" />\r\n\r\n<LastModified />\r\n",
      "slots": [
        {
          "name": "default",
          "description": "The default slot."
        },
        {
          "name": "icon",
          "description": "The icon slot."
        },
        {
          "name": "icon-expand",
          "description": "The expand icon slot."
        },
        {
          "name": "icon-collapse",
          "description": "The collapse icon slot."
        },
        {
          "name": "summary",
          "description": "The summary slot."
        },
        {
          "name": "top",
          "description": "The top slot."
        },
        {
          "name": "middle",
          "description": "The middle slot."
        },
        {
          "name": "bottom",
          "description": "The bottom slot."
        }
      ],
      "styles": [],
      "tags": [
        {
          "key": "stable",
          "value": ""
        }
      ],
      "title": "Accordion"
    },
    {
      "events": [
        {
          "cancelable": false,
          "deprecated": false,
          "description": "Fires when the [Animation.cancel()](https://mdn.io/animation-cancel)method is called or when the animation enters the \"`idle`\" play state from another state.",
          "detail": "EventEmitter<void>",
          "experimental": false,
          "model": false,
          "name": "plusCancel",
          "tags": [
            {
              "key": "",
              "value": "Fires when the [Animation.cancel()](https://mdn.io/animation-cancel)method is called or when the animation enters the \"`idle`\" play state from another state."
            }
          ]
        },
        {
          "cancelable": false,
          "deprecated": false,
          "description": "Fires when the animation finishes playing.",
          "detail": "EventEmitter<void>",
          "experimental": false,
          "model": false,
          "name": "plusFinish",
          "tags": [
            {
              "key": "",
              "value": "Fires when the animation finishes playing."
            }
          ]
        },
        {
          "cancelable": false,
          "deprecated": false,
          "description": "Fires when the animation is removed (i.e., put into an `active` replace state).",
          "detail": "EventEmitter<void>",
          "experimental": false,
          "model": false,
          "name": "plusRemove",
          "tags": [
            {
              "key": "",
              "value": "Fires when the animation is removed (i.e., put into an `active` replace state)."
            }
          ]
        }
      ],
      "deprecated": false,
      "description": "Creates an animation and applies it to the content. Powered by the [Web Animations API](https://mdn.io/web-animations-api). A wide range of animations is available [here](https://www.htmlplus.io/element/animation/names).",
      "experimental": false,
      "key": "animation",
      "lastModified": "2024-02-17T09:22:22.578Z",
      "methods": [
        {
          "async": false,
          "description": "Clears all [keyframeEffects](https://mdn.io/keyframe-effect)caused by this animation and aborts its playback.",
          "deprecated": false,
          "experimental": false,
          "name": "cancel",
          "parameters": [],
          "returns": "void",
          "tags": [
            {
              "key": "",
              "value": "Clears all [keyframeEffects](https://mdn.io/keyframe-effect)caused by this animation and aborts its playback."
            }
          ],
          "signature": "cancel() => void"
        },
        {
          "async": false,
          "description": "Commits the end styling state of an animation to the element being animated, even after thatanimation has been removed. It will cause the end styling state to be written to the elementbeing animated, in the form of properties inside a `style` attribute.",
          "deprecated": false,
          "experimental": false,
          "name": "commitStyles",
          "parameters": [],
          "returns": "void",
          "tags": [
            {
              "key": "",
              "value": "Commits the end styling state of an animation to the element being animated, even after thatanimation has been removed. It will cause the end styling state to be written to the elementbeing animated, in the form of properties inside a `style` attribute."
            }
          ],
          "signature": "commitStyles() => void"
        },
        {
          "async": false,
          "description": "Seeks either end of an animation, depending on whether the animation is playing or reversing.",
          "deprecated": false,
          "experimental": false,
          "name": "finish",
          "parameters": [],
          "returns": "void",
          "tags": [
            {
              "key": "",
              "value": "Seeks either end of an animation, depending on whether the animation is playing or reversing."
            }
          ],
          "signature": "finish() => void"
        },
        {
          "async": false,
          "description": "Suspends playing of an animation.",
          "deprecated": false,
          "experimental": false,
          "name": "pause",
          "parameters": [],
          "returns": "void",
          "tags": [
            {
              "key": "",
              "value": "Suspends playing of an animation."
            }
          ],
          "signature": "pause() => void"
        },
        {
          "async": false,
          "description": "Explicitly persists an animation, when it would otherwise be removed due to the browser's[Automatically removing filling animations](https://developer.mozilla.org/en-US/docs/Web/API/Animation#automatically_removing_filling_animations)behavior.",
          "deprecated": false,
          "experimental": false,
          "name": "persist",
          "parameters": [],
          "returns": "void",
          "tags": [
            {
              "key": "",
              "value": "Explicitly persists an animation, when it would otherwise be removed due to the browser's[Automatically removing filling animations](https://developer.mozilla.org/en-US/docs/Web/API/Animation#automatically_removing_filling_animations)behavior."
            }
          ],
          "signature": "persist() => void"
        },
        {
          "async": false,
          "description": "Starts or resumes playing of an animation, or begins the animation again if it previously finished.",
          "deprecated": false,
          "experimental": false,
          "name": "play",
          "parameters": [],
          "returns": "void",
          "tags": [
            {
              "key": "",
              "value": "Starts or resumes playing of an animation, or begins the animation again if it previously finished."
            }
          ],
          "signature": "play() => void"
        },
        {
          "async": false,
          "description": "Reverses playback direction, stopping at the start of the animation.If the animation is finished or unplayed, it will play from end to beginning.",
          "deprecated": false,
          "experimental": false,
          "name": "reverse",
          "parameters": [],
          "returns": "void",
          "tags": [
            {
              "key": "",
              "value": "Reverses playback direction, stopping at the start of the animation.If the animation is finished or unplayed, it will play from end to beginning."
            }
          ],
          "signature": "reverse() => void"
        },
        {
          "async": false,
          "description": "Sets the speed of an animation after first synchronizing its playback position.",
          "deprecated": false,
          "experimental": false,
          "name": "updatePlaybackRate",
          "parameters": [
            {
              "required": true,
              "name": "playbackRate",
              "type": "number"
            }
          ],
          "returns": "void",
          "tags": [
            {
              "key": "",
              "value": "Sets the speed of an animation after first synchronizing its playback position."
            }
          ],
          "signature": "updatePlaybackRate(playbackRate: number) => void"
        }
      ],
      "parts": [],
      "properties": [
        {
          "attribute": "composite",
          "deprecated": false,
          "description": "Determines how values are combined between this animation and other,separate animations that do not specify their own specific composite operation.",
          "experimental": false,
          "initializer": "'replace'",
          "model": false,
          "name": "composite",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Determines how values are combined between this animation and other,separate animations that do not specify their own specific composite operation."
            }
          ],
          "type": "AnimationComposite",
          "typeReference": "./animation.types"
        },
        {
          "attribute": "delay",
          "deprecated": false,
          "description": "The number of milliseconds to delay the start of the animation.",
          "experimental": false,
          "initializer": "0",
          "model": false,
          "name": "delay",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "The number of milliseconds to delay the start of the animation."
            }
          ],
          "type": "number"
        },
        {
          "attribute": "direction",
          "deprecated": false,
          "description": "Whether the animation runs forwards (`normal`), backwards (`reverse`),switches direction after each iteration (`alternate`), or runsbackwards and switches direction after each iteration (`alternate-reverse`).",
          "experimental": false,
          "initializer": "'normal'",
          "model": false,
          "name": "direction",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Whether the animation runs forwards (`normal`), backwards (`reverse`),switches direction after each iteration (`alternate`), or runsbackwards and switches direction after each iteration (`alternate-reverse`)."
            }
          ],
          "type": "AnimationDirection",
          "typeReference": "./animation.types"
        },
        {
          "attribute": "duration",
          "deprecated": false,
          "description": "The number of milliseconds each iteration of the animation takes to complete.Keep in mind that your animation will not run if this value is 0.",
          "experimental": false,
          "initializer": "1000",
          "model": false,
          "name": "duration",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "The number of milliseconds each iteration of the animation takes to complete.Keep in mind that your animation will not run if this value is 0."
            }
          ],
          "type": "number"
        },
        {
          "attribute": "easing",
          "deprecated": false,
          "description": "The rate of the animation's change over time.Accepts the pre-defined values \"`linear`\", \"`ease`\", \"`ease-in`\", \"`ease-out`\", and \"`ease-in-out`\",or a custom \"`cubic-bezier`\" value like \"`cubic-bezier(0.42, 0, 0.58, 1)`\".",
          "experimental": false,
          "initializer": "'linear'",
          "model": false,
          "name": "easing",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "The rate of the animation's change over time.Accepts the pre-defined values \"`linear`\", \"`ease`\", \"`ease-in`\", \"`ease-out`\", and \"`ease-in-out`\",or a custom \"`cubic-bezier`\" value like \"`cubic-bezier(0.42, 0, 0.58, 1)`\"."
            }
          ],
          "type": "string"
        },
        {
          "attribute": "end-delay",
          "deprecated": false,
          "description": "The number of milliseconds to delay after the end of an animation.This is primarily of use when sequencing animations based on the end time of another animation.",
          "experimental": false,
          "initializer": "0",
          "model": false,
          "name": "endDelay",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "The number of milliseconds to delay after the end of an animation.This is primarily of use when sequencing animations based on the end time of another animation."
            }
          ],
          "type": "number"
        },
        {
          "attribute": "fill",
          "deprecated": false,
          "description": "Dictates whether the animation's effects should be reflected by the element(s)prior to playing (\"`backwards`\"), retained after the animation has completedplaying (\"`forwards`\"), or `both`.",
          "experimental": false,
          "initializer": "'none'",
          "model": false,
          "name": "fill",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Dictates whether the animation's effects should be reflected by the element(s)prior to playing (\"`backwards`\"), retained after the animation has completedplaying (\"`forwards`\"), or `both`."
            }
          ],
          "type": "AnimationFill",
          "typeReference": "./animation.types"
        },
        {
          "attribute": "instance",
          "deprecated": false,
          "description": "The [Animation](https://mdn.io/api-animation) object instance.",
          "experimental": false,
          "model": false,
          "name": "instance",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "The [Animation](https://mdn.io/api-animation) object instance."
            }
          ],
          "type": "globalThis.Animation"
        },
        {
          "attribute": "iteration-composite",
          "deprecated": false,
          "description": "Determines how values build from iteration to iteration in this animation.Can be set to `accumulate` or `replace`.",
          "experimental": false,
          "initializer": "'replace'",
          "model": false,
          "name": "iterationComposite",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Determines how values build from iteration to iteration in this animation.Can be set to `accumulate` or `replace`."
            }
          ],
          "type": "AnimationIterationComposite",
          "typeReference": "./animation.types"
        },
        {
          "attribute": "iterations",
          "deprecated": false,
          "description": "The number of times the animation should repeat. And can also take a value of[Infinity](https://mdn.io/infinity)to make it repeat for as long as the element exists.",
          "experimental": false,
          "initializer": "1",
          "model": false,
          "name": "iterations",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "The number of times the animation should repeat. And can also take a value of[Infinity](https://mdn.io/infinity)to make it repeat for as long as the element exists."
            }
          ],
          "type": "number"
        },
        {
          "attribute": "iteration-start",
          "deprecated": false,
          "description": "Describes at what point in the iteration the animation should start.0.5 would indicate starting halfway through the first iteration for example,and with this value set, an animation with 2 iterations would end halfway througha third iteration.",
          "experimental": false,
          "initializer": "0",
          "model": false,
          "name": "iterationStart",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Describes at what point in the iteration the animation should start.0.5 would indicate starting halfway through the first iteration for example,and with this value set, an animation with 2 iterations would end halfway througha third iteration."
            }
          ],
          "type": "number"
        },
        {
          "attribute": "keyframes",
          "deprecated": false,
          "description": "A [keyframes](https://mdn.io/keyframe-formats)object or `null`.",
          "experimental": false,
          "model": false,
          "name": "keyframes",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "A [keyframes](https://mdn.io/keyframe-formats)object or `null`."
            }
          ],
          "type": "Keyframe[]"
        },
        {
          "attribute": "name",
          "deprecated": false,
          "description": "Specifies what kind of animation will play.The list of available animations is [here](/element/animation/names).",
          "experimental": false,
          "model": false,
          "name": "name",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies what kind of animation will play.The list of available animations is [here](/element/animation/names)."
            }
          ],
          "type": "string"
        },
        {
          "attribute": "playback-rate",
          "deprecated": false,
          "description": "Sets the animation's playback rate.",
          "experimental": false,
          "initializer": "1",
          "model": false,
          "name": "playbackRate",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Sets the animation's playback rate."
            }
          ],
          "type": "number"
        },
        {
          "attribute": "run",
          "deprecated": false,
          "description": "Starts the animation.",
          "experimental": false,
          "model": false,
          "name": "run",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Starts the animation."
            }
          ],
          "type": "boolean"
        }
      ],
      "readmeContent": "# Animation\r\n\r\nCreates an animation and applies it to the content. Powered by the [Web Animations API](https://mdn.io/web-animations-api). A wide range of animations is available [here](https://www.htmlplus.io/element/animation/names).\r\n\r\n<Playground />\r\n\r\n<Usage />\r\n\r\n<Api />\r\n\r\n<GlobalConfig />\r\n\r\n<Examples />\r\n\r\n### Default\r\n\r\n<Example value=\"default\" />\r\n\r\n### Name\r\n\r\nTo see all names click [here](https://www.htmlplus.io/element/animation/names).\r\n<Example value=\"name\" />\r\n\r\n### Duration\r\n\r\n<Example value=\"duration\" />\r\n\r\n### Easing\r\n\r\nTo see all easings click [here](https://github.com/htmlplus/core/blob/main/src/elements/animation/animation.constants.ts).\r\n<Example value=\"easing\" />\r\n\r\n### Methods\r\n\r\n<Example value=\"methods\" />\r\n\r\n### Keyframes\r\n\r\n<Example value=\"keyframes\" />\r\n\r\n### Register A Custom Name\r\n\r\n<Example value=\"register-a-custom-name\" />\r\n\r\n### Button\r\n\r\n<Example value=\"button\" />\r\n\r\n### Intersection\r\n\r\n<Example value=\"intersection\" />\r\n\r\n<LastModified />\r\n",
      "slots": [
        {
          "name": "default",
          "description": "The default slot."
        }
      ],
      "styles": [],
      "tags": [
        {
          "key": "stable",
          "value": ""
        }
      ],
      "title": "Animation"
    },
    {
      "events": [],
      "deprecated": false,
      "description": "Sets a preferred aspect ratio only for the first child inside the element.",
      "experimental": false,
      "key": "aspect-ratio",
      "lastModified": "2024-02-17T09:22:22.587Z",
      "methods": [],
      "parts": [],
      "properties": [
        {
          "attribute": "min-height",
          "deprecated": false,
          "description": "Specifies the minimum height.",
          "experimental": false,
          "model": false,
          "name": "minHeight",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies the minimum height."
            }
          ],
          "type": "number | string"
        },
        {
          "attribute": "max-height",
          "deprecated": false,
          "description": "Specifies the maximum height.",
          "experimental": false,
          "model": false,
          "name": "maxHeight",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies the maximum height."
            }
          ],
          "type": "number | string"
        },
        {
          "attribute": "value",
          "deprecated": false,
          "description": "Specifies the ratio.",
          "experimental": false,
          "initializer": "1",
          "model": false,
          "name": "value",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies the ratio."
            }
          ],
          "type": "number | string"
        }
      ],
      "readmeContent": "# Aspect Ratio\r\n\r\nSets a preferred aspect ratio only for the first child inside the element.\r\n\r\n<Playground />\r\n\r\n<Usage />\r\n\r\n<Api />\r\n\r\n<GlobalConfig />\r\n\r\n<Examples />\r\n\r\n### Default\r\n\r\n<Example value=\"default\" />\r\n\r\n### Image\r\n\r\n<Example value=\"image\" />\r\n\r\n### Video\r\n\r\n<Example value=\"video\" />\r\n\r\n### Card\r\n\r\n<Example value=\"card\" />\r\n\r\n### Map\r\n\r\n<Example value=\"map\" />\r\n\r\n### More\r\n\r\n<Example value=\"more\" />\r\n\r\n<LastModified />\r\n",
      "slots": [
        {
          "name": "default",
          "description": "The default slot."
        }
      ],
      "styles": [],
      "tags": [
        {
          "key": "stable",
          "value": ""
        }
      ],
      "title": "Aspect Ratio"
    },
    {
      "events": [],
      "deprecated": false,
      "description": "An image representing a user's profile picture.",
      "experimental": false,
      "key": "avatar",
      "lastModified": "2024-02-17T09:22:22.614Z",
      "methods": [],
      "parts": [],
      "properties": [
        {
          "attribute": "shape",
          "deprecated": false,
          "description": "Specifies the shape of the element.",
          "experimental": false,
          "initializer": "'round'",
          "model": false,
          "name": "shape",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies the shape of the element."
            }
          ],
          "type": "AvatarShape",
          "typeReference": "./avatar.types"
        },
        {
          "attribute": "size",
          "deprecated": false,
          "description": "Specifies the size of the element.",
          "experimental": false,
          "initializer": "'md'",
          "model": false,
          "name": "size",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies the size of the element."
            }
          ],
          "type": "AvatarSize",
          "typeReference": "./avatar.types"
        }
      ],
      "readmeContent": "# Avatar\r\n\r\nAn image representing a user's profile picture.\r\n\r\n<Playground />\r\n\r\n<Usage />\r\n\r\n<Api />\r\n\r\n<GlobalConfig />\r\n\r\n<Examples />\r\n\r\n### Default\r\n\r\n<Example value=\"default\" />\r\n\r\n### Text\r\n\r\n<Example value=\"text\" />\r\n\r\n### Image\r\n\r\n<Example value=\"image\" />\r\n\r\n### Icon\r\n\r\n<Example value=\"icon\" />\r\n\r\n### Icon Ratio (Inline)\r\n\r\n<Example value=\"icon-ratio-inline\" />\r\n\r\n### Icon Ratio (Global)\r\n\r\n<Example value=\"icon-ratio-global\" />\r\n\r\n### Svg\r\n\r\n<Example value=\"svg\" />\r\n\r\n### Svg Ratio (Inline)\r\n\r\n<Example value=\"svg-ratio-inline\" />\r\n\r\n### Svg Ratio (Global)\r\n\r\n<Example value=\"svg-ratio-global\" />\r\n\r\n### Shape\r\n\r\n<Example value=\"shape\" />\r\n\r\n### Size\r\n\r\n<Example value=\"size\" />\r\n\r\n### Custom Size\r\n\r\n<Example value=\"custom-size\" />\r\n\r\n### Wildcard Size\r\n\r\n<Example value=\"wildcard-size\" />\r\n\r\n### Link\r\n\r\n<Example value=\"link\" />\r\n\r\n### Tooltip\r\n\r\n<Example value=\"tooltip\" />\r\n\r\n### Link With Tooltip\r\n\r\n<Example value=\"link-with-tooltip\" />\r\n\r\n### Slots\r\n\r\n<Example value=\"slots\" />\r\n\r\n### Group\r\n\r\n<Example value=\"group\" />\r\n\r\n### Group Stacked\r\n\r\n<Example value=\"group-stacked\" />\r\n\r\n### Group Hoverable\r\n\r\n<Example value=\"group-hoverable\" />\r\n\r\n### Group Gutter\r\n\r\n<Example value=\"group-gutter\" />\r\n\r\n### Group Link\r\n\r\n<Example value=\"group-link\" />\r\n\r\n### Group Tooltip\r\n\r\n<Example value=\"group-tooltip\" />\r\n\r\n### Group Link With Tooltip\r\n\r\n<Example value=\"group-link-with-tooltip\" />\r\n\r\n<LastModified />\r\n",
      "slots": [
        {
          "name": "default",
          "description": "The default slot."
        }
      ],
      "styles": [
        {
          "description": "Used to adjust the border-radius.",
          "initializer": "0.25rem",
          "name": "--plus-avatar-border-radius"
        },
        {
          "description": "Used to adjust the ratio of size to font-size.",
          "initializer": "0.35",
          "name": "--plus-avatar-font-size-ratio"
        },
        {
          "description": "Used to adjust the size (width & height).",
          "initializer": "auto",
          "name": "--plus-avatar-size"
        }
      ],
      "tags": [
        {
          "key": "stable",
          "value": ""
        }
      ],
      "title": "Avatar"
    },
    {
      "events": [],
      "deprecated": false,
      "experimental": false,
      "key": "avatar-group",
      "lastModified": "2024-02-17T09:22:22.590Z",
      "methods": [],
      "parts": [],
      "properties": [
        {
          "attribute": "hoverable",
          "deprecated": false,
          "description": "Specifies whether to prominent the avatar when the mouse is entered or not.",
          "experimental": false,
          "model": false,
          "name": "hoverable",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies whether to prominent the avatar when the mouse is entered or not."
            }
          ],
          "type": "boolean"
        },
        {
          "attribute": "stacked",
          "deprecated": false,
          "description": "Specifies whether avatars should be displayed compressed or not.",
          "experimental": false,
          "model": false,
          "name": "stacked",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies whether avatars should be displayed compressed or not."
            }
          ],
          "type": "boolean"
        }
      ],
      "slots": [
        {
          "name": "default",
          "description": "The default slot."
        }
      ],
      "styles": [
        {
          "description": "Used to adjust the gutter between avatars in stacked mode.",
          "initializer": "-0.5rem",
          "name": "--plus-avatar-group-gutter-stacked"
        },
        {
          "description": "Used to adjust the gutter between avatars in unstacked mode.",
          "initializer": "0.5rem",
          "name": "--plus-avatar-group-gutter-unstacked"
        }
      ],
      "tags": [
        {
          "key": "stable",
          "value": ""
        }
      ],
      "title": "Avatar Group"
    },
    {
      "events": [],
      "deprecated": false,
      "description": "Breadcrumb element is a navigation pattern that shows the actual path of the current page.",
      "experimental": false,
      "key": "breadcrumb",
      "lastModified": "2024-02-17T09:22:22.623Z",
      "methods": [],
      "parts": [
        {
          "name": "expander",
          "description": "The expander element."
        },
        {
          "name": "item",
          "description": "The breadcrumb elements."
        },
        {
          "name": "separator",
          "description": "The separator elements."
        }
      ],
      "properties": [
        {
          "attribute": "expander-text",
          "deprecated": false,
          "description": "Specifies the label for the expander button.",
          "experimental": false,
          "initializer": "'Show path'",
          "model": false,
          "name": "expanderText",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies the label for the expander button."
            }
          ],
          "type": "string"
        },
        {
          "attribute": "offset",
          "deprecated": false,
          "description": "Specifies the position of the expander button.The expander button is displayed when the number of items reached the maximum limit.",
          "experimental": false,
          "initializer": "1",
          "model": false,
          "name": "offset",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies the position of the expander button.The expander button is displayed when the number of items reached the maximum limit."
            }
          ],
          "type": "number"
        },
        {
          "attribute": "max",
          "deprecated": false,
          "description": "Specifies the Maximum number of items that are allowed to be displayed.",
          "experimental": false,
          "model": false,
          "name": "max",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies the Maximum number of items that are allowed to be displayed."
            }
          ],
          "type": "number"
        },
        {
          "attribute": "separator",
          "deprecated": false,
          "description": "Specifies the separator between items.",
          "experimental": false,
          "model": false,
          "name": "separator",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies the separator between items."
            }
          ],
          "type": "string"
        }
      ],
      "readmeContent": "# Breadcrumb\r\n\r\nBreadcrumb element is a navigation pattern that shows the actual path of the current page.\r\nIt represents the route using links, which enables the user to easily navigate upwards through\r\nthe hierarchy.\r\n\r\n<Playground />\r\n\r\n<Usage />\r\n\r\n<Api />\r\n\r\n<GlobalConfig />\r\n\r\n<Examples />\r\n\r\n### Default\r\n\r\n<Example value=\"default\" />\r\n\r\n### Separator\r\n\r\n<Example value=\"separator\" />\r\n\r\n### Custom Separator\r\n\r\n<Example value=\"custom-separator\" />\r\n\r\n### Limitation\r\n\r\n<Example value=\"limitation\" />\r\n\r\n### Custom Expander\r\n\r\n<Example value=\"custom-expander\" />\r\n\r\n### Customized\r\n\r\n<Example value=\"customized\" />\r\n\r\n<LastModified />\r\n",
      "slots": [
        {
          "name": "default",
          "description": "The default slot."
        },
        {
          "name": "expander",
          "description": "The expander slot."
        },
        {
          "name": "separator",
          "description": "The separator slot."
        }
      ],
      "styles": [
        {
          "description": "Used to adjust the Horizontal gap.",
          "initializer": "0.5em",
          "name": "--plus-breadcrumb-gutter-x"
        },
        {
          "description": "Used to adjust the Vertical gap.",
          "initializer": "0.5em",
          "name": "--plus-breadcrumb-gutter-y"
        }
      ],
      "tags": [],
      "title": "Breadcrumb"
    },
    {
      "events": [
        {
          "cancelable": false,
          "deprecated": false,
          "description": "Fires when file(s) are selected.",
          "detail": "EventEmitter<BrowseEvent>",
          "detailReference": "./browse.types",
          "experimental": false,
          "model": false,
          "name": "plusChange",
          "tags": [
            {
              "key": "",
              "value": "Fires when file(s) are selected."
            }
          ]
        },
        {
          "cancelable": false,
          "deprecated": false,
          "description": "Fires when selected invalid file(s).",
          "detail": "EventEmitter<BrowseEvent>",
          "detailReference": "./browse.types",
          "experimental": false,
          "model": false,
          "name": "plusError",
          "tags": [
            {
              "key": "",
              "value": "Fires when selected invalid file(s)."
            }
          ]
        },
        {
          "cancelable": false,
          "deprecated": false,
          "description": "Fires when file(s) are added successfully.",
          "detail": "EventEmitter<BrowseEvent>",
          "detailReference": "./browse.types",
          "experimental": false,
          "model": false,
          "name": "plusSuccess",
          "tags": [
            {
              "key": "",
              "value": "Fires when file(s) are added successfully."
            }
          ]
        }
      ],
      "deprecated": false,
      "description": "Allows you to select file or files by using click or drag & drop functionality.",
      "experimental": false,
      "key": "browse",
      "lastModified": "2024-02-17T09:22:22.627Z",
      "methods": [
        {
          "async": false,
          "description": "Opens the browse dialog.",
          "deprecated": false,
          "experimental": false,
          "name": "browse",
          "parameters": [],
          "returns": "void",
          "tags": [
            {
              "key": "",
              "value": "Opens the browse dialog."
            }
          ],
          "signature": "browse() => void"
        }
      ],
      "parts": [],
      "properties": [
        {
          "attribute": "accept",
          "deprecated": false,
          "description": "One or more[unique file type specifiers](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#unique_file_type_specifiers)describing file types to allow.",
          "experimental": false,
          "model": false,
          "name": "accept",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "One or more[unique file type specifiers](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#unique_file_type_specifiers)describing file types to allow."
            }
          ],
          "type": "string"
        },
        {
          "attribute": "disabled",
          "deprecated": false,
          "description": "Disables the element functionality.",
          "experimental": false,
          "model": false,
          "name": "disabled",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Disables the element functionality."
            }
          ],
          "type": "boolean"
        },
        {
          "attribute": "droppable",
          "deprecated": false,
          "description": "Adds droppable ability.",
          "experimental": false,
          "model": false,
          "name": "droppable",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Adds droppable ability."
            }
          ],
          "type": "boolean"
        },
        {
          "attribute": "min",
          "deprecated": false,
          "description": "Specifies the minimum number of files.",
          "experimental": false,
          "model": false,
          "name": "min",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies the minimum number of files."
            }
          ],
          "type": "number"
        },
        {
          "attribute": "max",
          "deprecated": false,
          "description": "Specifies the maximum number of files.",
          "experimental": false,
          "model": false,
          "name": "max",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies the maximum number of files."
            }
          ],
          "type": "number"
        },
        {
          "attribute": "min-size",
          "deprecated": false,
          "description": "Specifies the minimum size of the file(s) in bytes.",
          "experimental": false,
          "model": false,
          "name": "minSize",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies the minimum size of the file(s) in bytes."
            }
          ],
          "type": "number"
        },
        {
          "attribute": "max-size",
          "deprecated": false,
          "description": "Specifies the maximum size of the file(s) in bytes.",
          "experimental": false,
          "model": false,
          "name": "maxSize",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies the maximum size of the file(s) in bytes."
            }
          ],
          "type": "number"
        },
        {
          "attribute": "multiple",
          "deprecated": false,
          "description": "Allows to select more than one file.",
          "experimental": false,
          "model": false,
          "name": "multiple",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Allows to select more than one file."
            }
          ],
          "type": "boolean"
        }
      ],
      "readmeContent": "# Browse\r\n\r\nAllows you to select file or files by using click or drag & drop functionality.\r\n\r\n<Playground />\r\n\r\n<Usage />\r\n\r\n<Api />\r\n\r\n<GlobalConfig />\r\n\r\n<Examples />\r\n\r\n### Default\r\n\r\n<Example value=\"default\" />\r\n\r\n### Disabled\r\n\r\n<Example value=\"disabled\" />\r\n\r\n### Multiple\r\n\r\n<Example value=\"multiple\" />\r\n\r\n### Accept\r\n\r\n<Example value=\"accept\" />\r\n\r\n### Droppable\r\n\r\n<Example value=\"droppable\" />\r\n\r\n### Min\r\n\r\n<Example value=\"min\" />\r\n\r\n### Max\r\n\r\n<Example value=\"max\" />\r\n\r\n### Min Size\r\n\r\n<Example value=\"min-size\" />\r\n\r\n### Max Size\r\n\r\n<Example value=\"max-size\" />\r\n\r\n<LastModified />\r\n",
      "slots": [
        {
          "name": "default",
          "description": "The default slot."
        }
      ],
      "styles": [],
      "tags": [],
      "title": "Browse"
    },
    {
      "events": [],
      "deprecated": false,
      "description": "Cards contain content and actions about a single subject.",
      "experimental": false,
      "key": "card",
      "lastModified": "2024-02-17T09:22:22.641Z",
      "methods": [],
      "parts": [],
      "properties": [
        {
          "attribute": "elevation",
          "deprecated": false,
          "description": "If you want the card to have shadow, use the elevation property,And select the property value between `1` and `24`.",
          "experimental": false,
          "model": false,
          "name": "elevation",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "If you want the card to have shadow, use the elevation property,And select the property value between `1` and `24`."
            }
          ],
          "type": "CardElevation",
          "typeReference": "./card.types"
        },
        {
          "attribute": "flat",
          "deprecated": false,
          "description": "Use the flat property to neutralize elevation.",
          "experimental": false,
          "model": false,
          "name": "flat",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Use the flat property to neutralize elevation."
            }
          ],
          "type": "boolean"
        },
        {
          "attribute": "outlined",
          "deprecated": false,
          "description": "If you want the card to have border, use the outlined property.",
          "experimental": false,
          "model": false,
          "name": "outlined",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "If you want the card to have border, use the outlined property."
            }
          ],
          "type": "boolean"
        },
        {
          "attribute": "tile",
          "deprecated": false,
          "description": "Use tile property to neutralize border-radius.",
          "experimental": false,
          "model": false,
          "name": "tile",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Use tile property to neutralize border-radius."
            }
          ],
          "type": "boolean"
        }
      ],
      "readmeContent": "# Card\r\n\r\nCards contain content and actions about a single subject.\r\n\r\n<Playground />\r\n\r\n<Usage />\r\n\r\n<Api />\r\n\r\n<GlobalConfig />\r\n\r\n<Examples />\r\n\r\n### Default\r\n\r\n<Example value=\"default\" />\r\n\r\n### Elevation\r\n\r\nThe card element accepts a custom elevation between `1` and `24`. The elevation property specifies the value of the box-shodow property.\r\n<Example value=\"elevation\" />\r\n\r\n### Outlined\r\n\r\nBy default, the card element has no border. outlined property Adds border.\r\n<Example value=\"outlined\" />\r\n\r\n### Border Color\r\n\r\n<Example value=\"border-color\" />\r\n\r\n### Border Width\r\n\r\nBy default, the card element has no border. outlined property Adds border.\r\n<Example value=\"border-width\" />\r\n\r\n### Tile\r\n\r\nBy default, the card element has border-radius. The tile property neutralizes border-radius.\r\n<Example value=\"tile\" />\r\n\r\n### Background Color\r\n\r\n<Example value=\"background-color\" />\r\n\r\n### Customize\r\n\r\n<Example value=\"customize\" />\r\n\r\n<LastModified />\r\n",
      "slots": [
        {
          "name": "default",
          "description": "The default slot."
        }
      ],
      "styles": [
        {
          "description": "Used to adjust the background-color.",
          "initializer": "#fff",
          "name": "--plus-card-background-color"
        },
        {
          "description": "Used to adjust the border-color.",
          "initializer": "#d3d3d3",
          "name": "--plus-card-border-color"
        },
        {
          "description": "Used to adjust the border-radius.",
          "initializer": "0.25rem",
          "name": "--plus-card-border-radius"
        },
        {
          "description": "Used to adjust the border-width.",
          "initializer": "1px",
          "name": "--plus-card-border-width"
        },
        {
          "description": "Used to adjust the box-shodow.",
          "initializer": "none",
          "name": "--plus-card-box-shadow"
        }
      ],
      "tags": [],
      "title": "Card"
    },
    {
      "events": [],
      "deprecated": false,
      "experimental": false,
      "key": "card-body",
      "lastModified": "2024-02-17T09:22:22.629Z",
      "methods": [],
      "parts": [],
      "properties": [],
      "slots": [
        {
          "name": "default",
          "description": "The default slot."
        }
      ],
      "styles": [],
      "tags": [
        {
          "key": "development",
          "value": ""
        }
      ],
      "title": "Card Body"
    },
    {
      "events": [],
      "deprecated": false,
      "description": "Centers content vertically and horizontally.",
      "experimental": false,
      "key": "center",
      "lastModified": "2024-02-17T09:22:22.643Z",
      "methods": [],
      "parts": [],
      "properties": [
        {
          "attribute": "inline",
          "deprecated": false,
          "description": "Converts the `display` CSS property from `flex` to `inline-flex`.",
          "experimental": false,
          "model": false,
          "name": "inline",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Converts the `display` CSS property from `flex` to `inline-flex`."
            }
          ],
          "type": "boolean"
        }
      ],
      "readmeContent": "# Center\r\n\r\nCenters content vertically and horizontally.\r\n\r\n<Playground />\r\n\r\n<Usage />\r\n\r\n<Api />\r\n\r\n<GlobalConfig />\r\n\r\n<Examples />\r\n\r\n### Default\r\n\r\n<Example value=\"default\" />\r\n\r\n### Inline\r\n\r\n<Example value=\"inline\" />\r\n\r\n<LastModified />\r\n",
      "slots": [
        {
          "name": "default",
          "description": "The default slot."
        }
      ],
      "styles": [],
      "tags": [
        {
          "key": "stable",
          "value": ""
        }
      ],
      "title": "Center"
    },
    {
      "events": [
        {
          "cancelable": true,
          "deprecated": false,
          "description": "Fires when outside of the element is clicked.",
          "detail": "EventEmitter<void>",
          "experimental": false,
          "model": false,
          "name": "plusClickOutside",
          "tags": [
            {
              "key": "",
              "value": "Fires when outside of the element is clicked."
            }
          ]
        }
      ],
      "deprecated": false,
      "description": "Detects when a click event happens outside of itself.",
      "experimental": false,
      "key": "click-outside",
      "lastModified": "2024-02-17T09:22:22.647Z",
      "methods": [],
      "parts": [],
      "properties": [
        {
          "attribute": "capture",
          "deprecated": false,
          "description": "A boolean value indicating that events of this type will be dispatched to the registered`listener` before being dispatched to any `EventTarget` beneath it in the DOM tree.",
          "experimental": false,
          "model": false,
          "name": "capture",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "A boolean value indicating that events of this type will be dispatched to the registered`listener` before being dispatched to any `EventTarget` beneath it in the DOM tree."
            }
          ],
          "type": "boolean"
        },
        {
          "attribute": "disabled",
          "deprecated": false,
          "description": "Disables the element functionality.",
          "experimental": false,
          "model": false,
          "name": "disabled",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Disables the element functionality."
            }
          ],
          "type": "boolean"
        },
        {
          "attribute": "once",
          "deprecated": false,
          "description": "The event fires only once.",
          "experimental": false,
          "model": false,
          "name": "once",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "The event fires only once."
            }
          ],
          "type": "boolean"
        }
      ],
      "readmeContent": "# Click Outside\r\n\r\nDetects when a click event happens outside of itself.\r\n\r\n<Playground />\r\n\r\n<Usage />\r\n\r\n<Api />\r\n\r\n<GlobalConfig />\r\n\r\n<Examples />\r\n\r\n### Default\r\n\r\n<Example value=\"default\" />\r\n\r\n### Menu\r\n\r\n<Example value=\"menu\" />\r\n\r\n<LastModified />\r\n",
      "slots": [
        {
          "name": "default",
          "description": "The default slot."
        }
      ],
      "styles": [],
      "tags": [
        {
          "key": "stable",
          "value": ""
        }
      ],
      "title": "Click Outside"
    },
    {
      "events": [
        {
          "cancelable": false,
          "deprecated": false,
          "description": "Is Triggered when transition ended.",
          "detail": "EventEmitter<void>",
          "experimental": false,
          "model": false,
          "name": "plusComplete",
          "tags": [
            {
              "key": "",
              "value": "Is Triggered when transition ended."
            }
          ]
        }
      ],
      "deprecated": false,
      "description": "Can be used to quickly create animations that display numerical data in a more interesting way.",
      "experimental": false,
      "key": "counter",
      "lastModified": "2024-02-17T09:22:22.659Z",
      "methods": [
        {
          "async": false,
          "description": "Completes the transition.",
          "deprecated": false,
          "experimental": false,
          "name": "complete",
          "parameters": [],
          "returns": "void",
          "tags": [
            {
              "key": "",
              "value": "Completes the transition."
            }
          ],
          "signature": "complete() => void"
        },
        {
          "async": false,
          "description": "Pauses the transition.",
          "deprecated": false,
          "experimental": false,
          "name": "pause",
          "parameters": [],
          "returns": "void",
          "tags": [
            {
              "key": "",
              "value": "Pauses the transition."
            }
          ],
          "signature": "pause() => void"
        },
        {
          "async": false,
          "description": "Starts the transition.",
          "deprecated": false,
          "experimental": false,
          "name": "start",
          "parameters": [],
          "returns": "void",
          "tags": [
            {
              "key": "",
              "value": "Starts the transition."
            }
          ],
          "signature": "start() => void"
        },
        {
          "async": false,
          "description": "Stops the transition.",
          "deprecated": false,
          "experimental": false,
          "name": "stop",
          "parameters": [],
          "returns": "void",
          "tags": [
            {
              "key": "",
              "value": "Stops the transition."
            }
          ],
          "signature": "stop() => void"
        }
      ],
      "parts": [],
      "properties": [
        {
          "attribute": "easing",
          "deprecated": false,
          "description": "Easing function. Click [here](http://robertpenner.com/easing) for more details.",
          "experimental": false,
          "initializer": "'ease-out-expo'",
          "model": false,
          "name": "easing",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Easing function. Click [here](http://robertpenner.com/easing) for more details."
            }
          ],
          "type": "CounterEasing",
          "typeReference": "./counter.types"
        },
        {
          "attribute": "decimal",
          "deprecated": false,
          "description": "Specifies decimal character.",
          "experimental": false,
          "initializer": "'.'",
          "model": false,
          "name": "decimal",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies decimal character."
            }
          ],
          "type": "string"
        },
        {
          "attribute": "decimals",
          "deprecated": false,
          "description": "Amount of decimals to display.",
          "experimental": false,
          "initializer": "0",
          "model": false,
          "name": "decimals",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Amount of decimals to display."
            }
          ],
          "type": "number"
        },
        {
          "attribute": "delay",
          "deprecated": false,
          "description": "Delay in milliseconds before starting the transition.",
          "experimental": false,
          "initializer": "0",
          "model": false,
          "name": "delay",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Delay in milliseconds before starting the transition."
            }
          ],
          "type": "number"
        },
        {
          "attribute": "duration",
          "deprecated": false,
          "description": "Duration in milliseconds.",
          "experimental": false,
          "initializer": "1000",
          "model": false,
          "name": "duration",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Duration in milliseconds."
            }
          ],
          "type": "number"
        },
        {
          "attribute": "from",
          "deprecated": false,
          "description": "Initial value.",
          "experimental": false,
          "initializer": "0",
          "model": false,
          "name": "from",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Initial value."
            }
          ],
          "type": "number"
        },
        {
          "attribute": "numerals",
          "deprecated": false,
          "description": "Specifies numeral glyph substitution.",
          "experimental": false,
          "model": false,
          "name": "numerals",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies numeral glyph substitution."
            }
          ],
          "type": "string[]"
        },
        {
          "attribute": "play",
          "deprecated": false,
          "description": "Starts/Stops the transition.",
          "experimental": false,
          "model": false,
          "name": "play",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Starts/Stops the transition."
            }
          ],
          "type": "boolean"
        },
        {
          "attribute": "separator",
          "deprecated": false,
          "description": "Specifies character of thousands separator.",
          "experimental": false,
          "model": false,
          "name": "separator",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies character of thousands separator."
            }
          ],
          "type": "string"
        },
        {
          "attribute": "to",
          "deprecated": false,
          "description": "Target value.",
          "experimental": false,
          "model": false,
          "name": "to",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Target value."
            }
          ],
          "type": "number"
        }
      ],
      "readmeContent": "# Counter\r\n\r\nCan be used to quickly create animations that display numerical data in a more interesting way.\r\n\r\n<Playground />\r\n\r\n<Usage />\r\n\r\n<Api />\r\n\r\n<GlobalConfig />\r\n\r\n<Examples />\r\n\r\n### Default\r\n\r\n<Example value=\"default\" />\r\n\r\n### Range\r\n\r\n<Example value=\"range\" />\r\n\r\n### Reverse\r\n\r\n<Example value=\"reverse\" />\r\n\r\n### Duration\r\n\r\n<Example value=\"duration\" />\r\n\r\n### Delay\r\n\r\n<Example value=\"delay\" />\r\n\r\n### Separator\r\n\r\n<Example value=\"separator\" />\r\n\r\n### Decimal\r\n\r\n<Example value=\"decimal\" />\r\n\r\n### Separator & Decimal\r\n\r\n<Example value=\"separator-decimal\" />\r\n\r\n### Numerals\r\n\r\n<Example value=\"numerals\" />\r\n\r\n### Intersection\r\n\r\n<Example value=\"intersection\" />\r\n\r\n<LastModified />\r\n",
      "slots": [],
      "styles": [],
      "tags": [
        {
          "key": "stable",
          "value": ""
        }
      ],
      "title": "Counter"
    },
    {
      "events": [
        {
          "cancelable": false,
          "deprecated": false,
          "description": "Fires when the `image` or the `viewport` is changed.",
          "detail": "EventEmitter<CropperCropEvent>",
          "detailReference": "./cropper.types",
          "experimental": false,
          "model": false,
          "name": "plusCrop",
          "tags": [
            {
              "key": "",
              "value": "Fires when the `image` or the `viewport` is changed."
            }
          ]
        },
        {
          "cancelable": false,
          "deprecated": false,
          "description": "Fires when the `image` or the `viewport` changes are finished.",
          "detail": "EventEmitter<CropperPointerEvent>",
          "detailReference": "./cropper.types",
          "experimental": false,
          "model": false,
          "name": "plusCropEnd",
          "tags": [
            {
              "key": "",
              "value": "Fires when the `image` or the `viewport` changes are finished."
            }
          ]
        },
        {
          "cancelable": false,
          "deprecated": false,
          "description": "Fires when the `image` or the `viewport` is changing.",
          "detail": "EventEmitter<CropperPointerEvent>",
          "detailReference": "./cropper.types",
          "experimental": false,
          "model": false,
          "name": "plusCropMove",
          "tags": [
            {
              "key": "",
              "value": "Fires when the `image` or the `viewport` is changing."
            }
          ]
        },
        {
          "cancelable": false,
          "deprecated": false,
          "description": "Fires when the `image` or the `viewport` starts to change.",
          "detail": "EventEmitter<CropperPointerEvent>",
          "detailReference": "./cropper.types",
          "experimental": false,
          "model": false,
          "name": "plusCropStart",
          "tags": [
            {
              "key": "",
              "value": "Fires when the `image` or the `viewport` starts to change."
            }
          ]
        },
        {
          "cancelable": false,
          "deprecated": false,
          "description": "Fires when the image has been loaded and the element is ready for operation.",
          "detail": "EventEmitter<void>",
          "experimental": false,
          "model": false,
          "name": "plusReady",
          "tags": [
            {
              "key": "",
              "value": "Fires when the image has been loaded and the element is ready for operation."
            }
          ]
        },
        {
          "cancelable": true,
          "deprecated": false,
          "description": "Fires when the element starts to `zoom in` or `zoom out`.",
          "detail": "EventEmitter<CropperZoomEvent>",
          "detailReference": "./cropper.types",
          "experimental": false,
          "model": false,
          "name": "plusZoom",
          "tags": [
            {
              "key": "",
              "value": "Fires when the element starts to `zoom in` or `zoom out`."
            }
          ]
        }
      ],
      "deprecated": false,
      "description": "Used for cropping large images to fit a container before uploading them to the server.",
      "experimental": false,
      "key": "cropper",
      "lastModified": "2024-02-17T09:22:22.677Z",
      "methods": [
        {
          "async": false,
          "description": "Flips horizontally.",
          "deprecated": false,
          "experimental": false,
          "name": "flipX",
          "parameters": [],
          "returns": "void",
          "tags": [
            {
              "key": "",
              "value": "Flips horizontally."
            }
          ],
          "signature": "flipX() => void"
        },
        {
          "async": false,
          "description": "Flips vertically.",
          "deprecated": false,
          "experimental": false,
          "name": "flipY",
          "parameters": [],
          "returns": "void",
          "tags": [
            {
              "key": "",
              "value": "Flips vertically."
            }
          ],
          "signature": "flipY() => void"
        },
        {
          "async": false,
          "description": "Moves the canvas with relative offsets.",
          "deprecated": false,
          "experimental": false,
          "name": "move",
          "parameters": [
            {
              "description": "- Moving size (px) in the `horizontal` direction. Use `null` to ignore this.",
              "required": false,
              "name": "offsetX",
              "type": "number"
            },
            {
              "description": "- Moving size (px) in the `vertical` direction. Use `null` to ignore this.",
              "required": false,
              "name": "offsetY",
              "type": "number"
            }
          ],
          "returns": "void",
          "tags": [
            {
              "key": "",
              "value": "Moves the canvas with relative offsets."
            },
            {
              "key": "param",
              "value": "offsetX - Moving size (px) in the `horizontal` direction. Use `null` to ignore this."
            },
            {
              "key": "param",
              "value": "offsetY - Moving size (px) in the `vertical` direction. Use `null` to ignore this."
            }
          ],
          "signature": "move(offsetX?: number, offsetY?: number) => void"
        },
        {
          "async": false,
          "description": "Moves the canvas to an absolute point.",
          "deprecated": false,
          "experimental": false,
          "name": "moveTo",
          "parameters": [
            {
              "description": "- The `left` value of the canvas. Use `null` to ignore this.",
              "required": false,
              "name": "x",
              "type": "number"
            },
            {
              "description": "- The `top` value of the canvas. Use `null` to ignore this.",
              "required": false,
              "name": "y",
              "type": "number"
            }
          ],
          "returns": "void",
          "tags": [
            {
              "key": "",
              "value": "Moves the canvas to an absolute point."
            },
            {
              "key": "param",
              "value": "x - The `left` value of the canvas. Use `null` to ignore this."
            },
            {
              "key": "param",
              "value": "y - The `top` value of the canvas. Use `null` to ignore this."
            }
          ],
          "signature": "moveTo(x?: number, y?: number) => void"
        },
        {
          "async": false,
          "description": "Resets the image and viewport to their initial states.",
          "deprecated": false,
          "experimental": false,
          "name": "reset",
          "parameters": [],
          "returns": "void",
          "tags": [
            {
              "key": "",
              "value": "Resets the image and viewport to their initial states."
            }
          ],
          "signature": "reset() => void"
        },
        {
          "async": false,
          "description": "Rotates the image with a relative degree.",
          "deprecated": false,
          "experimental": false,
          "name": "rotate",
          "parameters": [
            {
              "required": true,
              "name": "degree",
              "type": "number"
            }
          ],
          "returns": "void",
          "tags": [
            {
              "key": "",
              "value": "Rotates the image with a relative degree."
            }
          ],
          "signature": "rotate(degree: number) => void"
        },
        {
          "async": false,
          "description": "Rotates the image to an absolute degree.",
          "deprecated": false,
          "experimental": false,
          "name": "rotateTo",
          "parameters": [
            {
              "required": true,
              "name": "degree",
              "type": "number"
            }
          ],
          "returns": "void",
          "tags": [
            {
              "key": "",
              "value": "Rotates the image to an absolute degree."
            }
          ],
          "signature": "rotateTo(degree: number) => void"
        },
        {
          "async": false,
          "description": "Gets `canvas` from the cropped image.",
          "deprecated": false,
          "experimental": false,
          "name": "toCanvas",
          "parameters": [],
          "returns": "HTMLCanvasElement",
          "tags": [
            {
              "key": "",
              "value": "Gets `canvas` from the cropped image."
            }
          ],
          "signature": "toCanvas() => HTMLCanvasElement"
        },
        {
          "async": false,
          "description": "Zooms the canvas with a relative ratio.",
          "deprecated": false,
          "experimental": false,
          "name": "zoom",
          "parameters": [
            {
              "required": true,
              "name": "ratio",
              "type": "number"
            }
          ],
          "returns": "void",
          "tags": [
            {
              "key": "",
              "value": "Zooms the canvas with a relative ratio."
            }
          ],
          "signature": "zoom(ratio: number) => void"
        },
        {
          "async": false,
          "description": "Zooms the canvas to an absolute ratio.",
          "deprecated": false,
          "experimental": false,
          "name": "zoomTo",
          "parameters": [
            {
              "required": true,
              "name": "ratio",
              "type": "number"
            }
          ],
          "returns": "void",
          "tags": [
            {
              "key": "",
              "value": "Zooms the canvas to an absolute ratio."
            }
          ],
          "signature": "zoomTo(ratio: number) => void"
        }
      ],
      "parts": [],
      "properties": [
        {
          "attribute": "area",
          "deprecated": false,
          "description": "A number between 0 and 1. Specifies the automatic cropping area size.",
          "experimental": false,
          "initializer": "0.75",
          "model": false,
          "name": "area",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "A number between 0 and 1. Specifies the automatic cropping area size."
            }
          ],
          "type": "number"
        },
        {
          "attribute": "aspect-ratio",
          "deprecated": false,
          "description": "Specifies the initial aspect ratio of the viewport.",
          "experimental": false,
          "model": false,
          "name": "aspectRatio",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies the initial aspect ratio of the viewport."
            }
          ],
          "type": "CropperAspectRatio",
          "typeReference": "./cropper.types"
        },
        {
          "attribute": "backdrop",
          "deprecated": false,
          "description": "Shows the black modal above the image and under the viewport.",
          "experimental": false,
          "initializer": true,
          "model": false,
          "name": "backdrop",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Shows the black modal above the image and under the viewport."
            }
          ],
          "type": "boolean"
        },
        {
          "attribute": "background",
          "deprecated": false,
          "description": "Shows the grid background of the container.",
          "experimental": false,
          "model": false,
          "name": "background",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Shows the grid background of the container."
            }
          ],
          "type": "boolean"
        },
        {
          "attribute": "disabled",
          "deprecated": false,
          "description": "Disables the element functionality.",
          "experimental": false,
          "model": false,
          "name": "disabled",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Disables the element functionality."
            }
          ],
          "type": "boolean"
        },
        {
          "attribute": "guides",
          "deprecated": false,
          "description": "Shows the dashed lines above the viewport.",
          "experimental": false,
          "model": false,
          "name": "guides",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Shows the dashed lines above the viewport."
            }
          ],
          "type": "boolean"
        },
        {
          "attribute": "indicator",
          "deprecated": false,
          "description": "Shows the center indicator above the viewport.",
          "experimental": false,
          "model": false,
          "name": "indicator",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Shows the center indicator above the viewport."
            }
          ],
          "type": "boolean"
        },
        {
          "attribute": "mode",
          "deprecated": false,
          "description": "Specifies the mode.",
          "experimental": false,
          "initializer": "'move'",
          "model": false,
          "name": "mode",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies the mode."
            }
          ],
          "type": "CropperMode",
          "typeReference": "./cropper.types"
        },
        {
          "attribute": "resizer",
          "deprecated": false,
          "description": "Enables to resize the viewport by dragging (Works when the value of the `mode` property is `crop`).",
          "experimental": false,
          "initializer": "'both'",
          "model": false,
          "name": "resizer",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Enables to resize the viewport by dragging (Works when the value of the `mode` property is `crop`)."
            }
          ],
          "type": "CropperResizer",
          "typeReference": "./cropper.types"
        },
        {
          "attribute": "resizer-shape",
          "deprecated": false,
          "description": "Specifies the shape of the resizer.",
          "experimental": false,
          "initializer": "'square'",
          "model": false,
          "name": "resizerShape",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies the shape of the resizer."
            }
          ],
          "type": "CropperResizerShape",
          "typeReference": "./cropper.types"
        },
        {
          "attribute": "responsive",
          "deprecated": false,
          "description": "Re-renders when resizing the window.",
          "experimental": false,
          "initializer": "'reset'",
          "model": false,
          "name": "responsive",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Re-renders when resizing the window."
            }
          ],
          "type": "CropperResponsive",
          "typeReference": "./cropper.types"
        },
        {
          "attribute": "shape",
          "deprecated": false,
          "description": "Specifies the shape of the viewport.",
          "experimental": false,
          "initializer": "'rectangle'",
          "model": false,
          "name": "shape",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies the shape of the viewport."
            }
          ],
          "type": "CropperShape",
          "typeReference": "./cropper.types"
        },
        {
          "attribute": "src",
          "deprecated": false,
          "description": "Specifies the image's src.",
          "experimental": false,
          "model": false,
          "name": "src",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies the image's src."
            }
          ],
          "type": "string"
        },
        {
          "attribute": "value",
          "deprecated": false,
          "description": "Gets/Sets data.",
          "experimental": false,
          "model": false,
          "name": "value",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Gets/Sets data."
            }
          ],
          "type": "CropperValue",
          "typeReference": "./cropper.types"
        },
        {
          "attribute": "view",
          "deprecated": false,
          "description": "Specifies the view.",
          "experimental": false,
          "initializer": "'cover'",
          "model": false,
          "name": "view",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies the view."
            }
          ],
          "type": "CropperView",
          "typeReference": "./cropper.types"
        },
        {
          "attribute": "zoomable",
          "deprecated": false,
          "description": "Enables to zoom the image.",
          "experimental": false,
          "initializer": true,
          "model": false,
          "name": "zoomable",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Enables to zoom the image."
            }
          ],
          "type": "CropperZoomable",
          "typeReference": "./cropper.types"
        },
        {
          "attribute": "zoom-ratio",
          "deprecated": false,
          "description": "Specifies zoom ratio when zooming the image by wheeling the mouse.",
          "experimental": false,
          "initializer": "0.1",
          "model": false,
          "name": "zoomRatio",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies zoom ratio when zooming the image by wheeling the mouse."
            }
          ],
          "type": "number"
        }
      ],
      "readmeContent": "# Cropper\r\n\r\nUsed for cropping large images to fit a container before uploading them to the server.\r\n\r\n<Playground />\r\n\r\n<Usage />\r\n\r\n<Api />\r\n\r\n<GlobalConfig />\r\n\r\n<Examples />\r\n\r\n### Default\r\n\r\n<Example value=\"default\" />\r\n\r\n### Disabled\r\n\r\n<Example value=\"disabled\" />\r\n\r\n### Shape\r\n\r\n<Example value=\"shape\" />\r\n\r\n### Indicator\r\n\r\n<Example value=\"indicator\" />\r\n\r\n### Guides\r\n\r\n<Example value=\"guides\" />\r\n\r\n### Backdrop\r\n\r\n<Example value=\"backdrop\" />\r\n\r\n### Background\r\n\r\n<Example value=\"background\" />\r\n\r\n### Area\r\n\r\n<Example value=\"area\" />\r\n\r\n### Aspect Ratio\r\n\r\n<Example value=\"aspect-ratio\" />\r\n\r\n### Mode\r\n\r\n<Example value=\"mode\" />\r\n\r\n### Zoomable\r\n\r\n<Example value=\"zoomable\" />\r\n\r\n### Zoom Ratio\r\n\r\n<Example value=\"zoom-ratio\" />\r\n\r\n### To Base64\r\n\r\n<Example value=\"to-base64\" />\r\n\r\n### To Blob\r\n\r\nOpen the developer console.\r\n\r\n<Example value=\"to-blob\" />\r\n\r\n### To Url\r\n\r\n<Example value=\"to-url\" />\r\n\r\n### Styles\r\n\r\n<Example value=\"styles\" />\r\n\r\n<LastModified />\r\n",
      "slots": [],
      "styles": [
        {
          "description": "Used to adjust the backdrop color.",
          "initializer": "#000",
          "name": "--plus-cropper-backdrop-color"
        },
        {
          "description": "Used to adjust the backdrop opacity.",
          "initializer": "0.5",
          "name": "--plus-cropper-backdrop-opacity"
        },
        {
          "description": "Used to adjust the guides color.",
          "initializer": "#fff",
          "name": "--plus-cropper-guides-color"
        },
        {
          "description": "Used to adjust the guides opacity.",
          "initializer": "0.5",
          "name": "--plus-cropper-guides-opacity"
        },
        {
          "description": "Used to adjust the guides style.",
          "initializer": "dashed",
          "name": "--plus-cropper-guides-style"
        },
        {
          "description": "Used to adjust the guides weight.",
          "initializer": "1px",
          "name": "--plus-cropper-guides-weight"
        },
        {
          "description": "Used to adjust the indicator color.",
          "initializer": "#fff",
          "name": "--plus-cropper-indicator-color"
        },
        {
          "description": "Used to adjust the indicator opacity.",
          "initializer": "1",
          "name": "--plus-cropper-indicator-opacity"
        },
        {
          "description": "Used to adjust the indicator size.",
          "initializer": "10px",
          "name": "--plus-cropper-indicator-size"
        },
        {
          "description": "Used to adjust the indicator weight.",
          "initializer": "2px",
          "name": "--plus-cropper-indicator-weight"
        },
        {
          "description": "Used to adjust the resizer color.",
          "initializer": "#fff",
          "name": "--plus-cropper-resizer-color"
        },
        {
          "description": "Used to adjust the resizer offset.",
          "initializer": "0px",
          "name": "--plus-cropper-resizer-offset"
        },
        {
          "description": "Used to adjust the resizer opacity.",
          "initializer": "1",
          "name": "--plus-cropper-resizer-opacity"
        },
        {
          "description": "Used to adjust the resizer size.",
          "initializer": "5px",
          "name": "--plus-cropper-resizer-size"
        },
        {
          "description": "Used to adjust the resizer weight.",
          "initializer": "1px",
          "name": "--plus-cropper-resizer-weight"
        },
        {
          "description": "Used to adjust the viewport color.",
          "initializer": "#fff",
          "name": "--plus-cropper-viewport-color"
        },
        {
          "description": "Used to adjust the viewport opacity.",
          "initializer": "1",
          "name": "--plus-cropper-viewport-opacity"
        },
        {
          "description": "Used to adjust the viewport style.",
          "initializer": "solid",
          "name": "--plus-cropper-viewport-style"
        },
        {
          "description": "Used to adjust the viewport weight.",
          "initializer": "1px",
          "name": "--plus-cropper-viewport-weight"
        }
      ],
      "tags": [
        {
          "key": "dependencies",
          "value": "cropperjs"
        },
        {
          "key": "stable",
          "value": ""
        },
        {
          "key": "thirdParty",
          "value": ""
        }
      ],
      "title": "Cropper"
    },
    {
      "events": [
        {
          "cancelable": true,
          "deprecated": false,
          "description": "When the dialog is going to hide",
          "detail": "EventEmitter<void>",
          "experimental": false,
          "model": false,
          "name": "plusClose",
          "tags": [
            {
              "key": "",
              "value": "When the dialog is going to hide"
            }
          ]
        },
        {
          "cancelable": false,
          "deprecated": false,
          "description": "When the dialog is completely closed and its animation is completed.",
          "detail": "EventEmitter<void>",
          "experimental": false,
          "model": false,
          "name": "plusClosed",
          "tags": [
            {
              "key": "",
              "value": "When the dialog is completely closed and its animation is completed."
            }
          ]
        },
        {
          "cancelable": true,
          "deprecated": false,
          "description": "When the dialog is going to show this event triggers",
          "detail": "EventEmitter<void>",
          "experimental": false,
          "model": false,
          "name": "plusOpen",
          "tags": [
            {
              "key": "",
              "value": "When the dialog is going to show this event triggers"
            }
          ]
        },
        {
          "cancelable": false,
          "deprecated": false,
          "description": "When the dialog is completely shown and its animation is completed.",
          "detail": "EventEmitter<void>",
          "experimental": false,
          "model": false,
          "name": "plusOpened",
          "tags": [
            {
              "key": "",
              "value": "When the dialog is completely shown and its animation is completed."
            }
          ]
        }
      ],
      "deprecated": false,
      "description": "A dialog is a `conversation` between the system and the user. It is prompted when the system needs input from the user or to give the user urgent information concerning their current workflow.",
      "experimental": false,
      "key": "dialog",
      "lastModified": "2024-02-17T09:22:22.703Z",
      "methods": [],
      "parts": [
        {
          "name": "backdrop",
          "description": "Backdrop element."
        }
      ],
      "properties": [
        {
          "attribute": "animation",
          "deprecated": false,
          "description": "TODO",
          "experimental": false,
          "model": false,
          "name": "animation",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "TODO"
            }
          ],
          "type": "string"
        },
        {
          "attribute": "backdrop",
          "deprecated": false,
          "description": "Activate the dialog's backdrop to show or not.",
          "experimental": false,
          "initializer": true,
          "model": false,
          "name": "backdrop",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Activate the dialog's backdrop to show or not."
            }
          ],
          "type": "boolean"
        },
        {
          "attribute": "connector",
          "deprecated": false,
          "description": "This property helps you to attach which dialog toggler controls the dialog.It doesn't matter where the dialog toggler is.You can put the dialog's toggler inside or outside of the dialog.Read more about connectors [here](/connector).",
          "experimental": false,
          "model": false,
          "name": "connector",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "This property helps you to attach which dialog toggler controls the dialog.It doesn't matter where the dialog toggler is.You can put the dialog's toggler inside or outside of the dialog.Read more about connectors [here](/connector)."
            }
          ],
          "type": "string"
        },
        {
          "attribute": "full-height",
          "deprecated": false,
          "description": "Set the height of the dialog as much as the screen's height.",
          "experimental": false,
          "model": false,
          "name": "fullHeight",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Set the height of the dialog as much as the screen's height."
            }
          ],
          "type": "boolean"
        },
        {
          "attribute": "full-width",
          "deprecated": false,
          "description": "Set the width of the dialog as much as the screen's width.",
          "experimental": false,
          "model": false,
          "name": "fullWidth",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Set the width of the dialog as much as the screen's width."
            }
          ],
          "type": "boolean"
        },
        {
          "attribute": "fullscreen",
          "deprecated": false,
          "description": "Set both width and height of the dialog to occupy the screen size.",
          "experimental": false,
          "model": false,
          "name": "fullscreen",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Set both width and height of the dialog to occupy the screen size."
            }
          ],
          "type": "DialogFullscreen",
          "typeReference": "./dialog.types"
        },
        {
          "attribute": "keyboard",
          "deprecated": false,
          "description": "Closes the dialog when `escape` key is pressed.",
          "experimental": false,
          "initializer": true,
          "model": false,
          "name": "keyboard",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Closes the dialog when `escape` key is pressed."
            }
          ],
          "type": "boolean"
        },
        {
          "attribute": "open",
          "deprecated": false,
          "description": "Control dialog to show or not.",
          "experimental": false,
          "model": false,
          "name": "open",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Control dialog to show or not."
            }
          ],
          "type": "boolean"
        },
        {
          "attribute": "persistent",
          "deprecated": false,
          "description": "It prevents the dialog from closing on clicking outside of the element.",
          "experimental": false,
          "model": false,
          "name": "persistent",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "It prevents the dialog from closing on clicking outside of the element."
            }
          ],
          "type": "boolean"
        },
        {
          "attribute": "placement",
          "deprecated": false,
          "description": "Specifies where to show the dialog box by choosing two values, one for horizontal and another for vertical.Horizontal has a range of `left`, `center`, `right`, `start`, `end`, and vertical values are `top`, `center` and `bottom`.",
          "experimental": false,
          "initializer": "'top'",
          "model": false,
          "name": "placement",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies where to show the dialog box by choosing two values, one for horizontal and another for vertical.Horizontal has a range of `left`, `center`, `right`, `start`, `end`, and vertical values are `top`, `center` and `bottom`."
            }
          ],
          "type": "DialogPlacement",
          "typeReference": "./dialog.types"
        },
        {
          "attribute": "portal",
          "deprecated": false,
          "description": "Enables or disables the portal.",
          "experimental": true,
          "model": false,
          "name": "portal",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Enables or disables the portal."
            },
            {
              "key": "experimental",
              "value": ""
            }
          ],
          "type": "boolean"
        },
        {
          "attribute": "portal-strategy",
          "deprecated": false,
          "description": "Specifies the position of the dialog.",
          "experimental": true,
          "initializer": "'append'",
          "model": false,
          "name": "portalStrategy",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies the position of the dialog."
            },
            {
              "key": "experimental",
              "value": ""
            }
          ],
          "type": "DialogPortalStrategy",
          "typeReference": "./dialog.types"
        },
        {
          "attribute": "portal-target",
          "deprecated": false,
          "description": "Specifies the position of the dialog relative to the target.",
          "experimental": true,
          "initializer": "'body'",
          "model": false,
          "name": "portalTarget",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies the position of the dialog relative to the target."
            },
            {
              "key": "experimental",
              "value": ""
            }
          ],
          "type": "DialogPortalTarget",
          "typeReference": "./dialog.types"
        },
        {
          "attribute": "scrollable",
          "deprecated": false,
          "description": "It makes the user able to scroll the content by adding a scroll beside it.",
          "experimental": false,
          "model": false,
          "name": "scrollable",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "It makes the user able to scroll the content by adding a scroll beside it."
            }
          ],
          "type": "boolean"
        },
        {
          "attribute": "size",
          "deprecated": false,
          "description": "Determine the width of the dialog.",
          "experimental": false,
          "model": false,
          "name": "size",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Determine the width of the dialog."
            }
          ],
          "type": "DialogSize",
          "typeReference": "./dialog.types"
        },
        {
          "attribute": "sticky",
          "deprecated": false,
          "description": "Removes the margin around the dialog's content.",
          "experimental": false,
          "model": false,
          "name": "sticky",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Removes the margin around the dialog's content."
            }
          ],
          "type": "boolean"
        }
      ],
      "readmeContent": "# Dialog\r\n\r\nA dialog is a `conversation` between the system and the user. It is prompted when the system needs input from the user or to give the user urgent information concerning their current workflow.\r\n\r\n<Playground />\r\n\r\n<Usage />\r\n\r\n<Api />\r\n\r\n<GlobalConfig />\r\n\r\n<Examples />\r\n\r\n### Default\r\n\r\n<Example value=\"default\" />\r\n\r\n### Animation\r\n\r\n<Example value=\"animation\" />\r\n\r\n### Persistent\r\n\r\n<Example value=\"persistent\" />\r\n\r\n### Placement\r\n\r\n<Example value=\"placement\" />\r\n\r\n### Size\r\n\r\n<Example value=\"size\" />\r\n\r\n### Backdrop\r\n\r\n<Example value=\"backdrop\" />\r\n\r\n### Scrollable\r\n\r\n<Example value=\"scrollable\" />\r\n\r\n### Specific Scrollable\r\n\r\n<Example value=\"specific-scrollable\" />\r\n\r\n### Fullscreen\r\n\r\n<Example value=\"fullscreen\" />\r\n\r\n### Full Width\r\n\r\n<Example value=\"full-width\" />\r\n\r\n### Full Height\r\n\r\n<Example value=\"full-height\" />\r\n\r\n### Sticky\r\n\r\n<Example value=\"sticky\" />\r\n\r\n### Nesting\r\n\r\n<Example value=\"nesting\" />\r\n\r\n### Prevent\r\n\r\n<Example value=\"prevent\" />\r\n\r\n<LastModified />\r\n",
      "slots": [
        {
          "name": "default",
          "description": "The default slot."
        }
      ],
      "styles": [],
      "tags": [],
      "title": "Dialog"
    },
    {
      "events": [],
      "deprecated": false,
      "experimental": false,
      "key": "dialog-body",
      "lastModified": "2024-02-17T09:22:22.679Z",
      "methods": [],
      "parts": [],
      "properties": [
        {
          "attribute": "scrollable",
          "deprecated": false,
          "description": "It makes the user able to scroll the content by adding a scroll beside it.",
          "experimental": false,
          "model": false,
          "name": "scrollable",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "It makes the user able to scroll the content by adding a scroll beside it."
            }
          ],
          "type": "boolean"
        }
      ],
      "slots": [
        {
          "name": "default",
          "description": "The default slot."
        }
      ],
      "styles": [],
      "tags": [],
      "title": "Dialog Body"
    },
    {
      "events": [],
      "deprecated": false,
      "experimental": false,
      "key": "dialog-content",
      "lastModified": "2024-02-17T09:22:22.681Z",
      "methods": [],
      "parts": [],
      "properties": [
        {
          "attribute": "scrollable",
          "deprecated": false,
          "description": "It makes the user able to scroll the content by adding a scroll beside it.",
          "experimental": false,
          "model": false,
          "name": "scrollable",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "It makes the user able to scroll the content by adding a scroll beside it."
            }
          ],
          "type": "boolean"
        }
      ],
      "slots": [
        {
          "name": "default",
          "description": "The default slot."
        }
      ],
      "styles": [],
      "tags": [],
      "title": "Dialog Content"
    },
    {
      "events": [],
      "deprecated": false,
      "experimental": false,
      "key": "dialog-footer",
      "lastModified": "2024-02-17T09:22:22.684Z",
      "methods": [],
      "parts": [],
      "properties": [],
      "slots": [
        {
          "name": "default",
          "description": "The default slot."
        }
      ],
      "styles": [],
      "tags": [],
      "title": "Dialog Footer"
    },
    {
      "events": [],
      "deprecated": false,
      "experimental": false,
      "key": "dialog-header",
      "lastModified": "2024-02-17T09:22:22.687Z",
      "methods": [],
      "parts": [],
      "properties": [],
      "slots": [
        {
          "name": "default",
          "description": "The default slot."
        }
      ],
      "styles": [],
      "tags": [],
      "title": "Dialog Header"
    },
    {
      "events": [],
      "deprecated": false,
      "experimental": false,
      "key": "dialog-toggler",
      "lastModified": "2024-02-17T09:22:22.938Z",
      "methods": [],
      "parts": [],
      "properties": [
        {
          "attribute": "connector",
          "deprecated": false,
          "description": "This property helps you to attach which dialog this toggler controls.It doesn't matter where the dialog toggler is.You can put the dialog's toggler inside or outside of the dialog.Read more about connectors [here](/connector).",
          "experimental": false,
          "model": false,
          "name": "connector",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "This property helps you to attach which dialog this toggler controls.It doesn't matter where the dialog toggler is.You can put the dialog's toggler inside or outside of the dialog.Read more about connectors [here](/connector)."
            }
          ],
          "type": "string"
        }
      ],
      "slots": [
        {
          "name": "default",
          "description": "The default slot."
        }
      ],
      "styles": [],
      "tags": [
        {
          "key": "TODO",
          "value": "open    - Specifies the content of toggler when it's opened."
        },
        {
          "key": "TODO",
          "value": "close   - Specifies the content of toggler when it's closed."
        }
      ],
      "title": "Dialog Toggler"
    },
    {
      "events": [],
      "deprecated": false,
      "description": "A thin line that divides the content vertically or horizontally.",
      "experimental": false,
      "key": "divider",
      "lastModified": "2024-02-17T09:22:22.950Z",
      "methods": [],
      "parts": [],
      "properties": [
        {
          "attribute": "placement",
          "deprecated": false,
          "description": "Specifies the location of the default slot.",
          "experimental": false,
          "initializer": "'center'",
          "model": false,
          "name": "placement",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies the location of the default slot."
            }
          ],
          "type": "DividerPlacement",
          "typeReference": "./divider.types"
        },
        {
          "attribute": "width",
          "deprecated": false,
          "description": "Specifies the width of the border.",
          "experimental": false,
          "initializer": "'md'",
          "model": false,
          "name": "width",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies the width of the border."
            }
          ],
          "type": "DividerWidth",
          "typeReference": "./divider.types"
        },
        {
          "attribute": "type",
          "deprecated": false,
          "description": "Specifies the style of the border.",
          "experimental": false,
          "initializer": "'solid'",
          "model": false,
          "name": "type",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies the style of the border."
            }
          ],
          "type": "DividerType",
          "typeReference": "./divider.types"
        },
        {
          "attribute": "variant",
          "deprecated": false,
          "description": "Specifies the amount of indentation.",
          "experimental": false,
          "initializer": "'full'",
          "model": false,
          "name": "variant",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies the amount of indentation."
            }
          ],
          "type": "DividerVariant",
          "typeReference": "./divider.types"
        },
        {
          "attribute": "vertical",
          "deprecated": false,
          "description": "Draws the divider in a vertical orientation.",
          "experimental": false,
          "model": false,
          "name": "vertical",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Draws the divider in a vertical orientation."
            }
          ],
          "type": "boolean"
        }
      ],
      "readmeContent": "# Divider\r\n\r\nA thin line that divides the content vertically or horizontally.\r\n\r\n<Playground />\r\n\r\n<Usage />\r\n\r\n<Api />\r\n\r\n<GlobalConfig />\r\n\r\n<Examples />\r\n\r\n### Width\r\n\r\n<Example value=\"width\" />\r\n\r\n### Type\r\n\r\n<Example value=\"type\" />\r\n\r\n### Variant\r\n\r\n<Example value=\"variant\" />\r\n\r\n### Placement\r\n\r\n<Example value=\"placement\" />\r\n\r\n### Horizontal\r\n\r\n<Example value=\"horizontal\" />\r\n\r\n### Vertical\r\n\r\n<Example value=\"vertical\" />\r\n\r\n### Card\r\n\r\n<Example value=\"card\" />\r\n\r\n### Customize\r\n\r\n<Example value=\"customize\" />\r\n\r\n### Sticky\r\n\r\n<Example value=\"sticky\" />\r\n\r\n<LastModified />\r\n",
      "slots": [],
      "styles": [
        {
          "description": "Used to adjust the color.",
          "initializer": "grey",
          "name": "--plus-divider-color"
        },
        {
          "description": "Used to adjust the gutter.",
          "initializer": "0.5rem",
          "name": "--plus-divider-gutter"
        },
        {
          "description": "Used to adjust the opacity.",
          "initializer": "0.25",
          "name": "--plus-divider-opacity"
        },
        {
          "description": "Used to adjust the type.",
          "initializer": "unset",
          "name": "--plus-divider-type"
        },
        {
          "description": "Used to adjust the width.",
          "initializer": "unset",
          "name": "--plus-divider-width"
        }
      ],
      "tags": [],
      "title": "Divider"
    },
    {
      "events": [
        {
          "cancelable": true,
          "deprecated": false,
          "description": "When the drawer is going to hide",
          "detail": "EventEmitter<void>",
          "experimental": false,
          "model": false,
          "name": "plusClose",
          "tags": [
            {
              "key": "",
              "value": "When the drawer is going to hide"
            }
          ]
        },
        {
          "cancelable": false,
          "deprecated": false,
          "description": "When the drawer is completely closed and its animation is completed.",
          "detail": "EventEmitter<void>",
          "experimental": false,
          "model": false,
          "name": "plusClosed",
          "tags": [
            {
              "key": "",
              "value": "When the drawer is completely closed and its animation is completed."
            }
          ]
        },
        {
          "cancelable": true,
          "deprecated": false,
          "description": "When the drawer is going to show this event triggers",
          "detail": "EventEmitter<void>",
          "experimental": false,
          "model": false,
          "name": "plusOpen",
          "tags": [
            {
              "key": "",
              "value": "When the drawer is going to show this event triggers"
            }
          ]
        },
        {
          "cancelable": false,
          "deprecated": false,
          "description": "When the drawer is completely shown and its animation is completed.",
          "detail": "EventEmitter<void>",
          "experimental": false,
          "model": false,
          "name": "plusOpened",
          "tags": [
            {
              "key": "",
              "value": "When the drawer is completely shown and its animation is completed."
            }
          ]
        }
      ],
      "deprecated": false,
      "description": "This element lets you add collapsible side contents like navigation alongside some primary content.",
      "experimental": false,
      "key": "drawer",
      "lastModified": "2024-02-17T09:22:22.960Z",
      "methods": [],
      "parts": [],
      "properties": [
        {
          "attribute": "animation",
          "deprecated": false,
          "description": "TODO",
          "experimental": false,
          "model": false,
          "name": "animation",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "TODO"
            }
          ],
          "type": "string"
        },
        {
          "attribute": "backdrop",
          "deprecated": false,
          "description": "Activate the drawer's backdrop to show or not.",
          "experimental": false,
          "initializer": "'auto'",
          "model": false,
          "name": "backdrop",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Activate the drawer's backdrop to show or not."
            }
          ],
          "type": "DrawerBackdrop",
          "typeReference": "./drawer.types"
        },
        {
          "attribute": "breakpoint",
          "deprecated": false,
          "description": "Sets the mobile breakpoint to apply alternate styles for mobile deviceswhen the breakpoint value is met.",
          "experimental": false,
          "initializer": "'md'",
          "model": false,
          "name": "breakpoint",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Sets the mobile breakpoint to apply alternate styles for mobile deviceswhen the breakpoint value is met."
            }
          ],
          "type": "DrawerBreakpoint",
          "typeReference": "./drawer.types"
        },
        {
          "attribute": "connector",
          "deprecated": false,
          "description": "This property helps you to attach which drawer toggler controls the drawer.It doesn't matter where the drawer toggler is.You can put the drawer's toggler inside or outside of the drawer.Read more about connectors [here](/connector).",
          "experimental": false,
          "model": false,
          "name": "connector",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "This property helps you to attach which drawer toggler controls the drawer.It doesn't matter where the drawer toggler is.You can put the drawer's toggler inside or outside of the drawer.Read more about connectors [here](/connector)."
            }
          ],
          "type": "string"
        },
        {
          "attribute": "mini",
          "deprecated": false,
          "description": "Set the width of drawer to the minimum size you specified for the `mini-size` property.",
          "experimental": false,
          "model": false,
          "name": "mini",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Set the width of drawer to the minimum size you specified for the `mini-size` property."
            }
          ],
          "type": "boolean"
        },
        {
          "attribute": "mini-size",
          "deprecated": false,
          "description": "Sets the minimum width size of the drawer.",
          "experimental": false,
          "model": false,
          "name": "miniSize",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Sets the minimum width size of the drawer."
            }
          ],
          "type": "string"
        },
        {
          "attribute": "open",
          "deprecated": false,
          "description": "Control drawer to show or not.",
          "experimental": false,
          "model": false,
          "name": "open",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Control drawer to show or not."
            }
          ],
          "type": "boolean"
        },
        {
          "attribute": "persistent",
          "deprecated": false,
          "description": "If true, don't allow the drawer to be closed by clicking outside of the drawer.If false, the drawer will be closed by clicking outside of it.",
          "experimental": false,
          "model": false,
          "name": "persistent",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "If true, don't allow the drawer to be closed by clicking outside of the drawer.If false, the drawer will be closed by clicking outside of it."
            }
          ],
          "type": "boolean"
        },
        {
          "attribute": "placement",
          "deprecated": false,
          "description": "Specifies where the drawer will open.",
          "experimental": false,
          "model": false,
          "name": "placement",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies where the drawer will open."
            }
          ],
          "type": "DrawerPlacement",
          "typeReference": "./drawer.types"
        },
        {
          "attribute": "flexible",
          "deprecated": false,
          "description": "It controls the flexibility of the drawer's width. If yes, the width of the drawer can be reduced.If false doesn't allow the width of the drawer to reduce.",
          "experimental": false,
          "model": false,
          "name": "flexible",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "It controls the flexibility of the drawer's width. If yes, the width of the drawer can be reduced.If false doesn't allow the width of the drawer to reduce."
            }
          ],
          "type": "boolean"
        },
        {
          "attribute": "size",
          "deprecated": false,
          "description": "Determine the width of the drawer.",
          "experimental": false,
          "model": false,
          "name": "size",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Determine the width of the drawer."
            }
          ],
          "type": "string"
        },
        {
          "attribute": "temporary",
          "deprecated": false,
          "description": "On default the drawer is considered as a part of the main container.it pushes the other contents on opening.If true it will be opened over other contents and doesn't affect other contents.A temporary drawer sits above its application and uses a backdrop to darken the background.",
          "experimental": false,
          "model": false,
          "name": "temporary",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "On default the drawer is considered as a part of the main container.it pushes the other contents on opening.If true it will be opened over other contents and doesn't affect other contents.A temporary drawer sits above its application and uses a backdrop to darken the background."
            }
          ],
          "type": "DrawerTemporary",
          "typeReference": "./drawer.types"
        }
      ],
      "readmeContent": "# Drawer\r\n\r\nThis element lets you add collapsible side contents like navigation alongside some primary content.\r\n\r\n<Playground />\r\n\r\n<Usage />\r\n\r\n<Api />\r\n\r\n<GlobalConfig />\r\n\r\n<Examples />\r\n\r\n### Default\r\n\r\n<Example value=\"default\" />\r\n\r\n<LastModified />\r\n",
      "slots": [
        {
          "name": "default",
          "description": "The default slot."
        }
      ],
      "styles": [
        {
          "description": "You can use it to set the width size of the drawer using css variables.",
          "initializer": "280px",
          "name": "--plus-drawer-size"
        },
        {
          "description": "You can use it to set the minimum width size of the drawer using css variables.",
          "initializer": "80px",
          "name": "--plus-drawer-mini-size"
        }
      ],
      "tags": [],
      "title": "Drawer"
    },
    {
      "events": [],
      "deprecated": false,
      "experimental": false,
      "key": "drawer-toggler",
      "lastModified": "2024-02-17T09:22:22.953Z",
      "methods": [],
      "parts": [],
      "properties": [
        {
          "attribute": "connector",
          "deprecated": false,
          "description": "This property helps you to attach which drawer this toggler controls.It doesn't matter where the drawer toggler is.You can put the drawer's toggler inside or outside of the drawer.Read more about connectors [here](/connector).",
          "experimental": false,
          "model": false,
          "name": "connector",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "This property helps you to attach which drawer this toggler controls.It doesn't matter where the drawer toggler is.You can put the drawer's toggler inside or outside of the drawer.Read more about connectors [here](/connector)."
            }
          ],
          "type": "string"
        }
      ],
      "slots": [
        {
          "name": "default",
          "description": "The default slot."
        }
      ],
      "styles": [],
      "tags": [
        {
          "key": "TODO",
          "value": "open    - Specifies the content of toggler when it's opened."
        },
        {
          "key": "TODO",
          "value": "close   - Specifies the content of toggler when it's closed."
        }
      ],
      "title": "Drawer Toggler"
    },
    {
      "events": [],
      "deprecated": false,
      "description": "Generates massive amounts of fake (but realistic) data for testing and development. Powered by [Faker](https://fakerjs.dev/).",
      "experimental": false,
      "key": "faker",
      "lastModified": "2024-02-17T09:22:22.969Z",
      "methods": [],
      "parts": [],
      "properties": [
        {
          "attribute": "api",
          "deprecated": false,
          "description": "Specifies the [API](https://fakerjs.dev/api).",
          "experimental": false,
          "initializer": "'lorem.paragraph'",
          "model": false,
          "name": "api",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies the [API](https://fakerjs.dev/api)."
            }
          ],
          "type": "string"
        },
        {
          "attribute": "arguments",
          "deprecated": false,
          "description": "Specifies the API's arguments as an array.",
          "experimental": false,
          "model": false,
          "name": "arguments",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies the API's arguments as an array."
            }
          ],
          "type": "Array<any>"
        },
        {
          "attribute": "instance",
          "deprecated": false,
          "description": "The [Faker](https://fakerjs.dev/guide/usage.html) object instance.",
          "experimental": false,
          "model": false,
          "name": "instance",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "The [Faker](https://fakerjs.dev/guide/usage.html) object instance."
            }
          ],
          "type": "FakerCoreType",
          "typeReference": "@faker-js/faker"
        },
        {
          "attribute": "seed",
          "deprecated": false,
          "description": "Keeps the result constant.",
          "experimental": false,
          "model": false,
          "name": "seed",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Keeps the result constant."
            }
          ],
          "type": "number"
        }
      ],
      "readmeContent": "# Faker\r\n\r\nGenerates massive amounts of fake (but realistic) data for testing and development. Powered by [Faker](https://fakerjs.dev/).\r\n\r\n<Playground />\r\n\r\n<Usage />\r\n\r\n<Api />\r\n\r\n<GlobalConfig />\r\n\r\n<Examples />\r\n\r\n### Default\r\n\r\n<Example value=\"default\" />\r\n\r\n### API\r\n\r\nTo see all APIs click [here](https://fakerjs.dev/api).\r\n\r\n<Example value=\"api\" />\r\n\r\n### API's Arguments\r\n\r\n<Example value=\"arguments\" />\r\n\r\n### Seed\r\n\r\n<Example value=\"seed\" />\r\n\r\n### Localization\r\n\r\nMakes the result localized. Consider that localization configure globally. [More](https://fakerjs.dev/guide/localization.html).\r\n\r\n<Example value=\"localization\" />\r\n\r\n### More\r\n\r\n<Example value=\"more\" />\r\n\r\n<LastModified />\r\n",
      "slots": [],
      "styles": [],
      "tags": [
        {
          "key": "dependencies",
          "value": "@faker-js/faker"
        },
        {
          "key": "stable",
          "value": ""
        },
        {
          "key": "thirdParty",
          "value": ""
        }
      ],
      "title": "Faker"
    },
    {
      "events": [],
      "deprecated": false,
      "description": "Converts bytes to a human-readable string. [Metric and IEC](https://wikipedia.org/wiki/Gigabyte) standard are supported.",
      "experimental": false,
      "key": "format-bytes",
      "lastModified": "2024-02-17T09:22:22.980Z",
      "methods": [],
      "parts": [],
      "properties": [
        {
          "attribute": "display",
          "deprecated": false,
          "description": "Specifies the unit will be shown as an abbreviation or not.",
          "experimental": false,
          "initializer": "'short'",
          "model": false,
          "name": "display",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies the unit will be shown as an abbreviation or not."
            }
          ],
          "type": "FormatBytesDisplay",
          "typeReference": "./format-bytes.types"
        },
        {
          "attribute": "locale",
          "deprecated": false,
          "description": "Localizes the result. [More](https://mdn.io/number-format/constructor).",
          "experimental": false,
          "model": false,
          "name": "locale",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Localizes the result. [More](https://mdn.io/number-format/constructor)."
            }
          ],
          "type": "string | string[]"
        },
        {
          "attribute": "decimals",
          "deprecated": false,
          "description": "Specifies the number of decimal places.Use an array to specify the minimum and maximum.",
          "experimental": false,
          "model": false,
          "name": "decimals",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies the number of decimal places.Use an array to specify the minimum and maximum."
            }
          ],
          "type": "number | [number, number]"
        },
        {
          "attribute": "separator",
          "deprecated": false,
          "description": "Specifies the separator between number and unit.",
          "experimental": false,
          "initializer": "' '",
          "model": false,
          "name": "separator",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies the separator between number and unit."
            }
          ],
          "type": "string"
        },
        {
          "attribute": "signed",
          "deprecated": false,
          "description": "Shows plus sign for positive numbers.If the difference is exactly zero a space character will be prepended instead for better alignment.",
          "experimental": false,
          "model": false,
          "name": "signed",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Shows plus sign for positive numbers.If the difference is exactly zero a space character will be prepended instead for better alignment."
            }
          ],
          "type": "boolean"
        },
        {
          "attribute": "standard",
          "deprecated": false,
          "description": "Specifies the standard of units.[Metric and IEC](https://wikipedia.org/wiki/Gigabyte) are supported.",
          "experimental": false,
          "initializer": "'METRIC'",
          "model": false,
          "name": "standard",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies the standard of units.[Metric and IEC](https://wikipedia.org/wiki/Gigabyte) are supported."
            }
          ],
          "type": "FormatBytesStandard",
          "typeReference": "./format-bytes.types"
        },
        {
          "attribute": "unit",
          "deprecated": false,
          "description": "Specifies the unit in which the result will be returned.",
          "experimental": false,
          "initializer": "'auto'",
          "model": false,
          "name": "unit",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies the unit in which the result will be returned."
            }
          ],
          "type": "FormatBytesUnit",
          "typeReference": "./format-bytes.types"
        },
        {
          "attribute": "value",
          "deprecated": false,
          "description": "The bytes value to convert.",
          "experimental": false,
          "model": false,
          "name": "value",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "The bytes value to convert."
            }
          ],
          "type": "number"
        }
      ],
      "readmeContent": "# Format Bytes\r\n\r\nConverts bytes to a human-readable string. [Metric and IEC](https://wikipedia.org/wiki/Gigabyte) standard are supported.\r\n\r\n<Playground />\r\n\r\n<Usage />\r\n\r\n<Api />\r\n\r\n<GlobalConfig />\r\n\r\n<Examples />\r\n\r\n### Default\r\n\r\n<Example value=\"default\" />\r\n\r\n### Standard\r\n\r\n<Example value=\"standard\" />\r\n\r\n### Formatting\r\n\r\n<Example value=\"formatting\" />\r\n\r\n### Decimals\r\n\r\n<Example value=\"decimals\" />\r\n\r\n### Unit\r\n\r\n<Example value=\"unit\" />\r\n\r\n### Display\r\n\r\n<Example value=\"display\" />\r\n\r\n### Separator\r\n\r\n<Example value=\"separator\" />\r\n\r\n### Signed\r\n\r\n<Example value=\"signed\" />\r\n\r\n### Locale\r\n\r\n<Example value=\"locale\" />\r\n\r\n<LastModified />\r\n",
      "slots": [],
      "styles": [],
      "tags": [
        {
          "key": "stable",
          "value": ""
        }
      ],
      "title": "Format Bytes"
    },
    {
      "events": [],
      "deprecated": false,
      "description": "It's the most flexible and powerful grid system which you need to build simple to complex responsive layouts, using two main elements, `plus-grid` as a container & `plus-grid-item`. By using these elements, align your content in any form & shape and for all screen sizes with 12 available column sizes and 6 breakpoints.",
      "experimental": false,
      "key": "grid",
      "lastModified": "2024-02-17T09:22:22.998Z",
      "methods": [],
      "parts": [],
      "properties": [
        {
          "attribute": "align-content",
          "deprecated": false,
          "description": "Aligns contents vertically across all rows (It overrides alignItems).",
          "experimental": false,
          "initializer": "'stretch'",
          "model": false,
          "name": "alignContent",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Aligns contents vertically across all rows (It overrides alignItems)."
            }
          ],
          "type": "GridAlignContent",
          "typeReference": "./grid.types"
        },
        {
          "attribute": "align-content-xs",
          "deprecated": false,
          "description": "Aligns contents vertically across all rows for extra-small display sizes(It overrides alignItemsXs).",
          "experimental": false,
          "model": false,
          "name": "alignContentXs",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Aligns contents vertically across all rows for extra-small display sizes(It overrides alignItemsXs)."
            }
          ],
          "type": "GridAlignContent",
          "typeReference": "./grid.types"
        },
        {
          "attribute": "align-content-sm",
          "deprecated": false,
          "description": "Aligns contents vertically across all rows for small display sizes(It overrides alignItemsSm).",
          "experimental": false,
          "model": false,
          "name": "alignContentSm",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Aligns contents vertically across all rows for small display sizes(It overrides alignItemsSm)."
            }
          ],
          "type": "GridAlignContent",
          "typeReference": "./grid.types"
        },
        {
          "attribute": "align-content-md",
          "deprecated": false,
          "description": "Aligns contents vertically across all rows for medium display sizes(It overrides alignItemsMd).",
          "experimental": false,
          "model": false,
          "name": "alignContentMd",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Aligns contents vertically across all rows for medium display sizes(It overrides alignItemsMd)."
            }
          ],
          "type": "GridAlignContent",
          "typeReference": "./grid.types"
        },
        {
          "attribute": "align-content-lg",
          "deprecated": false,
          "description": "Aligns contents vertically across all rows for large display sizes(It overrides alignItemsLg).",
          "experimental": false,
          "model": false,
          "name": "alignContentLg",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Aligns contents vertically across all rows for large display sizes(It overrides alignItemsLg)."
            }
          ],
          "type": "GridAlignContent",
          "typeReference": "./grid.types"
        },
        {
          "attribute": "align-content-xl",
          "deprecated": false,
          "description": "Aligns contents vertically across all rows for extra-large display sizes(It overrides alignItemsXl).",
          "experimental": false,
          "model": false,
          "name": "alignContentXl",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Aligns contents vertically across all rows for extra-large display sizes(It overrides alignItemsXl)."
            }
          ],
          "type": "GridAlignContent",
          "typeReference": "./grid.types"
        },
        {
          "attribute": "align-content-xxl",
          "deprecated": false,
          "description": "Aligns contents vertically across all rows for extra-extra-large display sizes(It overrides alignItemsXXl).",
          "experimental": false,
          "model": false,
          "name": "alignContentXxl",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Aligns contents vertically across all rows for extra-extra-large display sizes(It overrides alignItemsXXl)."
            }
          ],
          "type": "GridAlignContent",
          "typeReference": "./grid.types"
        },
        {
          "attribute": "align-items",
          "deprecated": false,
          "description": "Aligns contents vertically inside their own row.",
          "experimental": false,
          "initializer": "'stretch'",
          "model": false,
          "name": "alignItems",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Aligns contents vertically inside their own row."
            }
          ],
          "type": "GridAlignItems",
          "typeReference": "./grid.types"
        },
        {
          "attribute": "align-items-xs",
          "deprecated": false,
          "description": "Aligns contents vertically inside their own row for extra-small display sizes.",
          "experimental": false,
          "model": false,
          "name": "alignItemsXs",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Aligns contents vertically inside their own row for extra-small display sizes."
            }
          ],
          "type": "GridAlignItems",
          "typeReference": "./grid.types"
        },
        {
          "attribute": "align-items-sm",
          "deprecated": false,
          "description": "Aligns contents vertically inside their own row for small display sizes.",
          "experimental": false,
          "model": false,
          "name": "alignItemsSm",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Aligns contents vertically inside their own row for small display sizes."
            }
          ],
          "type": "GridAlignItems",
          "typeReference": "./grid.types"
        },
        {
          "attribute": "align-items-md",
          "deprecated": false,
          "description": "Aligns contents vertically inside their own row for medium display sizes.",
          "experimental": false,
          "model": false,
          "name": "alignItemsMd",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Aligns contents vertically inside their own row for medium display sizes."
            }
          ],
          "type": "GridAlignItems",
          "typeReference": "./grid.types"
        },
        {
          "attribute": "align-items-lg",
          "deprecated": false,
          "description": "Aligns contents vertically inside their own row for large display sizes.",
          "experimental": false,
          "model": false,
          "name": "alignItemsLg",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Aligns contents vertically inside their own row for large display sizes."
            }
          ],
          "type": "GridAlignItems",
          "typeReference": "./grid.types"
        },
        {
          "attribute": "align-items-xl",
          "deprecated": false,
          "description": "Aligns contents vertically inside their own row for extra-large display sizes.",
          "experimental": false,
          "model": false,
          "name": "alignItemsXl",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Aligns contents vertically inside their own row for extra-large display sizes."
            }
          ],
          "type": "GridAlignItems",
          "typeReference": "./grid.types"
        },
        {
          "attribute": "align-items-xxl",
          "deprecated": false,
          "description": "Aligns contents vertically inside their own row for extra-extra-large display sizes.",
          "experimental": false,
          "model": false,
          "name": "alignItemsXxl",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Aligns contents vertically inside their own row for extra-extra-large display sizes."
            }
          ],
          "type": "GridAlignItems",
          "typeReference": "./grid.types"
        },
        {
          "attribute": "gutter",
          "deprecated": false,
          "description": "Adds a gap between contents to make space between them vertically and horizontally.",
          "experimental": false,
          "model": false,
          "name": "gutter",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Adds a gap between contents to make space between them vertically and horizontally."
            }
          ],
          "type": "GridGutter",
          "typeReference": "./grid.types"
        },
        {
          "attribute": "gutter-x",
          "deprecated": false,
          "description": "Adds a gap between contents to make space between them horizontally.",
          "experimental": false,
          "model": false,
          "name": "gutterX",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Adds a gap between contents to make space between them horizontally."
            }
          ],
          "type": "GridGutter",
          "typeReference": "./grid.types"
        },
        {
          "attribute": "gutter-y",
          "deprecated": false,
          "description": "Adds a gap between contents to make space between them vertically.",
          "experimental": false,
          "model": false,
          "name": "gutterY",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Adds a gap between contents to make space between them vertically."
            }
          ],
          "type": "GridGutter",
          "typeReference": "./grid.types"
        },
        {
          "attribute": "justify-content",
          "deprecated": false,
          "description": "Justifies contents horizontally.",
          "experimental": false,
          "initializer": "'start'",
          "model": false,
          "name": "justifyContent",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Justifies contents horizontally."
            }
          ],
          "type": "GridJustifyContent",
          "typeReference": "./grid.types"
        },
        {
          "attribute": "justify-content-xs",
          "deprecated": false,
          "description": "Justifies contents horizontally for extra-small display sizes.",
          "experimental": false,
          "model": false,
          "name": "justifyContentXs",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Justifies contents horizontally for extra-small display sizes."
            }
          ],
          "type": "GridJustifyContent",
          "typeReference": "./grid.types"
        },
        {
          "attribute": "justify-content-sm",
          "deprecated": false,
          "description": "Justifies contents horizontally for small display sizes.",
          "experimental": false,
          "model": false,
          "name": "justifyContentSm",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Justifies contents horizontally for small display sizes."
            }
          ],
          "type": "GridJustifyContent",
          "typeReference": "./grid.types"
        },
        {
          "attribute": "justify-content-md",
          "deprecated": false,
          "description": "Justifies contents horizontally for medium display sizes.",
          "experimental": false,
          "model": false,
          "name": "justifyContentMd",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Justifies contents horizontally for medium display sizes."
            }
          ],
          "type": "GridJustifyContent",
          "typeReference": "./grid.types"
        },
        {
          "attribute": "justify-content-lg",
          "deprecated": false,
          "description": "Justifies contents horizontally for large display sizes.",
          "experimental": false,
          "model": false,
          "name": "justifyContentLg",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Justifies contents horizontally for large display sizes."
            }
          ],
          "type": "GridJustifyContent",
          "typeReference": "./grid.types"
        },
        {
          "attribute": "justify-content-xl",
          "deprecated": false,
          "description": "Justifies contents horizontally for extra-large display sizes.",
          "experimental": false,
          "model": false,
          "name": "justifyContentXl",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Justifies contents horizontally for extra-large display sizes."
            }
          ],
          "type": "GridJustifyContent",
          "typeReference": "./grid.types"
        },
        {
          "attribute": "justify-content-xxl",
          "deprecated": false,
          "description": "Justifies contents horizontally for extra-extra-large display sizes.",
          "experimental": false,
          "model": false,
          "name": "justifyContentXxl",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Justifies contents horizontally for extra-extra-large display sizes."
            }
          ],
          "type": "GridJustifyContent",
          "typeReference": "./grid.types"
        },
        {
          "attribute": "reverse",
          "deprecated": false,
          "description": "Reverses the flow of contents from left-to-right to right-to-left, or vice-versa.",
          "experimental": false,
          "model": false,
          "name": "reverse",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Reverses the flow of contents from left-to-right to right-to-left, or vice-versa."
            }
          ],
          "type": "boolean"
        },
        {
          "attribute": "vertical",
          "deprecated": false,
          "description": "Changes the flow of contents from left-to-right to top-to-down.",
          "experimental": false,
          "model": false,
          "name": "vertical",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Changes the flow of contents from left-to-right to top-to-down."
            }
          ],
          "type": "boolean"
        },
        {
          "attribute": "wrap",
          "deprecated": false,
          "description": "Controls allowing the container to wrap the content or not if the cumulative widthsize of contents is more than the twelve-column width.",
          "experimental": false,
          "initializer": "'on'",
          "model": false,
          "name": "wrap",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Controls allowing the container to wrap the content or not if the cumulative widthsize of contents is more than the twelve-column width."
            }
          ],
          "type": "GridWrap",
          "typeReference": "./grid.types"
        },
        {
          "attribute": "wrap-xs",
          "deprecated": false,
          "description": "Controls allowing the container to wrap the content or not if the cumulative widthsize of contents is more than the twelve-column width for extra-small screen devices.",
          "experimental": false,
          "model": false,
          "name": "wrapXs",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Controls allowing the container to wrap the content or not if the cumulative widthsize of contents is more than the twelve-column width for extra-small screen devices."
            }
          ],
          "type": "GridWrap",
          "typeReference": "./grid.types"
        },
        {
          "attribute": "wrap-sm",
          "deprecated": false,
          "description": "Controls allowing the container to wrap the content or not if the cumulative widthsize of contents is more than the twelve-column width for small screen devices.",
          "experimental": false,
          "model": false,
          "name": "wrapSm",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Controls allowing the container to wrap the content or not if the cumulative widthsize of contents is more than the twelve-column width for small screen devices."
            }
          ],
          "type": "GridWrap",
          "typeReference": "./grid.types"
        },
        {
          "attribute": "wrap-md",
          "deprecated": false,
          "description": "Controls allowing the container to wrap the content or not if the cumulative widthsize of contents is more than the twelve-column width for medium screen devices.",
          "experimental": false,
          "model": false,
          "name": "wrapMd",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Controls allowing the container to wrap the content or not if the cumulative widthsize of contents is more than the twelve-column width for medium screen devices."
            }
          ],
          "type": "GridWrap",
          "typeReference": "./grid.types"
        },
        {
          "attribute": "wrap-lg",
          "deprecated": false,
          "description": "Controls allowing the container to wrap the content or not if the cumulative widthsize of contents is more than the twelve-column width for large screen devices.",
          "experimental": false,
          "model": false,
          "name": "wrapLg",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Controls allowing the container to wrap the content or not if the cumulative widthsize of contents is more than the twelve-column width for large screen devices."
            }
          ],
          "type": "GridWrap",
          "typeReference": "./grid.types"
        },
        {
          "attribute": "wrap-xl",
          "deprecated": false,
          "description": "Controls allowing the container to wrap the content or not if the cumulative widthsize of contents is more than the twelve-column width for extra-large screen devices.",
          "experimental": false,
          "model": false,
          "name": "wrapXl",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Controls allowing the container to wrap the content or not if the cumulative widthsize of contents is more than the twelve-column width for extra-large screen devices."
            }
          ],
          "type": "GridWrap",
          "typeReference": "./grid.types"
        },
        {
          "attribute": "wrap-xxl",
          "deprecated": false,
          "description": "Controls allowing the container to wrap the content or not if the cumulative widthsize of contents is more than the twelve-column width for extra-extra-large screen devices.",
          "experimental": false,
          "model": false,
          "name": "wrapXxl",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Controls allowing the container to wrap the content or not if the cumulative widthsize of contents is more than the twelve-column width for extra-extra-large screen devices."
            }
          ],
          "type": "GridWrap",
          "typeReference": "./grid.types"
        }
      ],
      "readmeContent": "# Grid\r\n\r\nIt's the most flexible and powerful grid system which you need to build simple to complex responsive layouts, using two main elements, `plus-grid` as a container & `plus-grid-item`. By using these elements, align your content in any form & shape and for all screen sizes with 12 available column sizes and 6 breakpoints.\r\n\r\n<Playground />\r\n\r\n<Usage />\r\n\r\n<Api />\r\n\r\n<GlobalConfig />\r\n\r\n<Examples />\r\n### Default\r\n<Example value=\"default\" />\r\n\r\n### Auto Sizing\r\n\r\n<Example value=\"auto-sizing\" />\r\n\r\n### Gutter\r\n\r\n<Example value=\"gutter\" />\r\n\r\n### Gutter X\r\n\r\n<Example value=\"gutter-x\" />\r\n\r\n### Gutter Y\r\n\r\n<Example value=\"gutter-y\" />\r\n\r\n### Align Items\r\n\r\n<Example value=\"align-items\" />\r\n\r\n### Align Content\r\n\r\n<Example value=\"align-content\" />\r\n\r\n### Align Self\r\n\r\n<Example value=\"align-self\" />\r\n\r\n### Justify Content\r\n\r\n<Example value=\"justify-content\" />\r\n\r\n### Reverse\r\n\r\n<Example value=\"reverse\" />\r\n\r\n### Wrap\r\n\r\n<Example value=\"wrap\" />\r\n\r\n### Offset\r\n\r\n<Example value=\"offset\" />\r\n\r\n### Order\r\n\r\n<Example value=\"order\" />\r\n\r\n### Hide\r\n\r\n<Example value=\"hide\" />\r\n\r\n### Vertical\r\n\r\n<Example value=\"vertical\" />\r\n\r\n<LastModified />\r\n",
      "slots": [
        {
          "name": "default",
          "description": "The default slot."
        }
      ],
      "styles": [
        {
          "description": "TODO",
          "initializer": "0",
          "name": "--plus-grid--gutter-x"
        },
        {
          "description": "TODO",
          "initializer": "0",
          "name": "--plus-grid--gutter-y"
        }
      ],
      "tags": [],
      "title": "Grid"
    },
    {
      "events": [],
      "deprecated": false,
      "experimental": false,
      "key": "grid-item",
      "lastModified": "2024-02-17T09:22:22.983Z",
      "methods": [],
      "parts": [],
      "properties": [
        {
          "attribute": "align-self",
          "deprecated": false,
          "description": "Aligns the grid-item vertically in its container (grid).It overrides the align-items property of its parent.",
          "experimental": false,
          "initializer": "'auto'",
          "model": false,
          "name": "alignSelf",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Aligns the grid-item vertically in its container (grid).It overrides the align-items property of its parent."
            }
          ],
          "type": "GridItemAlignSelf",
          "typeReference": "./grid-item.types"
        },
        {
          "attribute": "align-self-xs",
          "deprecated": false,
          "description": "Aligns the grid-item vertically in its container (grid) for extra-small display sizes.It also applies to larger breakpoints and display sizes while they are not specified.(It overrides the align-items property of its parent just for extra-small breakpoints).",
          "experimental": false,
          "model": false,
          "name": "alignSelfXs",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Aligns the grid-item vertically in its container (grid) for extra-small display sizes.It also applies to larger breakpoints and display sizes while they are not specified.(It overrides the align-items property of its parent just for extra-small breakpoints)."
            }
          ],
          "type": "GridItemAlignSelf",
          "typeReference": "./grid-item.types"
        },
        {
          "attribute": "align-self-sm",
          "deprecated": false,
          "description": "Aligns the grid-item vertically in its container (grid) for small display sizes.It also applies to larger breakpoints and display sizes while they are not specified.(It overrides the align-items property of its parent just for small breakpoints).",
          "experimental": false,
          "model": false,
          "name": "alignSelfSm",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Aligns the grid-item vertically in its container (grid) for small display sizes.It also applies to larger breakpoints and display sizes while they are not specified.(It overrides the align-items property of its parent just for small breakpoints)."
            }
          ],
          "type": "GridItemAlignSelf",
          "typeReference": "./grid-item.types"
        },
        {
          "attribute": "align-self-md",
          "deprecated": false,
          "description": "Aligns the grid-item vertically in its container (grid) for medium display sizes.It also applies to larger breakpoints and display sizes while they are not specified.(It overrides the align-items property of its parent just for medium breakpoints).",
          "experimental": false,
          "model": false,
          "name": "alignSelfMd",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Aligns the grid-item vertically in its container (grid) for medium display sizes.It also applies to larger breakpoints and display sizes while they are not specified.(It overrides the align-items property of its parent just for medium breakpoints)."
            }
          ],
          "type": "GridItemAlignSelf",
          "typeReference": "./grid-item.types"
        },
        {
          "attribute": "align-self-lg",
          "deprecated": false,
          "description": "Aligns the grid-item vertically in its container (grid) for large display sizes.It also applies to larger breakpoints and display sizes while they are not specified.(It overrides the align-items property of its parent just for large breakpoints).",
          "experimental": false,
          "model": false,
          "name": "alignSelfLg",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Aligns the grid-item vertically in its container (grid) for large display sizes.It also applies to larger breakpoints and display sizes while they are not specified.(It overrides the align-items property of its parent just for large breakpoints)."
            }
          ],
          "type": "GridItemAlignSelf",
          "typeReference": "./grid-item.types"
        },
        {
          "attribute": "align-self-xl",
          "deprecated": false,
          "description": "Aligns the grid-item vertically in its container (grid) for extra-large display sizes.It also applies to larger breakpoints and display sizes while they are not specified.(It overrides the align-items property of its parent just for extra-large breakpoints).",
          "experimental": false,
          "model": false,
          "name": "alignSelfXl",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Aligns the grid-item vertically in its container (grid) for extra-large display sizes.It also applies to larger breakpoints and display sizes while they are not specified.(It overrides the align-items property of its parent just for extra-large breakpoints)."
            }
          ],
          "type": "GridItemAlignSelf",
          "typeReference": "./grid-item.types"
        },
        {
          "attribute": "align-self-xxl",
          "deprecated": false,
          "description": "Aligns the grid-item vertically in its container (grid) for extra-extra-large display sizes.It also applies to larger breakpoints and display sizes while they are not specified.(It overrides the align-items property of its parent just for extra-extra-large breakpoints).",
          "experimental": false,
          "model": false,
          "name": "alignSelfXxl",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Aligns the grid-item vertically in its container (grid) for extra-extra-large display sizes.It also applies to larger breakpoints and display sizes while they are not specified.(It overrides the align-items property of its parent just for extra-extra-large breakpoints)."
            }
          ],
          "type": "GridItemAlignSelf",
          "typeReference": "./grid-item.types"
        },
        {
          "attribute": "xs",
          "deprecated": false,
          "description": "Specifies the number of columns for extra-small viewports (portrait phones).It also determines the number of columns for bigger display sizes whenother upper breakpoints (sm, md, lg, xl and xxl) are not specified.",
          "experimental": false,
          "model": false,
          "name": "xs",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies the number of columns for extra-small viewports (portrait phones).It also determines the number of columns for bigger display sizes whenother upper breakpoints (sm, md, lg, xl and xxl) are not specified."
            }
          ],
          "type": "GridItemColumn",
          "typeReference": "./grid-item.types"
        },
        {
          "attribute": "sm",
          "deprecated": false,
          "description": "Specifies the number of columns for small viewports (landscape phones).It also determines the number of columns for bigger display sizes whenother upper breakpoints (md, lg, xl and xxl) are not specified.",
          "experimental": false,
          "model": false,
          "name": "sm",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies the number of columns for small viewports (landscape phones).It also determines the number of columns for bigger display sizes whenother upper breakpoints (md, lg, xl and xxl) are not specified."
            }
          ],
          "type": "GridItemColumn",
          "typeReference": "./grid-item.types"
        },
        {
          "attribute": "md",
          "deprecated": false,
          "description": "Specifies the number of columns for medium viewports (tablets).It also determines the number of columns for bigger display sizes whenother upper breakpoints (lg, xl and xxl) are not specified.",
          "experimental": false,
          "model": false,
          "name": "md",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies the number of columns for medium viewports (tablets).It also determines the number of columns for bigger display sizes whenother upper breakpoints (lg, xl and xxl) are not specified."
            }
          ],
          "type": "GridItemColumn",
          "typeReference": "./grid-item.types"
        },
        {
          "attribute": "lg",
          "deprecated": false,
          "description": "Specifies the number of columns for large viewports (desktop).It also determines the number of columns for bigger display sizes whenthe upper breakpoint (xl and xxl) is not specified.",
          "experimental": false,
          "model": false,
          "name": "lg",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies the number of columns for large viewports (desktop).It also determines the number of columns for bigger display sizes whenthe upper breakpoint (xl and xxl) is not specified."
            }
          ],
          "type": "GridItemColumn",
          "typeReference": "./grid-item.types"
        },
        {
          "attribute": "xl",
          "deprecated": false,
          "description": "Specifies the number of columns for large viewports (large desktops).It also determines the number of columns for bigger display sizes whenthe upper breakpoint (xxl) is not specified.",
          "experimental": false,
          "model": false,
          "name": "xl",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies the number of columns for large viewports (large desktops).It also determines the number of columns for bigger display sizes whenthe upper breakpoint (xxl) is not specified."
            }
          ],
          "type": "GridItemColumn",
          "typeReference": "./grid-item.types"
        },
        {
          "attribute": "xxl",
          "deprecated": false,
          "description": "Specifies the number of columns for extra-extra-large viewports (larger desktops).",
          "experimental": false,
          "model": false,
          "name": "xxl",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies the number of columns for extra-extra-large viewports (larger desktops)."
            }
          ],
          "type": "GridItemColumn",
          "typeReference": "./grid-item.types"
        },
        {
          "attribute": "hide-xs",
          "deprecated": false,
          "description": "Hides the grid-item in extra-small display sizes (portrait phones).",
          "experimental": false,
          "model": false,
          "name": "hideXs",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Hides the grid-item in extra-small display sizes (portrait phones)."
            }
          ],
          "type": "boolean"
        },
        {
          "attribute": "hide-sm",
          "deprecated": false,
          "description": "Hides the grid-item in small display sizes (landscape phones).",
          "experimental": false,
          "model": false,
          "name": "hideSm",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Hides the grid-item in small display sizes (landscape phones)."
            }
          ],
          "type": "boolean"
        },
        {
          "attribute": "hide-md",
          "deprecated": false,
          "description": "Hides the grid-item in medium display sizes (tablets).",
          "experimental": false,
          "model": false,
          "name": "hideMd",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Hides the grid-item in medium display sizes (tablets)."
            }
          ],
          "type": "boolean"
        },
        {
          "attribute": "hide-lg",
          "deprecated": false,
          "description": "Hides the grid-item in large display sizes (desktop).",
          "experimental": false,
          "model": false,
          "name": "hideLg",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Hides the grid-item in large display sizes (desktop)."
            }
          ],
          "type": "boolean"
        },
        {
          "attribute": "hide-xl",
          "deprecated": false,
          "description": "Hides the grid-item in extra-large display sizes (large desktops).",
          "experimental": false,
          "model": false,
          "name": "hideXl",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Hides the grid-item in extra-large display sizes (large desktops)."
            }
          ],
          "type": "boolean"
        },
        {
          "attribute": "hide-xxl",
          "deprecated": false,
          "description": "Hides the grid-item in extra-extra-large display sizes (larger desktops).",
          "experimental": false,
          "model": false,
          "name": "hideXxl",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Hides the grid-item in extra-extra-large display sizes (larger desktops)."
            }
          ],
          "type": "boolean"
        },
        {
          "attribute": "hide",
          "deprecated": false,
          "description": "Hides the grid-item in all display sizes.",
          "experimental": false,
          "model": false,
          "name": "hide",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Hides the grid-item in all display sizes."
            }
          ],
          "type": "boolean"
        },
        {
          "attribute": "hide-sm-up",
          "deprecated": false,
          "description": "Hides the grid-item in small and larger display sizes.",
          "experimental": false,
          "model": false,
          "name": "hideSmUp",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Hides the grid-item in small and larger display sizes."
            }
          ],
          "type": "boolean"
        },
        {
          "attribute": "hide-md-up",
          "deprecated": false,
          "description": "Hides the grid-item in medium and larger display sizes.",
          "experimental": false,
          "model": false,
          "name": "hideMdUp",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Hides the grid-item in medium and larger display sizes."
            }
          ],
          "type": "boolean"
        },
        {
          "attribute": "hide-lg-up",
          "deprecated": false,
          "description": "Hides the grid-item in large and larger display sizes.",
          "experimental": false,
          "model": false,
          "name": "hideLgUp",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Hides the grid-item in large and larger display sizes."
            }
          ],
          "type": "boolean"
        },
        {
          "attribute": "hide-xl-up",
          "deprecated": false,
          "description": "Hides the grid-item in large and larger display sizes.",
          "experimental": false,
          "model": false,
          "name": "hideXlUp",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Hides the grid-item in large and larger display sizes."
            }
          ],
          "type": "boolean"
        },
        {
          "attribute": "hide-sm-down",
          "deprecated": false,
          "description": "Hides the grid-item in small and smaller display sizes.",
          "experimental": false,
          "model": false,
          "name": "hideSmDown",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Hides the grid-item in small and smaller display sizes."
            }
          ],
          "type": "boolean"
        },
        {
          "attribute": "hide-md-down",
          "deprecated": false,
          "description": "Hides the grid-item in medium and smaller display sizes.",
          "experimental": false,
          "model": false,
          "name": "hideMdDown",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Hides the grid-item in medium and smaller display sizes."
            }
          ],
          "type": "boolean"
        },
        {
          "attribute": "hide-lg-down",
          "deprecated": false,
          "description": "Hides the grid-item in large and smaller display sizes.",
          "experimental": false,
          "model": false,
          "name": "hideLgDown",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Hides the grid-item in large and smaller display sizes."
            }
          ],
          "type": "boolean"
        },
        {
          "attribute": "hide-xl-down",
          "deprecated": false,
          "description": "Hides the grid-item in large and smaller display sizes.",
          "experimental": false,
          "model": false,
          "name": "hideXlDown",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Hides the grid-item in large and smaller display sizes."
            }
          ],
          "type": "boolean"
        },
        {
          "attribute": "hide-xxl-down",
          "deprecated": false,
          "description": "Hides the grid-item in large and smaller display sizes.",
          "experimental": false,
          "model": false,
          "name": "hideXxlDown",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Hides the grid-item in large and smaller display sizes."
            }
          ],
          "type": "boolean"
        },
        {
          "attribute": "offset-xs",
          "deprecated": false,
          "description": "Adds an offset space before the grid-item for extra-small display sizes.It also applies to larger breakpoints and display sizes while they are not specified.",
          "experimental": false,
          "model": false,
          "name": "offsetXs",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Adds an offset space before the grid-item for extra-small display sizes.It also applies to larger breakpoints and display sizes while they are not specified."
            }
          ],
          "type": "GridItemOffset",
          "typeReference": "./grid-item.types"
        },
        {
          "attribute": "offset-sm",
          "deprecated": false,
          "description": "Adds an offset space before the grid-item for small display sizes.It also applies to larger breakpoints and display sizes while they are not specified.",
          "experimental": false,
          "model": false,
          "name": "offsetSm",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Adds an offset space before the grid-item for small display sizes.It also applies to larger breakpoints and display sizes while they are not specified."
            }
          ],
          "type": "GridItemOffset",
          "typeReference": "./grid-item.types"
        },
        {
          "attribute": "offset-md",
          "deprecated": false,
          "description": "Adds an offset space before the grid-item for medium display sizes.It also applies to larger breakpoints and display sizes while they are not specified.",
          "experimental": false,
          "model": false,
          "name": "offsetMd",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Adds an offset space before the grid-item for medium display sizes.It also applies to larger breakpoints and display sizes while they are not specified."
            }
          ],
          "type": "GridItemOffset",
          "typeReference": "./grid-item.types"
        },
        {
          "attribute": "offset-lg",
          "deprecated": false,
          "description": "Adds an offset space before the grid-item for large display sizes.It also applies to the larger breakpoint (xl) while that is not specified.",
          "experimental": false,
          "model": false,
          "name": "offsetLg",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Adds an offset space before the grid-item for large display sizes.It also applies to the larger breakpoint (xl) while that is not specified."
            }
          ],
          "type": "GridItemOffset",
          "typeReference": "./grid-item.types"
        },
        {
          "attribute": "offset-xl",
          "deprecated": false,
          "description": "Adds an offset space before the grid-item for extra-large display sizes.",
          "experimental": false,
          "model": false,
          "name": "offsetXl",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Adds an offset space before the grid-item for extra-large display sizes."
            }
          ],
          "type": "GridItemOffset",
          "typeReference": "./grid-item.types"
        },
        {
          "attribute": "offset-xxl",
          "deprecated": false,
          "description": "Adds an offset space before the grid-item for extra-extra-large display sizes.",
          "experimental": false,
          "model": false,
          "name": "offsetXxl",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Adds an offset space before the grid-item for extra-extra-large display sizes."
            }
          ],
          "type": "GridItemOffset",
          "typeReference": "./grid-item.types"
        },
        {
          "attribute": "order-xs",
          "deprecated": false,
          "description": "Overrides the default order of the grid-item for extra-small display sizes.It also applies to larger breakpoints and display sizes while they are not specified.",
          "experimental": false,
          "model": false,
          "name": "orderXs",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Overrides the default order of the grid-item for extra-small display sizes.It also applies to larger breakpoints and display sizes while they are not specified."
            }
          ],
          "type": "GridItemOrder",
          "typeReference": "./grid-item.types"
        },
        {
          "attribute": "order-sm",
          "deprecated": false,
          "description": "Overrides the default order of the grid-item for small display sizes.It also applies to larger breakpoints and display sizes while they are not specified.",
          "experimental": false,
          "model": false,
          "name": "orderSm",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Overrides the default order of the grid-item for small display sizes.It also applies to larger breakpoints and display sizes while they are not specified."
            }
          ],
          "type": "GridItemOrder",
          "typeReference": "./grid-item.types"
        },
        {
          "attribute": "order-md",
          "deprecated": false,
          "description": "Overrides the default order of the grid-item for medium display sizes.It also applies to larger breakpoints and display sizes while they are not specified.",
          "experimental": false,
          "model": false,
          "name": "orderMd",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Overrides the default order of the grid-item for medium display sizes.It also applies to larger breakpoints and display sizes while they are not specified."
            }
          ],
          "type": "GridItemOrder",
          "typeReference": "./grid-item.types"
        },
        {
          "attribute": "order-lg",
          "deprecated": false,
          "description": "Overrides the default order of the grid-item for large display sizes.It also applies to the larger breakpoint (xl) while that is not specified.",
          "experimental": false,
          "model": false,
          "name": "orderLg",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Overrides the default order of the grid-item for large display sizes.It also applies to the larger breakpoint (xl) while that is not specified."
            }
          ],
          "type": "GridItemOrder",
          "typeReference": "./grid-item.types"
        },
        {
          "attribute": "order-xl",
          "deprecated": false,
          "description": "Overrides the default order of the grid-item for extra-large display sizes.",
          "experimental": false,
          "model": false,
          "name": "orderXl",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Overrides the default order of the grid-item for extra-large display sizes."
            }
          ],
          "type": "GridItemOrder",
          "typeReference": "./grid-item.types"
        },
        {
          "attribute": "order-xxl",
          "deprecated": false,
          "description": "Overrides the default order of the grid-item for extra-extra-large display sizes.",
          "experimental": false,
          "model": false,
          "name": "orderXxl",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Overrides the default order of the grid-item for extra-extra-large display sizes."
            }
          ],
          "type": "GridItemOrder",
          "typeReference": "./grid-item.types"
        }
      ],
      "slots": [
        {
          "name": "default",
          "description": "The default slot."
        }
      ],
      "styles": [],
      "tags": [],
      "title": "Grid Item"
    },
    {
      "events": [],
      "deprecated": false,
      "description": "A graphical representation of an action, object, or idea that is used in a user interface to provide visual cues and improve the user experience. All icons are based on the popular [Bootstrap Icons](https://icons.getbootstrap.com) library.",
      "experimental": false,
      "key": "icon",
      "lastModified": "2024-02-17T09:22:23.013Z",
      "methods": [],
      "parts": [
        {
          "name": "svg",
          "description": "The svg element."
        }
      ],
      "properties": [
        {
          "attribute": "color",
          "deprecated": false,
          "description": "Specifies the color.",
          "experimental": false,
          "model": false,
          "name": "color",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies the color."
            }
          ],
          "type": "string"
        },
        {
          "attribute": "flip",
          "deprecated": false,
          "description": "Flips in `horizontal`, `vertical` or `both` directions.",
          "experimental": false,
          "model": false,
          "name": "flip",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Flips in `horizontal`, `vertical` or `both` directions."
            }
          ],
          "type": "IconFlip",
          "typeReference": "./icon.types"
        },
        {
          "attribute": "label",
          "deprecated": false,
          "description": "Specifies an alternate description to use for assistive devices.",
          "experimental": false,
          "model": false,
          "name": "label",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies an alternate description to use for assistive devices."
            }
          ],
          "type": "string"
        },
        {
          "attribute": "name",
          "deprecated": false,
          "description": "Specifies the name.",
          "experimental": false,
          "model": false,
          "name": "name",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies the name."
            }
          ],
          "type": "string"
        },
        {
          "attribute": "resolver",
          "deprecated": false,
          "description": "An asynchronous function to load SVG files.",
          "experimental": false,
          "model": false,
          "name": "resolver",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "An asynchronous function to load SVG files."
            }
          ],
          "type": "IconResolver",
          "typeReference": "./icon.types"
        },
        {
          "attribute": "rotate",
          "deprecated": false,
          "description": "Specifies the rotation.",
          "experimental": false,
          "model": false,
          "name": "rotate",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies the rotation."
            }
          ],
          "type": "number"
        },
        {
          "attribute": "size",
          "deprecated": false,
          "description": "Specifies the size.",
          "experimental": false,
          "model": false,
          "name": "size",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies the size."
            }
          ],
          "type": "IconSize",
          "typeReference": "./icon.types"
        }
      ],
      "readmeContent": "# Icon\r\n\r\nA graphical representation of an action, object, or idea that is used in a user interface to provide visual cues and improve the user experience. All icons are based on the popular [Bootstrap Icons](https://icons.getbootstrap.com) library.\r\n\r\n<Playground />\r\n\r\n<Usage />\r\n\r\n<Api />\r\n\r\n<GlobalConfig />\r\n\r\n<Examples />\r\n\r\n### Default\r\n\r\n<Example value=\"default\" />\r\n\r\n### Name\r\n\r\nTo see all names click [here](https://icons.getbootstrap.com).\r\n\r\n<Example value=\"name\" />\r\n\r\n### Size\r\n\r\n<Example value=\"size\" />\r\n\r\n### Color\r\n\r\n<Example value=\"color\" />\r\n\r\n### Custom Color\r\n\r\n<Example value=\"custom-color\" />\r\n\r\n### Flip\r\n\r\n<Example value=\"flip\" />\r\n\r\n### Rotate\r\n\r\n<Example value=\"rotate\" />\r\n\r\n### Label\r\n\r\n<Example value=\"label\" />\r\n\r\n### Register A Custom Name\r\n\r\n<Example value=\"register-a-custom-name\" />\r\n\r\n### Custom Size\r\n\r\n<Example value=\"custom-size\" />\r\n\r\n### Override Size\r\n\r\n<Example value=\"override-size\" />\r\n\r\n### Resolver\r\n\r\n<Example value=\"resolver\" />\r\n\r\n### Font Awesome\r\n\r\nFor more information click [here](https://fontawesome.com).\r\n\r\n<Example value=\"font-awesome\" />\r\n\r\n### Material\r\n\r\nFor more information click [here](https://fonts.google.com/icons).\r\n\r\n<Example value=\"material\" />\r\n\r\n### Multiple Library\r\n\r\n<Example value=\"multiple-library\" />\r\n\r\n<LastModified />\r\n",
      "slots": [],
      "styles": [],
      "tags": [],
      "title": "Icon"
    },
    {
      "events": [
        {
          "cancelable": false,
          "deprecated": false,
          "description": "Fires When the browser detects that the element has been unveiled or obscured.",
          "detail": "EventEmitter<IntersectionObserverEntry>",
          "experimental": false,
          "model": false,
          "name": "plusChange",
          "tags": [
            {
              "key": "",
              "value": "Fires When the browser detects that the element has been unveiled or obscured."
            }
          ]
        }
      ],
      "deprecated": false,
      "description": "The [Intersection Observer API](https://mdn.io/intersection-observer-api) provides a way to asynchronously observe changes in the intersection of a target element with an ancestor element or with a top-level document's [viewport](https://mdn.io/glossary-viewport).",
      "experimental": false,
      "key": "intersection",
      "lastModified": "2024-02-17T09:22:23.017Z",
      "methods": [],
      "parts": [],
      "properties": [
        {
          "attribute": "disabled",
          "deprecated": false,
          "description": "Disables the element functionality.",
          "experimental": false,
          "model": false,
          "name": "disabled",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Disables the element functionality."
            }
          ],
          "type": "boolean"
        },
        {
          "attribute": "once",
          "deprecated": false,
          "description": "The event fires only once.",
          "experimental": false,
          "model": false,
          "name": "once",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "The event fires only once."
            }
          ],
          "type": "boolean"
        },
        {
          "attribute": "root",
          "deprecated": false,
          "description": "The element that is used as the viewport for checking visibility of the target. Must be theancestor of the target. Defaults to the browser viewport if not specified or if `null`.",
          "experimental": false,
          "model": false,
          "name": "root",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "The element that is used as the viewport for checking visibility of the target. Must be theancestor of the target. Defaults to the browser viewport if not specified or if `null`."
            }
          ],
          "type": "Element",
          "typeReference": "@htmlplus/element"
        },
        {
          "attribute": "root-margin",
          "deprecated": false,
          "description": "Margin around the root. Can have values similar to the CSS[margin](https://mdn.io/margin)property, e.g. `\"10px 20px 30px 40px\"` (top, right, bottom, left). The values can bepercentages. This set of values serves to grow or shrink each side of the root element'sbounding box before computing intersections. Defaults to all zeros.",
          "experimental": false,
          "model": false,
          "name": "rootMargin",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Margin around the root. Can have values similar to the CSS[margin](https://mdn.io/margin)property, e.g. `\"10px 20px 30px 40px\"` (top, right, bottom, left). The values can bepercentages. This set of values serves to grow or shrink each side of the root element'sbounding box before computing intersections. Defaults to all zeros."
            }
          ],
          "type": "string"
        },
        {
          "attribute": "threshold",
          "deprecated": false,
          "description": "Either a single number or an array of numbers which indicate at what percentage of thetarget's visibility the observer's callback should be executed. If you only want to detectwhen visibility passes the 50% mark, you can use a value of 0.5. If you want the callback torun every time visibility passes another 25%, you would specify the array[0, 0.25, 0.5, 0.75, 1]. The default is 0 (meaning as soon as even one pixel is visible, thecallback will be run). A value of 1.0 means that the threshold isn't considered passed untilevery pixel is visible.",
          "experimental": false,
          "model": false,
          "name": "threshold",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Either a single number or an array of numbers which indicate at what percentage of thetarget's visibility the observer's callback should be executed. If you only want to detectwhen visibility passes the 50% mark, you can use a value of 0.5. If you want the callback torun every time visibility passes another 25%, you would specify the array[0, 0.25, 0.5, 0.75, 1]. The default is 0 (meaning as soon as even one pixel is visible, thecallback will be run). A value of 1.0 means that the threshold isn't considered passed untilevery pixel is visible."
            }
          ],
          "type": "number | number[]"
        }
      ],
      "readmeContent": "# Intersection\r\n\r\nThe [Intersection Observer API](https://mdn.io/intersection-observer-api) provides a way to asynchronously observe changes in the intersection of a target element with an ancestor element or with a top-level document's [viewport](https://mdn.io/glossary-viewport).\r\n\r\n<Playground />\r\n\r\n<Usage />\r\n\r\n<Api />\r\n\r\n<GlobalConfig />\r\n\r\n<Examples />\r\n\r\n### Default\r\n\r\nObserves the user's viewport to detect the visibility of the Card.\r\n<Example value=\"default\" />\r\n\r\n### Lazy Image\r\n\r\nLoads the image after appearing in the user's viewport.\r\n<Example value=\"lazy-image\" />\r\n\r\n<LastModified />\r\n",
      "slots": [
        {
          "name": "default",
          "description": "The default slot."
        }
      ],
      "styles": [],
      "tags": [
        {
          "key": "stable",
          "value": ""
        }
      ],
      "title": "Intersection"
    },
    {
      "events": [],
      "deprecated": false,
      "description": "Progress bar expresses an unspecified wait time or display the length of a process.",
      "experimental": false,
      "key": "progress-bar",
      "lastModified": "2024-02-17T09:22:23.032Z",
      "methods": [],
      "parts": [],
      "properties": [
        {
          "attribute": "buffer",
          "deprecated": false,
          "description": "TODO",
          "experimental": false,
          "model": false,
          "name": "buffer",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "TODO"
            }
          ],
          "type": "number"
        },
        {
          "attribute": "immediate",
          "deprecated": false,
          "description": "TODO",
          "experimental": false,
          "model": false,
          "name": "immediate",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "TODO"
            }
          ],
          "type": "boolean"
        },
        {
          "attribute": "label",
          "deprecated": false,
          "description": "TODO",
          "experimental": false,
          "model": false,
          "name": "label",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "TODO"
            }
          ],
          "type": "boolean"
        },
        {
          "attribute": "min",
          "deprecated": false,
          "description": "TODO",
          "experimental": false,
          "initializer": "0",
          "model": false,
          "name": "min",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "TODO"
            }
          ],
          "type": "number"
        },
        {
          "attribute": "max",
          "deprecated": false,
          "description": "TODO",
          "experimental": false,
          "initializer": "100",
          "model": false,
          "name": "max",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "TODO"
            }
          ],
          "type": "number"
        },
        {
          "attribute": "variant",
          "deprecated": false,
          "description": "TODO",
          "experimental": false,
          "model": false,
          "name": "variant",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "TODO"
            }
          ],
          "type": "string"
        },
        {
          "attribute": "value",
          "deprecated": false,
          "description": "TODO",
          "experimental": false,
          "initializer": "0",
          "model": false,
          "name": "value",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "TODO"
            }
          ],
          "type": "number"
        }
      ],
      "readmeContent": "# Progress Bar\r\n\r\nProgress bar expresses an unspecified wait time or display the length of a process.\r\n\r\n<Playground />\r\n\r\n<Usage />\r\n\r\n<Api />\r\n\r\n<GlobalConfig />\r\n\r\n<Examples />\r\n\r\n### Default\r\n\r\n<Example value=\"default\" />\r\n\r\n### Value\r\n\r\n<Example value=\"value\" />\r\n\r\n### Color\r\n\r\n<Example value=\"color\" />\r\n\r\n### Label\r\n\r\n<Example value=\"label\" />\r\n\r\n### Custom Label\r\n\r\n<Example value=\"custom-label\" />\r\n\r\n### Height\r\n\r\n<Example value=\"height\" />\r\n\r\n### Indeterminate\r\n\r\n<Example value=\"indeterminate\" />\r\n\r\n### Buffer\r\n\r\n<Example value=\"buffer\" />\r\n\r\n### Min And Max\r\n\r\n<Example value=\"min-and-max\" />\r\n\r\n### Aria Label\r\n\r\n<Example value=\"aria-label\" />\r\n\r\n### Stacked\r\n\r\n<Example value=\"stacked\" />\r\n\r\n### Latency\r\n\r\n<Example value=\"latency\" />\r\n\r\n### Customization\r\n\r\n<Example value=\"customization\" />\r\n\r\n<LastModified />\r\n",
      "slots": [
        {
          "name": "default",
          "description": "The default slot."
        }
      ],
      "styles": [],
      "tags": [],
      "title": "Progress Bar"
    },
    {
      "events": [],
      "deprecated": false,
      "experimental": false,
      "key": "progress-bar-stack",
      "lastModified": "2024-02-17T09:22:23.020Z",
      "methods": [],
      "parts": [],
      "properties": [],
      "slots": [],
      "styles": [],
      "tags": [],
      "title": "Progress Bar Stack"
    },
    {
      "events": [
        {
          "cancelable": false,
          "deprecated": false,
          "description": "Fires when the scroll starts changing.",
          "detail": "EventEmitter<ScrollDetectorChangeEvent>",
          "detailReference": "./scroll-detector.types",
          "experimental": false,
          "model": false,
          "name": "plusChange",
          "tags": [
            {
              "key": "",
              "value": "Fires when the scroll starts changing."
            }
          ]
        }
      ],
      "deprecated": false,
      "description": "Detects scroll event from an element.",
      "experimental": false,
      "key": "scroll-detector",
      "lastModified": "2024-02-17T09:22:23.039Z",
      "methods": [],
      "parts": [],
      "properties": [
        {
          "attribute": "disabled",
          "deprecated": false,
          "description": "Disables the element functionality.",
          "experimental": false,
          "model": false,
          "name": "disabled",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Disables the element functionality."
            }
          ],
          "type": "boolean"
        },
        {
          "attribute": "reference",
          "deprecated": false,
          "description": "Specifies the reference of the scroll.",
          "experimental": false,
          "initializer": "'document'",
          "model": false,
          "name": "reference",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies the reference of the scroll."
            }
          ],
          "type": "ScrollDetectorReference",
          "typeReference": "./scroll-detector.types"
        },
        {
          "attribute": "vertical",
          "deprecated": false,
          "description": "Indicates which scroll (horizontal or vertical) is to be used as the source.",
          "experimental": false,
          "model": false,
          "name": "vertical",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Indicates which scroll (horizontal or vertical) is to be used as the source."
            }
          ],
          "type": "boolean"
        }
      ],
      "readmeContent": "# Scroll Detector\r\n\r\nDetects scroll event from an element.\r\n\r\n<Playground />\r\n\r\n<Usage />\r\n\r\n<Api />\r\n\r\n<GlobalConfig />\r\n\r\n<Examples />\r\n\r\n### Default\r\n\r\nOpen the developer console.\r\n\r\n<Example value=\"default\" />\r\n\r\n### Scroll Indicator\r\n\r\n<Example value=\"scroll-indicator\" />\r\n\r\n<LastModified />\r\n",
      "slots": [],
      "styles": [],
      "tags": [
        {
          "key": "stable",
          "value": ""
        }
      ],
      "title": "Scroll Detector"
    },
    {
      "events": [
        {
          "cancelable": false,
          "deprecated": false,
          "description": "Fires after updating the stroke.",
          "detail": "EventEmitter<PointerEvent>",
          "experimental": false,
          "model": false,
          "name": "plusAfter",
          "tags": [
            {
              "key": "",
              "value": "Fires after updating the stroke."
            }
          ]
        },
        {
          "cancelable": false,
          "deprecated": false,
          "description": "Fires before updating the stroke.",
          "detail": "EventEmitter<PointerEvent>",
          "experimental": false,
          "model": false,
          "name": "plusBefore",
          "tags": [
            {
              "key": "",
              "value": "Fires before updating the stroke."
            }
          ]
        },
        {
          "cancelable": false,
          "deprecated": false,
          "description": "Fires after a stroke ends.",
          "detail": "EventEmitter<PointerEvent>",
          "experimental": false,
          "model": false,
          "name": "plusEnd",
          "tags": [
            {
              "key": "",
              "value": "Fires after a stroke ends."
            }
          ]
        },
        {
          "cancelable": false,
          "deprecated": false,
          "description": "Fires before a stroke starts.",
          "detail": "EventEmitter<PointerEvent>",
          "experimental": false,
          "model": false,
          "name": "plusStart",
          "tags": [
            {
              "key": "",
              "value": "Fires before a stroke starts."
            }
          ]
        }
      ],
      "deprecated": false,
      "description": "Allows user to draw smooth signatures.",
      "experimental": false,
      "key": "signature",
      "lastModified": "2024-02-17T09:22:23.057Z",
      "methods": [
        {
          "async": false,
          "description": "Specifies whether redo can be performed or not.",
          "deprecated": false,
          "experimental": false,
          "name": "canRedo",
          "parameters": [],
          "returns": "boolean",
          "tags": [
            {
              "key": "",
              "value": "Specifies whether redo can be performed or not."
            }
          ],
          "signature": "canRedo() => boolean"
        },
        {
          "async": false,
          "description": "Specifies whether undo can be performed or not.",
          "deprecated": false,
          "experimental": false,
          "name": "canUndo",
          "parameters": [],
          "returns": "boolean",
          "tags": [
            {
              "key": "",
              "value": "Specifies whether undo can be performed or not."
            }
          ],
          "signature": "canUndo() => boolean"
        },
        {
          "async": false,
          "description": "The canvas element.",
          "deprecated": false,
          "experimental": false,
          "name": "canvas",
          "parameters": [],
          "returns": "HTMLCanvasElement",
          "tags": [
            {
              "key": "",
              "value": "The canvas element."
            }
          ],
          "signature": "canvas() => HTMLCanvasElement"
        },
        {
          "async": false,
          "description": "Clears the canvas.",
          "deprecated": false,
          "experimental": false,
          "name": "clear",
          "parameters": [],
          "returns": "void",
          "tags": [
            {
              "key": "",
              "value": "Clears the canvas."
            }
          ],
          "signature": "clear() => void"
        },
        {
          "async": false,
          "description": "Draws from the data.",
          "deprecated": false,
          "experimental": false,
          "name": "fromData",
          "parameters": [
            {
              "description": "Collections of points.",
              "required": true,
              "name": "data",
              "type": "SignaturePointGroup[]"
            },
            {
              "description": "Clears the canvas before drawing new points.",
              "required": false,
              "name": "clear",
              "type": "boolean"
            }
          ],
          "returns": "void",
          "tags": [
            {
              "key": "",
              "value": "Draws from the data."
            },
            {
              "key": "param",
              "value": "data Collections of points."
            },
            {
              "key": "param",
              "value": "clear Clears the canvas before drawing new points."
            }
          ],
          "signature": "fromData(data: SignaturePointGroup[], clear?: boolean) => void"
        },
        {
          "async": true,
          "description": "Draws from the data URL. [More](https://mdn.io/drawImage).This method does not populate the internal data structure that represents the drawn signature.Thus, after using `fromDataURL`, `toData` won't work properly.",
          "deprecated": false,
          "experimental": false,
          "name": "fromDataURL",
          "parameters": [
            {
              "description": "A string containing the [data URL](https://mdn.io/dataURL).",
              "required": true,
              "name": "dataUrl",
              "type": "string"
            },
            {
              "description": "TODO",
              "required": false,
              "name": "options",
              "type": "SignatureFromDataURLOptions",
              "typeReference": "./signature.types"
            }
          ],
          "returns": "void",
          "tags": [
            {
              "key": "",
              "value": "Draws from the data URL. [More](https://mdn.io/drawImage).This method does not populate the internal data structure that represents the drawn signature.Thus, after using `fromDataURL`, `toData` won't work properly."
            },
            {
              "key": "param",
              "value": "dataUrl A string containing the [data URL](https://mdn.io/dataURL)."
            },
            {
              "key": "param",
              "value": "options TODO"
            }
          ],
          "signature": "fromDataURL(dataUrl: string, options?: SignatureFromDataURLOptions) => void"
        },
        {
          "async": false,
          "description": "Returns `true` if canvas is empty.",
          "deprecated": false,
          "experimental": false,
          "name": "isEmpty",
          "parameters": [],
          "returns": "boolean",
          "tags": [
            {
              "key": "",
              "value": "Returns `true` if canvas is empty."
            }
          ],
          "signature": "isEmpty() => boolean"
        },
        {
          "async": false,
          "description": "Returns data of the canvas.",
          "deprecated": false,
          "experimental": false,
          "name": "toData",
          "parameters": [],
          "returns": "SignaturePointGroup[]",
          "tags": [
            {
              "key": "",
              "value": "Returns data of the canvas."
            },
            {
              "key": "returns",
              "value": "Collections of points."
            }
          ],
          "signature": "toData() => SignaturePointGroup[]"
        },
        {
          "async": false,
          "deprecated": false,
          "experimental": false,
          "name": "toDataURL",
          "parameters": [
            {
              "required": false,
              "name": "type",
              "type": "string"
            },
            {
              "required": false,
              "name": "options",
              "type": "any"
            }
          ],
          "returns": "string",
          "tags": [],
          "signature": "toDataURL(type?: string, options?: any) => string"
        },
        {
          "async": false,
          "description": "Returns SVG string.",
          "deprecated": false,
          "experimental": false,
          "name": "toSVG",
          "parameters": [
            {
              "description": "Adds the background color to the SVG output.",
              "required": false,
              "name": "includeBackgroundColor",
              "type": "boolean"
            }
          ],
          "returns": "string",
          "tags": [
            {
              "key": "",
              "value": "Returns SVG string."
            },
            {
              "key": "param",
              "value": "includeBackgroundColor Adds the background color to the SVG output."
            }
          ],
          "signature": "toSVG(includeBackgroundColor?: boolean) => string"
        },
        {
          "async": false,
          "description": "Reverts the last undo action.",
          "deprecated": false,
          "experimental": false,
          "name": "redo",
          "parameters": [],
          "returns": "void",
          "tags": [
            {
              "key": "",
              "value": "Reverts the last undo action."
            }
          ],
          "signature": "redo() => void"
        },
        {
          "async": false,
          "description": "Syncs the canvas dimensions with the element dimensions.",
          "deprecated": false,
          "experimental": false,
          "name": "resize",
          "parameters": [
            {
              "description": "Clears the canvas after resizing.",
              "required": false,
              "name": "clear",
              "type": "boolean"
            }
          ],
          "returns": "void",
          "tags": [
            {
              "key": "",
              "value": "Syncs the canvas dimensions with the element dimensions."
            },
            {
              "key": "param",
              "value": "clear Clears the canvas after resizing."
            }
          ],
          "signature": "resize(clear?: boolean) => void"
        },
        {
          "async": false,
          "description": "Reverts the last action.",
          "deprecated": false,
          "experimental": false,
          "name": "undo",
          "parameters": [],
          "returns": "void",
          "tags": [
            {
              "key": "",
              "value": "Reverts the last action."
            }
          ],
          "signature": "undo() => void"
        }
      ],
      "parts": [
        {
          "name": "canvas",
          "description": "The canvas element."
        }
      ],
      "properties": [
        {
          "attribute": "background-color",
          "deprecated": false,
          "description": "Specifies the background color.",
          "experimental": false,
          "initializer": "'rgba(0, 0, 0, 0)'",
          "model": false,
          "name": "backgroundColor",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies the background color."
            }
          ],
          "type": "string"
        },
        {
          "attribute": "clear-on-resize",
          "deprecated": false,
          "description": "Clears the canvas after resizing.",
          "experimental": false,
          "model": false,
          "name": "clearOnResize",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Clears the canvas after resizing."
            }
          ],
          "type": "boolean"
        },
        {
          "attribute": "color",
          "deprecated": false,
          "description": "Specifies the color of the strokes.",
          "experimental": false,
          "initializer": "'black'",
          "model": false,
          "name": "color",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies the color of the strokes."
            }
          ],
          "type": "string"
        },
        {
          "attribute": "disabled",
          "deprecated": false,
          "description": "Disables the element functionality.",
          "experimental": false,
          "model": false,
          "name": "disabled",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Disables the element functionality."
            }
          ],
          "type": "boolean"
        },
        {
          "attribute": "distance",
          "deprecated": false,
          "description": "Specifies the distance between the previous point and the next one.",
          "experimental": false,
          "model": false,
          "name": "distance",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies the distance between the previous point and the next one."
            }
          ],
          "type": "number"
        },
        {
          "attribute": "dot-size",
          "deprecated": false,
          "description": "Specifies the radius of a single dot.",
          "experimental": false,
          "model": false,
          "name": "dotSize",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies the radius of a single dot."
            }
          ],
          "type": "number"
        },
        {
          "attribute": "max-width",
          "deprecated": false,
          "description": "Specifies the maximum width of the strokes.",
          "experimental": false,
          "initializer": "2.5",
          "model": false,
          "name": "maxWidth",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies the maximum width of the strokes."
            }
          ],
          "type": "number"
        },
        {
          "attribute": "min-width",
          "deprecated": false,
          "description": "Specifies the minimum width of the strokes.",
          "experimental": false,
          "initializer": "0.5",
          "model": false,
          "name": "minWidth",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies the minimum width of the strokes."
            }
          ],
          "type": "number"
        },
        {
          "attribute": "resizable",
          "deprecated": false,
          "description": "Observes the element dimensions to apply new changes on the canvas.",
          "experimental": false,
          "model": false,
          "name": "resizable",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Observes the element dimensions to apply new changes on the canvas."
            }
          ],
          "type": "boolean"
        },
        {
          "attribute": "throttle",
          "deprecated": false,
          "description": "Specifies the time distance between the previous point and the next one.",
          "experimental": false,
          "initializer": "16",
          "model": false,
          "name": "throttle",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies the time distance between the previous point and the next one."
            }
          ],
          "type": "number"
        },
        {
          "attribute": "velocity",
          "deprecated": false,
          "description": "Specifies the velocity based on the previous velocity.",
          "experimental": false,
          "initializer": "0.7",
          "model": false,
          "name": "velocity",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies the velocity based on the previous velocity."
            }
          ],
          "type": "number"
        }
      ],
      "readmeContent": "# Signature\r\n\r\nAllows user to draw smooth signatures.\r\n\r\n<Playground />\r\n\r\n<Usage />\r\n\r\n<Api />\r\n\r\n<GlobalConfig />\r\n\r\n<Examples />\r\n\r\n### Default\r\n\r\n<Example value=\"default\" />\r\n\r\n### Color\r\n\r\n<Example value=\"color\" />\r\n\r\n### Dimensions\r\n\r\n<Example value=\"dimensions\" />\r\n\r\n### Disabled\r\n\r\n<Example value=\"disabled\" />\r\n\r\n### Width\r\n\r\n<Example value=\"width\" />\r\n\r\n### Distance\r\n\r\n<Example value=\"distance\" />\r\n\r\n### Clear\r\n\r\n<Example value=\"clear\" />\r\n\r\n### History\r\n\r\n<Example value=\"history\" />\r\n\r\n### Resizable\r\n\r\n<Example value=\"resizable\" />\r\n\r\n### Clear On Resize\r\n\r\n<Example value=\"clear-on-resize\" />\r\n\r\n### Save\r\n\r\n<Example value=\"save\" />\r\n\r\n<LastModified />\r\n",
      "slots": [],
      "styles": [],
      "tags": [
        {
          "key": "stable",
          "value": ""
        }
      ],
      "title": "Signature"
    },
    {
      "events": [],
      "deprecated": false,
      "description": "TODO",
      "experimental": false,
      "key": "spacer",
      "lastModified": "2024-02-17T09:22:23.061Z",
      "methods": [],
      "parts": [],
      "properties": [
        {
          "attribute": "grow",
          "deprecated": false,
          "description": "TODO",
          "experimental": false,
          "initializer": "1",
          "model": false,
          "name": "grow",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "TODO"
            }
          ],
          "type": "number"
        }
      ],
      "readmeContent": "# Spacer\r\n\r\nTODO\r\n\r\n<Playground />\r\n\r\n<Usage />\r\n\r\n<Api />\r\n\r\n<GlobalConfig />\r\n\r\n<Examples />\r\n\r\n### Default\r\n\r\n<Example value=\"default\" />\r\n\r\n<LastModified />\r\n",
      "slots": [],
      "styles": [],
      "tags": [],
      "title": "Spacer"
    },
    {
      "events": [],
      "deprecated": false,
      "description": "An indicator of progress and activity.",
      "experimental": false,
      "key": "spinner",
      "lastModified": "2024-02-17T09:22:23.077Z",
      "methods": [],
      "parts": [],
      "properties": [
        {
          "attribute": "color",
          "deprecated": false,
          "description": "Specifies the color.",
          "experimental": false,
          "model": false,
          "name": "color",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies the color."
            }
          ],
          "type": "string"
        },
        {
          "attribute": "size",
          "deprecated": false,
          "description": "Specifies the size of the spinner.",
          "experimental": false,
          "initializer": "'inherit'",
          "model": false,
          "name": "size",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies the size of the spinner."
            }
          ],
          "type": "SpinnerSize",
          "typeReference": "./spinner.types"
        },
        {
          "attribute": "type",
          "deprecated": false,
          "description": "Specifies which variant of the spinner to use.",
          "experimental": false,
          "initializer": "'default'",
          "model": false,
          "name": "type",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies which variant of the spinner to use."
            }
          ],
          "type": "SpinnerType",
          "typeReference": "./spinner.types"
        }
      ],
      "readmeContent": "# Spinner\r\n\r\nAn indicator of progress and activity.\r\n\r\n<Playground />\r\n\r\n<Usage />\r\n\r\n<Api />\r\n\r\n<GlobalConfig />\r\n\r\n<Examples />\r\n\r\n### Default\r\n\r\n<Example value=\"default\" />\r\n\r\n### Size\r\n\r\n<Example value=\"size\" />\r\n\r\n### Custom Size\r\n\r\n<Example value=\"custom-size\" />\r\n\r\n### Color\r\n\r\n<Example value=\"color\" />\r\n\r\n### Type\r\n\r\n<Example value=\"type\" />\r\n\r\n### Customize\r\n\r\n<Example value=\"customize\" />\r\n\r\n<LastModified />\r\n",
      "slots": [],
      "styles": [],
      "tags": [
        {
          "key": "stable",
          "value": ""
        }
      ],
      "title": "Spinner"
    },
    {
      "events": [],
      "deprecated": false,
      "description": "TODO.",
      "experimental": false,
      "key": "stack",
      "lastModified": "2024-02-17T09:22:23.081Z",
      "methods": [],
      "parts": [],
      "properties": [
        {
          "attribute": "align-items",
          "deprecated": false,
          "description": "TODO.",
          "experimental": false,
          "initializer": "'center'",
          "model": false,
          "name": "alignItems",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "TODO."
            }
          ],
          "type": "StackAlignItems",
          "typeReference": "./stack.types"
        },
        {
          "attribute": "gap",
          "deprecated": false,
          "description": "TODO.",
          "experimental": false,
          "model": false,
          "name": "gap",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "TODO."
            }
          ],
          "type": "string"
        },
        {
          "attribute": "justify-content",
          "deprecated": false,
          "description": "TODO.",
          "experimental": false,
          "initializer": "'center'",
          "model": false,
          "name": "justifyContent",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "TODO."
            }
          ],
          "type": "StackJustifyContent",
          "typeReference": "./stack.types"
        },
        {
          "attribute": "reverse",
          "deprecated": false,
          "description": "TODO.",
          "experimental": false,
          "model": false,
          "name": "reverse",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "TODO."
            }
          ],
          "type": "boolean"
        },
        {
          "attribute": "vertical",
          "deprecated": false,
          "description": "TODO.",
          "experimental": false,
          "model": false,
          "name": "vertical",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "TODO."
            }
          ],
          "type": "boolean"
        }
      ],
      "readmeContent": "# Stack\r\n\r\nTODO.\r\n\r\n<Playground />\r\n\r\n<Usage />\r\n\r\n<Api />\r\n\r\n<GlobalConfig />\r\n\r\n<Examples />\r\n\r\n### Default\r\n\r\n<Example value=\"default\" />\r\n\r\n<LastModified />\r\n",
      "slots": [
        {
          "name": "default",
          "description": "The default slot."
        }
      ],
      "styles": [],
      "tags": [],
      "title": "Stack"
    },
    {
      "events": [
        {
          "cancelable": false,
          "deprecated": false,
          "description": "Fires when the state is changed. To enable, set the `watcher` property to `true`.",
          "detail": "EventEmitter<StickyState>",
          "detailReference": "./sticky.types",
          "experimental": false,
          "model": false,
          "name": "plusChange",
          "tags": [
            {
              "key": "",
              "value": "Fires when the state is changed. To enable, set the `watcher` property to `true`."
            }
          ]
        }
      ],
      "deprecated": false,
      "description": "Element content is positioned based on the user's scroll position.",
      "experimental": false,
      "key": "sticky",
      "lastModified": "2024-02-17T09:22:23.090Z",
      "methods": [],
      "parts": [],
      "properties": [
        {
          "attribute": "top",
          "deprecated": false,
          "description": "Specifies the space from top.",
          "experimental": false,
          "initializer": "0",
          "model": false,
          "name": "top",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies the space from top."
            }
          ],
          "type": "StickyTop",
          "typeReference": "./sticky.types"
        },
        {
          "attribute": "watcher",
          "deprecated": false,
          "description": "To active `state` attribute, `change` event, `normal` slot, or `stick` slot, Set it to `true`.",
          "experimental": false,
          "model": false,
          "name": "watcher",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "To active `state` attribute, `change` event, `normal` slot, or `stick` slot, Set it to `true`."
            }
          ],
          "type": "boolean"
        },
        {
          "attribute": "z-index",
          "deprecated": false,
          "description": "Specifies the z-index.",
          "experimental": false,
          "model": false,
          "name": "zIndex",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies the z-index."
            }
          ],
          "type": "number"
        }
      ],
      "readmeContent": "# Sticky\r\n\r\nElement content is positioned based on the user's scroll position.\r\n\r\n<Playground />\r\n\r\n<Usage />\r\n\r\n<Api />\r\n\r\n<GlobalConfig />\r\n\r\n<Examples />\r\n\r\n### Default\r\n\r\n<Example value=\"default\" />\r\n\r\n### Top\r\n\r\n<Example value=\"top\" />\r\n\r\n### Contacts\r\n\r\n<Example value=\"contacts\" />\r\n\r\n### State Attribute\r\n\r\n<Example value=\"state-attribute\" />\r\n\r\n### Slots\r\n\r\n<Example value=\"slots\" />\r\n\r\n### Sidebar\r\n\r\n<Example value=\"sidebar\" />\r\n\r\n<LastModified />\r\n",
      "slots": [
        {
          "name": "default",
          "description": "The default slot."
        },
        {
          "name": "normal",
          "description": "Activated when the state becomes `normal`. To enable, set the `watcher` property to `true`."
        },
        {
          "name": "stick",
          "description": "Activated when the state becomes `stick`. To enable, set the `watcher` property to `true`."
        }
      ],
      "styles": [],
      "tags": [
        {
          "key": "stable",
          "value": ""
        }
      ],
      "title": "Sticky"
    },
    {
      "events": [
        {
          "cancelable": false,
          "deprecated": false,
          "description": "When the switch state is changed this event triggers.",
          "detail": "EventEmitter<void>",
          "experimental": false,
          "model": true,
          "name": "plusChange",
          "tags": [
            {
              "key": "",
              "value": "When the switch state is changed this event triggers."
            },
            {
              "key": "model",
              "value": ""
            }
          ]
        }
      ],
      "deprecated": false,
      "description": "Toggles the state of a single item on or off.",
      "experimental": false,
      "key": "switch",
      "lastModified": "2024-02-17T09:22:23.098Z",
      "methods": [],
      "parts": [],
      "properties": [
        {
          "attribute": "checked",
          "deprecated": false,
          "description": "Puts the switch in checked state.",
          "experimental": false,
          "model": true,
          "name": "checked",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Puts the switch in checked state."
            },
            {
              "key": "model",
              "value": ""
            }
          ],
          "type": "boolean"
        },
        {
          "attribute": "disabled",
          "deprecated": false,
          "description": "Disables the switch.",
          "experimental": false,
          "model": false,
          "name": "disabled",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Disables the switch."
            }
          ],
          "type": "boolean"
        }
      ],
      "readmeContent": "# Switch\r\n\r\nToggles the state of a single item on or off.\r\n\r\n<Playground />\r\n\r\n<Usage />\r\n\r\n<Api />\r\n\r\n<GlobalConfig />\r\n\r\n<Examples />\r\n\r\n### Default\r\n\r\n<Example value=\"default\" />\r\n\r\n### Checked\r\n\r\n<Example value=\"checked\" />\r\n\r\n### Disabled\r\n\r\n<Example value=\"disabled\" />\r\n\r\n### Event\r\n\r\n<Example value=\"event\" />\r\n\r\n### Customized\r\n\r\n<Example value=\"customized\" />\r\n\r\n### 3D\r\n\r\n<Example value=\"three-dimensional\" />\r\n\r\n<LastModified />\r\n",
      "slots": [],
      "styles": [],
      "tags": [],
      "title": "Switch"
    },
    {
      "events": [
        {
          "cancelable": true,
          "deprecated": false,
          "description": "Fired when the value changes.",
          "detail": "EventEmitter<any>",
          "experimental": false,
          "model": false,
          "name": "plusChange",
          "tags": [
            {
              "key": "",
              "value": "Fired when the value changes."
            }
          ]
        }
      ],
      "deprecated": false,
      "description": "Organizes content across different screens.",
      "experimental": false,
      "key": "tabs",
      "lastModified": "2024-02-17T09:22:23.113Z",
      "methods": [],
      "parts": [],
      "properties": [
        {
          "attribute": "value",
          "deprecated": false,
          "description": "Provides your own value.",
          "experimental": false,
          "model": false,
          "name": "value",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Provides your own value."
            }
          ],
          "type": "any"
        },
        {
          "attribute": "vertical",
          "deprecated": false,
          "description": "You can use vertical property for vertical mode.",
          "experimental": false,
          "model": false,
          "name": "vertical",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "You can use vertical property for vertical mode."
            }
          ],
          "type": "boolean"
        },
        {
          "attribute": "connector",
          "deprecated": false,
          "description": "Panels are not always used inside tabs.They may be used outside, in which you can usethis property to connect them to their corresponding tabs.",
          "experimental": false,
          "model": false,
          "name": "connector",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Panels are not always used inside tabs.They may be used outside, in which you can usethis property to connect them to their corresponding tabs."
            }
          ],
          "type": "string"
        }
      ],
      "readmeContent": "# Tabs\r\n\r\nOrganizes content across different screens.\r\n\r\n<Playground />\r\n\r\n<Usage />\r\n\r\n<Api />\r\n\r\n<GlobalConfig />\r\n\r\n<Examples />\r\n\r\n### Default\r\n\r\n<Example value=\"default\" />\r\n\r\n### Grow\r\n\r\n<Example value=\"grow\" />\r\n\r\n### Justify\r\n\r\n<Example value=\"justify\" />\r\n\r\n### Reverse\r\n\r\n<Example value=\"reverse\" />\r\n\r\n### Separate\r\n\r\n<Example value=\"separate\" />\r\n\r\n### Below\r\n\r\n<Example value=\"below\" />\r\n\r\n### Vertical\r\n\r\n<Example value=\"vertical\" />\r\n\r\n<LastModified />\r\n",
      "slots": [
        {
          "name": "default",
          "description": "The default slot."
        }
      ],
      "styles": [],
      "tags": [
        {
          "key": "development",
          "value": ""
        }
      ],
      "title": "Tabs"
    },
    {
      "events": [],
      "deprecated": false,
      "description": "TODO: Arranges tabs within a bar.",
      "experimental": false,
      "key": "tabs-bar",
      "lastModified": "2024-02-17T09:22:23.100Z",
      "methods": [],
      "parts": [],
      "properties": [
        {
          "attribute": "grow",
          "deprecated": false,
          "description": "Grows tabs as much as all available space (occupies all horizontal space).",
          "experimental": false,
          "model": false,
          "name": "grow",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Grows tabs as much as all available space (occupies all horizontal space)."
            }
          ],
          "type": "boolean"
        },
        {
          "attribute": "justify",
          "deprecated": false,
          "description": "Specifies how the tabs are aligned.",
          "experimental": false,
          "initializer": "'start'",
          "model": false,
          "name": "justify",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies how the tabs are aligned."
            }
          ],
          "type": "'start' | 'center' | 'end'"
        },
        {
          "attribute": "reverse",
          "deprecated": false,
          "description": "Reverses the arrangement of the tabs.",
          "experimental": false,
          "model": false,
          "name": "reverse",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Reverses the arrangement of the tabs."
            }
          ],
          "type": "boolean"
        }
      ],
      "slots": [
        {
          "name": "default",
          "description": "The default slot."
        }
      ],
      "styles": [],
      "tags": [
        {
          "key": "",
          "value": "TODO: Arranges tabs within a bar."
        }
      ],
      "title": "Tabs Bar"
    },
    {
      "events": [],
      "deprecated": false,
      "description": "TODO: This element contains the contents of each tab and when the tab is activated the panel is displayed.",
      "experimental": false,
      "key": "tabs-panel",
      "lastModified": "2024-02-17T09:22:23.102Z",
      "methods": [],
      "parts": [],
      "properties": [
        {
          "attribute": "value",
          "deprecated": false,
          "description": "Provides your own value.",
          "experimental": false,
          "model": false,
          "name": "value",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Provides your own value."
            }
          ],
          "type": "any"
        }
      ],
      "slots": [
        {
          "name": "default",
          "description": "The default slot."
        }
      ],
      "styles": [],
      "tags": [
        {
          "key": "",
          "value": "TODO: This element contains the contents of each tab and when the tab is activated the panel is displayed."
        }
      ],
      "title": "Tabs Panel"
    },
    {
      "events": [],
      "deprecated": false,
      "description": "TODO: This element contains panels.",
      "experimental": false,
      "key": "tabs-panels",
      "lastModified": "2024-02-17T09:22:23.104Z",
      "methods": [],
      "parts": [],
      "properties": [
        {
          "attribute": "connector",
          "deprecated": false,
          "description": "Panels are not always used inside tabs.They may be used outside, in which you can use this property to connect them to their corresponding tabs.",
          "experimental": false,
          "model": false,
          "name": "connector",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Panels are not always used inside tabs.They may be used outside, in which you can use this property to connect them to their corresponding tabs."
            }
          ],
          "type": "string"
        }
      ],
      "slots": [
        {
          "name": "default",
          "description": "The default slot."
        }
      ],
      "styles": [],
      "tags": [
        {
          "key": "",
          "value": "TODO: This element contains panels."
        }
      ],
      "title": "Tabs Panels"
    },
    {
      "events": [],
      "deprecated": false,
      "description": "TODO: Tabs make it easy to switch between different views.",
      "experimental": false,
      "key": "tabs-tab",
      "lastModified": "2024-02-17T09:22:23.105Z",
      "methods": [],
      "parts": [],
      "properties": [
        {
          "attribute": "disabled",
          "deprecated": false,
          "description": "A Tab can be disabled by setting disabled property.",
          "experimental": false,
          "model": false,
          "name": "disabled",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "A Tab can be disabled by setting disabled property."
            }
          ],
          "type": "boolean"
        },
        {
          "attribute": "value",
          "deprecated": false,
          "description": "Provides your own value.",
          "experimental": false,
          "model": false,
          "name": "value",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Provides your own value."
            }
          ],
          "type": "any"
        }
      ],
      "slots": [
        {
          "name": "default",
          "description": "The default slot."
        }
      ],
      "styles": [],
      "tags": [
        {
          "key": "",
          "value": "TODO: Tabs make it easy to switch between different views."
        }
      ],
      "title": "Tabs Tab"
    },
    {
      "events": [],
      "deprecated": false,
      "description": "TODO.",
      "experimental": false,
      "key": "tooltip",
      "lastModified": "2024-02-17T09:22:23.121Z",
      "methods": [
        {
          "async": false,
          "description": "Hides the element.",
          "deprecated": false,
          "experimental": false,
          "name": "hide",
          "parameters": [],
          "returns": "void",
          "tags": [
            {
              "key": "",
              "value": "Hides the element."
            }
          ],
          "signature": "hide() => void"
        },
        {
          "async": false,
          "description": "Shows the element.",
          "deprecated": false,
          "experimental": false,
          "name": "show",
          "parameters": [],
          "returns": "void",
          "tags": [
            {
              "key": "",
              "value": "Shows the element."
            }
          ],
          "signature": "show() => void"
        },
        {
          "async": false,
          "description": "Updates the element's position.",
          "deprecated": false,
          "experimental": false,
          "name": "update",
          "parameters": [],
          "returns": "void",
          "tags": [
            {
              "key": "",
              "value": "Updates the element's position."
            }
          ],
          "signature": "update() => void"
        }
      ],
      "parts": [],
      "properties": [
        {
          "attribute": "arrow",
          "deprecated": false,
          "description": "Specifies whether to display the arrow or not.",
          "experimental": false,
          "model": false,
          "name": "arrow",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies whether to display the arrow or not."
            }
          ],
          "type": "boolean"
        },
        {
          "attribute": "delay",
          "deprecated": false,
          "description": "Specifies a delay in milliseconds for show or hide.Use a number for both show and hide orcreate an array of two separate numbers for show and hide.",
          "experimental": false,
          "model": false,
          "name": "delay",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies a delay in milliseconds for show or hide.Use a number for both show and hide orcreate an array of two separate numbers for show and hide."
            }
          ],
          "type": "TooltipDelay",
          "typeReference": "./tooltip.types"
        },
        {
          "attribute": "disabled",
          "deprecated": false,
          "description": "Disables the element functionality.",
          "experimental": false,
          "model": false,
          "name": "disabled",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Disables the element functionality."
            }
          ],
          "type": "boolean"
        },
        {
          "attribute": "fixed",
          "deprecated": false,
          "description": "TODO",
          "experimental": false,
          "model": false,
          "name": "fixed",
          "reflects": true,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "TODO"
            }
          ],
          "type": "boolean"
        },
        {
          "attribute": "offset",
          "deprecated": false,
          "description": "TODO",
          "experimental": false,
          "model": false,
          "name": "offset",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "TODO"
            }
          ],
          "type": "TooltipOffset",
          "typeReference": "./tooltip.types"
        },
        {
          "attribute": "placement",
          "deprecated": false,
          "description": "Specifies the display location of the element relative to the reference.",
          "experimental": false,
          "model": false,
          "name": "placement",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies the display location of the element relative to the reference."
            }
          ],
          "type": "TooltipPlacement",
          "typeReference": "./tooltip.types"
        },
        {
          "attribute": "reference",
          "deprecated": false,
          "description": "Specifies the element to which the tooltip will be attached.Use `next` to attach to the next sibling.Use `parent` to attach to the parent.Use `previous` to attach to the previous sibling.Use a string to find an element to attach to that.Use an element to attach to that.",
          "experimental": false,
          "initializer": "'previous'",
          "model": false,
          "name": "reference",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies the element to which the tooltip will be attached.Use `next` to attach to the next sibling.Use `parent` to attach to the parent.Use `previous` to attach to the previous sibling.Use a string to find an element to attach to that.Use an element to attach to that."
            }
          ],
          "type": "TooltipReference",
          "typeReference": "./tooltip.types"
        },
        {
          "attribute": "trigger",
          "deprecated": false,
          "description": "Specifies the activation method.",
          "experimental": false,
          "model": false,
          "name": "trigger",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "Specifies the activation method."
            }
          ],
          "type": "TooltipTrigger",
          "typeReference": "./tooltip.types"
        },
        {
          "attribute": "z",
          "deprecated": false,
          "description": "TODO",
          "experimental": false,
          "initializer": "'auto'",
          "model": false,
          "name": "z",
          "reflects": false,
          "required": false,
          "tags": [
            {
              "key": "",
              "value": "TODO"
            }
          ],
          "type": "'auto' | 'vertical' | 'horizontal' | 'move'"
        }
      ],
      "readmeContent": "# Tooltip\r\n\r\nTODO.\r\n\r\n<Playground />\r\n\r\n<Usage />\r\n\r\n<Api />\r\n\r\n<GlobalConfig />\r\n\r\n<Examples />\r\n\r\n### Default\r\n\r\n<Example value=\"default\" />\r\n\r\n<LastModified />\r\n",
      "slots": [],
      "styles": [],
      "tags": [
        {
          "key": "dependencies",
          "value": "@floating-ui/dom"
        },
        {
          "key": "thirdParty",
          "value": ""
        }
      ],
      "title": "Tooltip"
    }
  ]
}