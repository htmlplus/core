/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { DialogFullscreen, DialogPlacement, DialogSize } from "./components/dialog/dialog/dialog.types";
import { DrawerBackdrop, DrawerBreakpoint, DrawerPlacement } from "./components/drawer/drawer/drawer.types";
import { AlignContents, AlignItems, Gutters, Justifies, Wraps } from "./components/grid/grid/grid.types";
import { AlignSelfs, Columns, Offsets, Orders } from "./components/grid/grid-item/grid-item.types";
import { MenuAlignX, MenuAlignY, MenuGrowX, MenuGrowY } from "./components/menu/menu.types";
import { SpinnerSize, SpinnerType } from "./components/spinner/spinner.types";
import { TransitionDirection, TransitionDuration, TransitionPause, TransitionRepeat, TransitionStart } from "./components/transition/transition.types";
import { SubscribeType } from "./services/tunnel/tunnel.types";
export namespace Components {
    interface PlusAspectRatio {
        /**
          * Specifies the ratio.
         */
        "value"?: number | string;
    }
    interface PlusCard {
        /**
          * TODO
         */
        "tile"?: boolean;
    }
    interface PlusCardBody {
    }
    interface PlusCardFooter {
    }
    interface PlusCardHeader {
    }
    interface PlusDialog {
        /**
          * Activate the dialog’s backdrop to show or not.
         */
        "backdrop"?: boolean;
        /**
          * Used to connect dialog and dialog-action components. This property helps you to attach which dialog action controls the dialog. It doesn't matter where the dialog action is. You can put the dialog’s action inside or outside of the dialog. Read more about connectors here.
         */
        "connector"?: string;
        /**
          * Set the height of the dialog as much as the screen’s height.
         */
        "fullHeight"?: boolean;
        /**
          * Set the width of the dialog as much as the screen’s width.
         */
        "fullWidth"?: boolean;
        /**
          * Set both width and height of the dialog to occupy the screen size.
         */
        "fullscreen"?: DialogFullscreen;
        /**
          * Closes the dialog when `escape` key is pressed.
         */
        "keyboard"?: boolean;
        /**
          * Control dialog to show or not.
         */
        "open"?: boolean;
        /**
          * It prevents the dialog from closing on clicking outside of the element.
         */
        "persistent"?: boolean;
        /**
          * Specifies where to show the dialog box by choosing two values, one for horizontal and another for vertical. Horizontal has a range of `left`, `center`, `right`, `start`, `end`, and vertical values are `top`, `center` and `bottom`.
         */
        "placement"?: DialogPlacement;
        /**
          * It makes the user able to scroll the content by adding a scroll beside it.
         */
        "scrollable"?: boolean;
        /**
          * TODO
         */
        "size"?: DialogSize;
        /**
          * TODO
         */
        "sticky"?: boolean;
    }
    interface PlusDialogBody {
        /**
          * It makes the user able to scroll the content by adding a scroll beside it.
         */
        "scrollable"?: boolean;
    }
    interface PlusDialogContent {
        /**
          * It makes the user able to scroll the content by adding a scroll beside it.
         */
        "scrollable"?: boolean;
    }
    interface PlusDialogFooter {
    }
    interface PlusDialogHeader {
    }
    interface PlusDialogToggler {
        /**
          * TODO
         */
        "connector"?: string;
    }
    interface PlusDrawer {
        /**
          * Activate the drawer’s backdrop to show or not.
         */
        "backdrop"?: DrawerBackdrop;
        /**
          * TODO
         */
        "breakpoint"?: DrawerBreakpoint;
        /**
          * TODO
         */
        "connector"?: string;
        /**
          * TODO
         */
        "mini"?: boolean;
        /**
          * TODO
         */
        "miniSize"?: string;
        /**
          * Control drawer to show or not.
         */
        "open"?: boolean;
        /**
          * TODO
         */
        "persistent"?: boolean;
        /**
          * TODO
         */
        "placement"?: DrawerPlacement;
        /**
          * TODO
         */
        "reverse"?: boolean;
        /**
          * TODO
         */
        "size"?: string;
        /**
          * TODO
         */
        "temporary"?: boolean;
    }
    interface PlusDrawerToggler {
        /**
          * TODO
         */
        "connector"?: string;
    }
    interface PlusGrid {
        /**
          * Aligns contents vertically across all rows (It overrides alignItems).
         */
        "alignContent"?: AlignContents;
        /**
          * Aligns contents vertically across all rows for large display sizes (It overrides alignItemsLg).
         */
        "alignContentLg"?: AlignContents;
        /**
          * Aligns contents vertically across all rows for medium display sizes (It overrides alignItemsMd).
         */
        "alignContentMd"?: AlignContents;
        /**
          * Aligns contents vertically across all rows for small display sizes (It overrides alignItemsSm).
         */
        "alignContentSm"?: AlignContents;
        /**
          * Aligns contents vertically across all rows for extra-large display sizes (It overrides alignItemsXl).
         */
        "alignContentXl"?: AlignContents;
        /**
          * Aligns contents vertically across all rows for extra-small display sizes (It overrides alignItemsXs).
         */
        "alignContentXs"?: AlignContents;
        /**
          * Aligns contents vertically inside their own row.
         */
        "alignItems"?: AlignItems;
        /**
          * Aligns contents vertically inside their own row for large display sizes.
         */
        "alignItemsLg"?: AlignItems;
        /**
          * Aligns contents vertically inside their own row for medium display sizes.
         */
        "alignItemsMd"?: AlignItems;
        /**
          * Aligns contents vertically inside their own row for small display sizes.
         */
        "alignItemsSm"?: AlignItems;
        /**
          * Aligns contents vertically inside their own row for extra-large display sizes.
         */
        "alignItemsXl"?: AlignItems;
        /**
          * Aligns contents vertically inside their own row for extra-small display sizes.
         */
        "alignItemsXs"?: AlignItems;
        /**
          * Adds a gap between contents to make space between them vertically and horizontally.
         */
        "gutter"?: Gutters;
        /**
          * Adds a gap between contents to make space between them horizontally.
         */
        "gutterX"?: Gutters;
        /**
          * Adds a gap between contents to make space between them vertically.
         */
        "gutterY"?: Gutters;
        /**
          * Justifies contents horizontally.
         */
        "justify"?: Justifies;
        /**
          * Justifies contents horizontally for large display sizes.
         */
        "justifyLg"?: Justifies;
        /**
          * Justifies contents horizontally for medium display sizes.
         */
        "justifyMd"?: Justifies;
        /**
          * Justifies contents horizontally for small display sizes.
         */
        "justifySm"?: Justifies;
        /**
          * Justifies contents horizontally for extra-large display sizes.
         */
        "justifyXl"?: Justifies;
        /**
          * Justifies contents horizontally for extra-small display sizes.
         */
        "justifyXs"?: Justifies;
        /**
          * Reverses the flow of contents from left-to-right to right-to-left, or vice-versa.
         */
        "reverse"?: boolean;
        /**
          * Changes the flow of contents from left-to-right to top-to-down.
         */
        "vertical"?: boolean;
        /**
          * Controls allowing the container to wrap the content or not if the cumulative width size of contents is more than the twelve-column width.
         */
        "wrap"?: Wraps;
        /**
          * Controls allowing the container to wrap the content or not if the cumulative width size of contents is more than the twelve-column width for large screen devices.
         */
        "wrapLg"?: Wraps;
        /**
          * Controls allowing the container to wrap the content or not if the cumulative width size of contents is more than the twelve-column width for medium screen devices.
         */
        "wrapMd"?: Wraps;
        /**
          * Controls allowing the container to wrap the content or not if the cumulative width size of contents is more than the twelve-column width for small screen devices.
         */
        "wrapSm"?: Wraps;
        /**
          * Controls allowing the container to wrap the content or not if the cumulative width size of contents is more than the twelve-column width for extra-large screen devices.
         */
        "wrapXl"?: Wraps;
        /**
          * Controls allowing the container to wrap the content or not if the cumulative width size of contents is more than the twelve-column width for extra-small screen devices.
         */
        "wrapXs"?: Wraps;
    }
    interface PlusGridItem {
        /**
          * Aligns the grid-item vertically in its container (grid). It overrides the align-items property of its parent.
         */
        "alignSelf"?: AlignSelfs;
        /**
          * Aligns the grid-item vertically in its container (grid) for large display sizes. It also applies to larger breakpoints and display sizes while they are not specified. (It overrides the align-items property of its parent just for large breakpoints).
         */
        "alignSelfLg"?: AlignSelfs;
        /**
          * Aligns the grid-item vertically in its container (grid) for medium display sizes. It also applies to larger breakpoints and display sizes while they are not specified. (It overrides the align-items property of its parent just for medium breakpoints).
         */
        "alignSelfMd"?: AlignSelfs;
        /**
          * Aligns the grid-item vertically in its container (grid) for small display sizes. It also applies to larger breakpoints and display sizes while they are not specified. (It overrides the align-items property of its parent just for small breakpoints).
         */
        "alignSelfSm"?: AlignSelfs;
        /**
          * Aligns the grid-item vertically in its container (grid) for extra-large display sizes. It also applies to larger breakpoints and display sizes while they are not specified. (It overrides the align-items property of its parent just for extra-large breakpoints).
         */
        "alignSelfXl"?: AlignSelfs;
        /**
          * Aligns the grid-item vertically in its container (grid) for extra-small display sizes. It also applies to larger breakpoints and display sizes while they are not specified. (It overrides the align-items property of its parent just for extra-small breakpoints).
         */
        "alignSelfXs"?: AlignSelfs;
        /**
          * Hides the grid-item in all display sizes.
         */
        "hide"?: boolean;
        /**
          * Hides the grid-item in large display sizes (desktop).
         */
        "hideLg"?: boolean;
        /**
          * Hides the grid-item in large and smaller display sizes.
         */
        "hideLgDown"?: boolean;
        /**
          * Hides the grid-item in large and larger display sizes.
         */
        "hideLgUp"?: boolean;
        /**
          * Hides the grid-item in medium display sizes (tablets).
         */
        "hideMd"?: boolean;
        /**
          * Hides the grid-item in medium and smaller display sizes.
         */
        "hideMdDown"?: boolean;
        /**
          * Hides the grid-item in medium and larger display sizes.
         */
        "hideMdUp"?: boolean;
        /**
          * Hides the grid-item in small display sizes (smartphones).
         */
        "hideSm"?: boolean;
        /**
          * Hides the grid-item in small and smaller display sizes.
         */
        "hideSmDown"?: boolean;
        /**
          * Hides the grid-item in small and larger display sizes.
         */
        "hideSmUp"?: boolean;
        /**
          * Hides the grid-item in extra-large display sizes (wide desktop screen).
         */
        "hideXl"?: boolean;
        /**
          * Hides the grid-item in extra-small display sizes (mobile phones).
         */
        "hideXs"?: boolean;
        /**
          * Specifies the number of columns for large viewports (desktop). It also determines the number of columns for bigger display sizes when the upper breakpoint (xl) is not specified.
         */
        "lg"?: Columns;
        /**
          * Specifies the number of columns for medium viewports (tablets). It also determines the number of columns for bigger display sizes when other upper breakpoints (lg and xl) are not specified.
         */
        "md"?: Columns;
        /**
          * Adds an offset space before the grid-item for large display sizes. It also applies to the larger breakpoint (xl) while that is not specified.
         */
        "offsetLg"?: Offsets;
        /**
          * Adds an offset space before the grid-item for medium display sizes. It also applies to larger breakpoints and display sizes while they are not specified.
         */
        "offsetMd"?: Offsets;
        /**
          * Adds an offset space before the grid-item for small display sizes. It also applies to larger breakpoints and display sizes while they are not specified.
         */
        "offsetSm"?: Offsets;
        /**
          * Adds an offset space before the grid-item for extra-large display sizes.
         */
        "offsetXl"?: Offsets;
        /**
          * Adds an offset space before the grid-item for extra-small display sizes. It also applies to larger breakpoints and display sizes while they are not specified.
         */
        "offsetXs"?: Offsets;
        /**
          * Overrides the default order of the grid-item for large display sizes. It also applies to the larger breakpoint (xl) while that is not specified.
         */
        "orderLg"?: Orders;
        /**
          * Overrides the default order of the grid-item for medium display sizes. It also applies to larger breakpoints and display sizes while they are not specified.
         */
        "orderMd"?: Orders;
        /**
          * Overrides the default order of the grid-item for small display sizes. It also applies to larger breakpoints and display sizes while they are not specified.
         */
        "orderSm"?: Orders;
        /**
          * Overrides the default order of the grid-item for extra-large display sizes.
         */
        "orderXl"?: Orders;
        /**
          * Overrides the default order of the grid-item for extra-small display sizes. It also applies to larger breakpoints and display sizes while they are not specified.
         */
        "orderXs"?: Orders;
        /**
          * Specifies the number of columns for small viewports (smartphones). It also determines the number of columns for bigger display sizes when other upper breakpoints (md, lg, and xl) are not specified.
         */
        "sm"?: Columns;
        /**
          * Specifies the number of columns for extra-large viewports (wide desktop screen).
         */
        "xl"?: Columns;
        /**
          * Specifies the number of columns for extra-small viewports (mobile phones). It also determines the number of columns for bigger display sizes when other upper breakpoints (sm, md, lg, and xl) are not specified.
         */
        "xs"?: Columns;
    }
    interface PlusIntersection {
        /**
          * TODO
         */
        "once"?: boolean;
        /**
          * TODO
         */
        "root"?: Element;
        /**
          * TODO
         */
        "rootMargin"?: string;
        /**
          * TODO
         */
        "threshold"?: number | number[];
    }
    interface PlusMenu {
        /**
          * TODO
         */
        "alignX"?: MenuAlignX;
        /**
          * TODO
         */
        "alignY"?: MenuAlignY;
        /**
          * TODO
         */
        "fixed"?: boolean;
        /**
          * TODO
         */
        "growX"?: MenuGrowX;
        /**
          * TODO
         */
        "growY"?: MenuGrowY;
        /**
          * TODO
         */
        "offsetX"?: string | number;
        /**
          * TODO
         */
        "offsetY"?: string | number;
        /**
          * TODO
         */
        "open"?: boolean;
        /**
          * TODO
         */
        "persistent"?: boolean;
        /**
          * TODO
         */
        "trigger"?: 'click' | 'hover';
    }
    interface PlusOutsideClick {
        /**
          * TODO
         */
        "disabled"?: boolean;
        /**
          * TODO
         */
        "once"?: boolean;
    }
    interface PlusRipple {
    }
    interface PlusSpinner {
        /**
          * Specifies the size of the spinner.
         */
        "size"?: SpinnerSize;
        /**
          * Specifies which variant of the spinner to use.
         */
        "type"?: SpinnerType;
    }
    interface PlusSwitch {
        /**
          * Puts the switch in checked state
         */
        "checked"?: boolean;
        /**
          * Disables the switch
         */
        "disabled"?: boolean;
        /**
          * Change the appearance of the switch to put the text inside the switch
         */
        "inset"?: boolean;
        /**
          * Switches the location of yes and no options
         */
        "reverse"?: boolean;
    }
    interface PlusTabs {
        /**
          * TODO
         */
        "connector"?: string;
        /**
          * TODO
         */
        "value"?: string;
        /**
          * TODO
         */
        "vertical"?: boolean;
    }
    interface PlusTabsBar {
        /**
          * TODO
         */
        "grow"?: boolean;
        /**
          * TODO
         */
        "justify"?: 'start' | 'center' | 'end';
        /**
          * TODO
         */
        "reverse"?: boolean;
    }
    interface PlusTabsPanel {
        /**
          * TODO
         */
        "value"?: string;
    }
    interface PlusTabsPanels {
        /**
          * TODO
         */
        "connector"?: string;
    }
    interface PlusTabsTab {
        /**
          * TODO
         */
        "disabled"?: boolean;
        /**
          * TODO
         */
        "value"?: string;
    }
    interface PlusTransition {
        /**
          * TODO
         */
        "delay"?: string;
        /**
          * TODO
         */
        "direction"?: TransitionDirection;
        /**
          * TODO
         */
        "duration"?: TransitionDuration;
        /**
          * TODO
         */
        "name": string;
        /**
          * TODO
         */
        "pause"?: TransitionPause;
        /**
          * TODO
         */
        "repeat"?: TransitionRepeat;
        /**
          * TODO
         */
        "start"?: TransitionStart;
    }
    interface PlusTunnelConsumer {
        "context": { [key: string]: any };
        "renderer": Function;
        "subscribe"?: SubscribeType;
    }
}
declare global {
    interface HTMLPlusAspectRatioElement extends Components.PlusAspectRatio, HTMLStencilElement {
    }
    var HTMLPlusAspectRatioElement: {
        prototype: HTMLPlusAspectRatioElement;
        new (): HTMLPlusAspectRatioElement;
    };
    interface HTMLPlusCardElement extends Components.PlusCard, HTMLStencilElement {
    }
    var HTMLPlusCardElement: {
        prototype: HTMLPlusCardElement;
        new (): HTMLPlusCardElement;
    };
    interface HTMLPlusCardBodyElement extends Components.PlusCardBody, HTMLStencilElement {
    }
    var HTMLPlusCardBodyElement: {
        prototype: HTMLPlusCardBodyElement;
        new (): HTMLPlusCardBodyElement;
    };
    interface HTMLPlusCardFooterElement extends Components.PlusCardFooter, HTMLStencilElement {
    }
    var HTMLPlusCardFooterElement: {
        prototype: HTMLPlusCardFooterElement;
        new (): HTMLPlusCardFooterElement;
    };
    interface HTMLPlusCardHeaderElement extends Components.PlusCardHeader, HTMLStencilElement {
    }
    var HTMLPlusCardHeaderElement: {
        prototype: HTMLPlusCardHeaderElement;
        new (): HTMLPlusCardHeaderElement;
    };
    interface HTMLPlusDialogElement extends Components.PlusDialog, HTMLStencilElement {
    }
    var HTMLPlusDialogElement: {
        prototype: HTMLPlusDialogElement;
        new (): HTMLPlusDialogElement;
    };
    interface HTMLPlusDialogBodyElement extends Components.PlusDialogBody, HTMLStencilElement {
    }
    var HTMLPlusDialogBodyElement: {
        prototype: HTMLPlusDialogBodyElement;
        new (): HTMLPlusDialogBodyElement;
    };
    interface HTMLPlusDialogContentElement extends Components.PlusDialogContent, HTMLStencilElement {
    }
    var HTMLPlusDialogContentElement: {
        prototype: HTMLPlusDialogContentElement;
        new (): HTMLPlusDialogContentElement;
    };
    interface HTMLPlusDialogFooterElement extends Components.PlusDialogFooter, HTMLStencilElement {
    }
    var HTMLPlusDialogFooterElement: {
        prototype: HTMLPlusDialogFooterElement;
        new (): HTMLPlusDialogFooterElement;
    };
    interface HTMLPlusDialogHeaderElement extends Components.PlusDialogHeader, HTMLStencilElement {
    }
    var HTMLPlusDialogHeaderElement: {
        prototype: HTMLPlusDialogHeaderElement;
        new (): HTMLPlusDialogHeaderElement;
    };
    interface HTMLPlusDialogTogglerElement extends Components.PlusDialogToggler, HTMLStencilElement {
    }
    var HTMLPlusDialogTogglerElement: {
        prototype: HTMLPlusDialogTogglerElement;
        new (): HTMLPlusDialogTogglerElement;
    };
    interface HTMLPlusDrawerElement extends Components.PlusDrawer, HTMLStencilElement {
    }
    var HTMLPlusDrawerElement: {
        prototype: HTMLPlusDrawerElement;
        new (): HTMLPlusDrawerElement;
    };
    interface HTMLPlusDrawerTogglerElement extends Components.PlusDrawerToggler, HTMLStencilElement {
    }
    var HTMLPlusDrawerTogglerElement: {
        prototype: HTMLPlusDrawerTogglerElement;
        new (): HTMLPlusDrawerTogglerElement;
    };
    interface HTMLPlusGridElement extends Components.PlusGrid, HTMLStencilElement {
    }
    var HTMLPlusGridElement: {
        prototype: HTMLPlusGridElement;
        new (): HTMLPlusGridElement;
    };
    interface HTMLPlusGridItemElement extends Components.PlusGridItem, HTMLStencilElement {
    }
    var HTMLPlusGridItemElement: {
        prototype: HTMLPlusGridItemElement;
        new (): HTMLPlusGridItemElement;
    };
    interface HTMLPlusIntersectionElement extends Components.PlusIntersection, HTMLStencilElement {
    }
    var HTMLPlusIntersectionElement: {
        prototype: HTMLPlusIntersectionElement;
        new (): HTMLPlusIntersectionElement;
    };
    interface HTMLPlusMenuElement extends Components.PlusMenu, HTMLStencilElement {
    }
    var HTMLPlusMenuElement: {
        prototype: HTMLPlusMenuElement;
        new (): HTMLPlusMenuElement;
    };
    interface HTMLPlusOutsideClickElement extends Components.PlusOutsideClick, HTMLStencilElement {
    }
    var HTMLPlusOutsideClickElement: {
        prototype: HTMLPlusOutsideClickElement;
        new (): HTMLPlusOutsideClickElement;
    };
    interface HTMLPlusRippleElement extends Components.PlusRipple, HTMLStencilElement {
    }
    var HTMLPlusRippleElement: {
        prototype: HTMLPlusRippleElement;
        new (): HTMLPlusRippleElement;
    };
    interface HTMLPlusSpinnerElement extends Components.PlusSpinner, HTMLStencilElement {
    }
    var HTMLPlusSpinnerElement: {
        prototype: HTMLPlusSpinnerElement;
        new (): HTMLPlusSpinnerElement;
    };
    interface HTMLPlusSwitchElement extends Components.PlusSwitch, HTMLStencilElement {
    }
    var HTMLPlusSwitchElement: {
        prototype: HTMLPlusSwitchElement;
        new (): HTMLPlusSwitchElement;
    };
    interface HTMLPlusTabsElement extends Components.PlusTabs, HTMLStencilElement {
    }
    var HTMLPlusTabsElement: {
        prototype: HTMLPlusTabsElement;
        new (): HTMLPlusTabsElement;
    };
    interface HTMLPlusTabsBarElement extends Components.PlusTabsBar, HTMLStencilElement {
    }
    var HTMLPlusTabsBarElement: {
        prototype: HTMLPlusTabsBarElement;
        new (): HTMLPlusTabsBarElement;
    };
    interface HTMLPlusTabsPanelElement extends Components.PlusTabsPanel, HTMLStencilElement {
    }
    var HTMLPlusTabsPanelElement: {
        prototype: HTMLPlusTabsPanelElement;
        new (): HTMLPlusTabsPanelElement;
    };
    interface HTMLPlusTabsPanelsElement extends Components.PlusTabsPanels, HTMLStencilElement {
    }
    var HTMLPlusTabsPanelsElement: {
        prototype: HTMLPlusTabsPanelsElement;
        new (): HTMLPlusTabsPanelsElement;
    };
    interface HTMLPlusTabsTabElement extends Components.PlusTabsTab, HTMLStencilElement {
    }
    var HTMLPlusTabsTabElement: {
        prototype: HTMLPlusTabsTabElement;
        new (): HTMLPlusTabsTabElement;
    };
    interface HTMLPlusTransitionElement extends Components.PlusTransition, HTMLStencilElement {
    }
    var HTMLPlusTransitionElement: {
        prototype: HTMLPlusTransitionElement;
        new (): HTMLPlusTransitionElement;
    };
    interface HTMLPlusTunnelConsumerElement extends Components.PlusTunnelConsumer, HTMLStencilElement {
    }
    var HTMLPlusTunnelConsumerElement: {
        prototype: HTMLPlusTunnelConsumerElement;
        new (): HTMLPlusTunnelConsumerElement;
    };
    interface HTMLElementTagNameMap {
        "plus-aspect-ratio": HTMLPlusAspectRatioElement;
        "plus-card": HTMLPlusCardElement;
        "plus-card-body": HTMLPlusCardBodyElement;
        "plus-card-footer": HTMLPlusCardFooterElement;
        "plus-card-header": HTMLPlusCardHeaderElement;
        "plus-dialog": HTMLPlusDialogElement;
        "plus-dialog-body": HTMLPlusDialogBodyElement;
        "plus-dialog-content": HTMLPlusDialogContentElement;
        "plus-dialog-footer": HTMLPlusDialogFooterElement;
        "plus-dialog-header": HTMLPlusDialogHeaderElement;
        "plus-dialog-toggler": HTMLPlusDialogTogglerElement;
        "plus-drawer": HTMLPlusDrawerElement;
        "plus-drawer-toggler": HTMLPlusDrawerTogglerElement;
        "plus-grid": HTMLPlusGridElement;
        "plus-grid-item": HTMLPlusGridItemElement;
        "plus-intersection": HTMLPlusIntersectionElement;
        "plus-menu": HTMLPlusMenuElement;
        "plus-outside-click": HTMLPlusOutsideClickElement;
        "plus-ripple": HTMLPlusRippleElement;
        "plus-spinner": HTMLPlusSpinnerElement;
        "plus-switch": HTMLPlusSwitchElement;
        "plus-tabs": HTMLPlusTabsElement;
        "plus-tabs-bar": HTMLPlusTabsBarElement;
        "plus-tabs-panel": HTMLPlusTabsPanelElement;
        "plus-tabs-panels": HTMLPlusTabsPanelsElement;
        "plus-tabs-tab": HTMLPlusTabsTabElement;
        "plus-transition": HTMLPlusTransitionElement;
        "plus-tunnel-consumer": HTMLPlusTunnelConsumerElement;
    }
}
declare namespace LocalJSX {
    interface PlusAspectRatio {
        /**
          * Specifies the ratio.
         */
        "value"?: number | string;
    }
    interface PlusCard {
        /**
          * TODO
         */
        "tile"?: boolean;
    }
    interface PlusCardBody {
    }
    interface PlusCardFooter {
    }
    interface PlusCardHeader {
    }
    interface PlusDialog {
        /**
          * Activate the dialog’s backdrop to show or not.
         */
        "backdrop"?: boolean;
        /**
          * Used to connect dialog and dialog-action components. This property helps you to attach which dialog action controls the dialog. It doesn't matter where the dialog action is. You can put the dialog’s action inside or outside of the dialog. Read more about connectors here.
         */
        "connector"?: string;
        /**
          * Set the height of the dialog as much as the screen’s height.
         */
        "fullHeight"?: boolean;
        /**
          * Set the width of the dialog as much as the screen’s width.
         */
        "fullWidth"?: boolean;
        /**
          * Set both width and height of the dialog to occupy the screen size.
         */
        "fullscreen"?: DialogFullscreen;
        /**
          * Closes the dialog when `escape` key is pressed.
         */
        "keyboard"?: boolean;
        /**
          * When the dialog is going to hide
         */
        "onPlusClose"?: (event: CustomEvent<void>) => void;
        /**
          * When the dialog is completely closed and its animation is completed.
         */
        "onPlusClosed"?: (event: CustomEvent<void>) => void;
        /**
          * When the dialog is going to show this event triggers
         */
        "onPlusOpen"?: (event: CustomEvent<void>) => void;
        /**
          * When the dialog is completely shown and its animation is completed.
         */
        "onPlusOpened"?: (event: CustomEvent<void>) => void;
        /**
          * Control dialog to show or not.
         */
        "open"?: boolean;
        /**
          * It prevents the dialog from closing on clicking outside of the element.
         */
        "persistent"?: boolean;
        /**
          * Specifies where to show the dialog box by choosing two values, one for horizontal and another for vertical. Horizontal has a range of `left`, `center`, `right`, `start`, `end`, and vertical values are `top`, `center` and `bottom`.
         */
        "placement"?: DialogPlacement;
        /**
          * It makes the user able to scroll the content by adding a scroll beside it.
         */
        "scrollable"?: boolean;
        /**
          * TODO
         */
        "size"?: DialogSize;
        /**
          * TODO
         */
        "sticky"?: boolean;
    }
    interface PlusDialogBody {
        /**
          * It makes the user able to scroll the content by adding a scroll beside it.
         */
        "scrollable"?: boolean;
    }
    interface PlusDialogContent {
        /**
          * It makes the user able to scroll the content by adding a scroll beside it.
         */
        "scrollable"?: boolean;
    }
    interface PlusDialogFooter {
    }
    interface PlusDialogHeader {
    }
    interface PlusDialogToggler {
        /**
          * TODO
         */
        "connector"?: string;
    }
    interface PlusDrawer {
        /**
          * Activate the drawer’s backdrop to show or not.
         */
        "backdrop"?: DrawerBackdrop;
        /**
          * TODO
         */
        "breakpoint"?: DrawerBreakpoint;
        /**
          * TODO
         */
        "connector"?: string;
        /**
          * TODO
         */
        "mini"?: boolean;
        /**
          * TODO
         */
        "miniSize"?: string;
        /**
          * When the drawer is going to hide
         */
        "onPlusClose"?: (event: CustomEvent<void>) => void;
        /**
          * When the drawer is completely closed and its animation is completed.
         */
        "onPlusClosed"?: (event: CustomEvent<void>) => void;
        /**
          * When the drawer is going to show this event triggers
         */
        "onPlusOpen"?: (event: CustomEvent<void>) => void;
        /**
          * When the drawer is completely shown and its animation is completed.
         */
        "onPlusOpened"?: (event: CustomEvent<void>) => void;
        /**
          * Control drawer to show or not.
         */
        "open"?: boolean;
        /**
          * TODO
         */
        "persistent"?: boolean;
        /**
          * TODO
         */
        "placement"?: DrawerPlacement;
        /**
          * TODO
         */
        "reverse"?: boolean;
        /**
          * TODO
         */
        "size"?: string;
        /**
          * TODO
         */
        "temporary"?: boolean;
    }
    interface PlusDrawerToggler {
        /**
          * TODO
         */
        "connector"?: string;
    }
    interface PlusGrid {
        /**
          * Aligns contents vertically across all rows (It overrides alignItems).
         */
        "alignContent"?: AlignContents;
        /**
          * Aligns contents vertically across all rows for large display sizes (It overrides alignItemsLg).
         */
        "alignContentLg"?: AlignContents;
        /**
          * Aligns contents vertically across all rows for medium display sizes (It overrides alignItemsMd).
         */
        "alignContentMd"?: AlignContents;
        /**
          * Aligns contents vertically across all rows for small display sizes (It overrides alignItemsSm).
         */
        "alignContentSm"?: AlignContents;
        /**
          * Aligns contents vertically across all rows for extra-large display sizes (It overrides alignItemsXl).
         */
        "alignContentXl"?: AlignContents;
        /**
          * Aligns contents vertically across all rows for extra-small display sizes (It overrides alignItemsXs).
         */
        "alignContentXs"?: AlignContents;
        /**
          * Aligns contents vertically inside their own row.
         */
        "alignItems"?: AlignItems;
        /**
          * Aligns contents vertically inside their own row for large display sizes.
         */
        "alignItemsLg"?: AlignItems;
        /**
          * Aligns contents vertically inside their own row for medium display sizes.
         */
        "alignItemsMd"?: AlignItems;
        /**
          * Aligns contents vertically inside their own row for small display sizes.
         */
        "alignItemsSm"?: AlignItems;
        /**
          * Aligns contents vertically inside their own row for extra-large display sizes.
         */
        "alignItemsXl"?: AlignItems;
        /**
          * Aligns contents vertically inside their own row for extra-small display sizes.
         */
        "alignItemsXs"?: AlignItems;
        /**
          * Adds a gap between contents to make space between them vertically and horizontally.
         */
        "gutter"?: Gutters;
        /**
          * Adds a gap between contents to make space between them horizontally.
         */
        "gutterX"?: Gutters;
        /**
          * Adds a gap between contents to make space between them vertically.
         */
        "gutterY"?: Gutters;
        /**
          * Justifies contents horizontally.
         */
        "justify"?: Justifies;
        /**
          * Justifies contents horizontally for large display sizes.
         */
        "justifyLg"?: Justifies;
        /**
          * Justifies contents horizontally for medium display sizes.
         */
        "justifyMd"?: Justifies;
        /**
          * Justifies contents horizontally for small display sizes.
         */
        "justifySm"?: Justifies;
        /**
          * Justifies contents horizontally for extra-large display sizes.
         */
        "justifyXl"?: Justifies;
        /**
          * Justifies contents horizontally for extra-small display sizes.
         */
        "justifyXs"?: Justifies;
        /**
          * Reverses the flow of contents from left-to-right to right-to-left, or vice-versa.
         */
        "reverse"?: boolean;
        /**
          * Changes the flow of contents from left-to-right to top-to-down.
         */
        "vertical"?: boolean;
        /**
          * Controls allowing the container to wrap the content or not if the cumulative width size of contents is more than the twelve-column width.
         */
        "wrap"?: Wraps;
        /**
          * Controls allowing the container to wrap the content or not if the cumulative width size of contents is more than the twelve-column width for large screen devices.
         */
        "wrapLg"?: Wraps;
        /**
          * Controls allowing the container to wrap the content or not if the cumulative width size of contents is more than the twelve-column width for medium screen devices.
         */
        "wrapMd"?: Wraps;
        /**
          * Controls allowing the container to wrap the content or not if the cumulative width size of contents is more than the twelve-column width for small screen devices.
         */
        "wrapSm"?: Wraps;
        /**
          * Controls allowing the container to wrap the content or not if the cumulative width size of contents is more than the twelve-column width for extra-large screen devices.
         */
        "wrapXl"?: Wraps;
        /**
          * Controls allowing the container to wrap the content or not if the cumulative width size of contents is more than the twelve-column width for extra-small screen devices.
         */
        "wrapXs"?: Wraps;
    }
    interface PlusGridItem {
        /**
          * Aligns the grid-item vertically in its container (grid). It overrides the align-items property of its parent.
         */
        "alignSelf"?: AlignSelfs;
        /**
          * Aligns the grid-item vertically in its container (grid) for large display sizes. It also applies to larger breakpoints and display sizes while they are not specified. (It overrides the align-items property of its parent just for large breakpoints).
         */
        "alignSelfLg"?: AlignSelfs;
        /**
          * Aligns the grid-item vertically in its container (grid) for medium display sizes. It also applies to larger breakpoints and display sizes while they are not specified. (It overrides the align-items property of its parent just for medium breakpoints).
         */
        "alignSelfMd"?: AlignSelfs;
        /**
          * Aligns the grid-item vertically in its container (grid) for small display sizes. It also applies to larger breakpoints and display sizes while they are not specified. (It overrides the align-items property of its parent just for small breakpoints).
         */
        "alignSelfSm"?: AlignSelfs;
        /**
          * Aligns the grid-item vertically in its container (grid) for extra-large display sizes. It also applies to larger breakpoints and display sizes while they are not specified. (It overrides the align-items property of its parent just for extra-large breakpoints).
         */
        "alignSelfXl"?: AlignSelfs;
        /**
          * Aligns the grid-item vertically in its container (grid) for extra-small display sizes. It also applies to larger breakpoints and display sizes while they are not specified. (It overrides the align-items property of its parent just for extra-small breakpoints).
         */
        "alignSelfXs"?: AlignSelfs;
        /**
          * Hides the grid-item in all display sizes.
         */
        "hide"?: boolean;
        /**
          * Hides the grid-item in large display sizes (desktop).
         */
        "hideLg"?: boolean;
        /**
          * Hides the grid-item in large and smaller display sizes.
         */
        "hideLgDown"?: boolean;
        /**
          * Hides the grid-item in large and larger display sizes.
         */
        "hideLgUp"?: boolean;
        /**
          * Hides the grid-item in medium display sizes (tablets).
         */
        "hideMd"?: boolean;
        /**
          * Hides the grid-item in medium and smaller display sizes.
         */
        "hideMdDown"?: boolean;
        /**
          * Hides the grid-item in medium and larger display sizes.
         */
        "hideMdUp"?: boolean;
        /**
          * Hides the grid-item in small display sizes (smartphones).
         */
        "hideSm"?: boolean;
        /**
          * Hides the grid-item in small and smaller display sizes.
         */
        "hideSmDown"?: boolean;
        /**
          * Hides the grid-item in small and larger display sizes.
         */
        "hideSmUp"?: boolean;
        /**
          * Hides the grid-item in extra-large display sizes (wide desktop screen).
         */
        "hideXl"?: boolean;
        /**
          * Hides the grid-item in extra-small display sizes (mobile phones).
         */
        "hideXs"?: boolean;
        /**
          * Specifies the number of columns for large viewports (desktop). It also determines the number of columns for bigger display sizes when the upper breakpoint (xl) is not specified.
         */
        "lg"?: Columns;
        /**
          * Specifies the number of columns for medium viewports (tablets). It also determines the number of columns for bigger display sizes when other upper breakpoints (lg and xl) are not specified.
         */
        "md"?: Columns;
        /**
          * Adds an offset space before the grid-item for large display sizes. It also applies to the larger breakpoint (xl) while that is not specified.
         */
        "offsetLg"?: Offsets;
        /**
          * Adds an offset space before the grid-item for medium display sizes. It also applies to larger breakpoints and display sizes while they are not specified.
         */
        "offsetMd"?: Offsets;
        /**
          * Adds an offset space before the grid-item for small display sizes. It also applies to larger breakpoints and display sizes while they are not specified.
         */
        "offsetSm"?: Offsets;
        /**
          * Adds an offset space before the grid-item for extra-large display sizes.
         */
        "offsetXl"?: Offsets;
        /**
          * Adds an offset space before the grid-item for extra-small display sizes. It also applies to larger breakpoints and display sizes while they are not specified.
         */
        "offsetXs"?: Offsets;
        /**
          * Overrides the default order of the grid-item for large display sizes. It also applies to the larger breakpoint (xl) while that is not specified.
         */
        "orderLg"?: Orders;
        /**
          * Overrides the default order of the grid-item for medium display sizes. It also applies to larger breakpoints and display sizes while they are not specified.
         */
        "orderMd"?: Orders;
        /**
          * Overrides the default order of the grid-item for small display sizes. It also applies to larger breakpoints and display sizes while they are not specified.
         */
        "orderSm"?: Orders;
        /**
          * Overrides the default order of the grid-item for extra-large display sizes.
         */
        "orderXl"?: Orders;
        /**
          * Overrides the default order of the grid-item for extra-small display sizes. It also applies to larger breakpoints and display sizes while they are not specified.
         */
        "orderXs"?: Orders;
        /**
          * Specifies the number of columns for small viewports (smartphones). It also determines the number of columns for bigger display sizes when other upper breakpoints (md, lg, and xl) are not specified.
         */
        "sm"?: Columns;
        /**
          * Specifies the number of columns for extra-large viewports (wide desktop screen).
         */
        "xl"?: Columns;
        /**
          * Specifies the number of columns for extra-small viewports (mobile phones). It also determines the number of columns for bigger display sizes when other upper breakpoints (sm, md, lg, and xl) are not specified.
         */
        "xs"?: Columns;
    }
    interface PlusIntersection {
        /**
          * TODO
         */
        "onPlusChange"?: (event: CustomEvent<IntersectionObserverEntry>) => void;
        /**
          * TODO
         */
        "once"?: boolean;
        /**
          * TODO
         */
        "root"?: Element;
        /**
          * TODO
         */
        "rootMargin"?: string;
        /**
          * TODO
         */
        "threshold"?: number | number[];
    }
    interface PlusMenu {
        /**
          * TODO
         */
        "alignX"?: MenuAlignX;
        /**
          * TODO
         */
        "alignY"?: MenuAlignY;
        /**
          * TODO
         */
        "fixed"?: boolean;
        /**
          * TODO
         */
        "growX"?: MenuGrowX;
        /**
          * TODO
         */
        "growY"?: MenuGrowY;
        /**
          * TODO
         */
        "offsetX"?: string | number;
        /**
          * TODO
         */
        "offsetY"?: string | number;
        /**
          * TODO
         */
        "onPlusClose"?: (event: CustomEvent<any>) => void;
        /**
          * TODO
         */
        "open"?: boolean;
        /**
          * TODO
         */
        "persistent"?: boolean;
        /**
          * TODO
         */
        "trigger"?: 'click' | 'hover';
    }
    interface PlusOutsideClick {
        /**
          * TODO
         */
        "disabled"?: boolean;
        /**
          * TODO
         */
        "onPlusOutsideClick"?: (event: CustomEvent<any>) => void;
        /**
          * TODO
         */
        "once"?: boolean;
    }
    interface PlusRipple {
    }
    interface PlusSpinner {
        /**
          * Specifies the size of the spinner.
         */
        "size"?: SpinnerSize;
        /**
          * Specifies which variant of the spinner to use.
         */
        "type"?: SpinnerType;
    }
    interface PlusSwitch {
        /**
          * Puts the switch in checked state
         */
        "checked"?: boolean;
        /**
          * Disables the switch
         */
        "disabled"?: boolean;
        /**
          * Change the appearance of the switch to put the text inside the switch
         */
        "inset"?: boolean;
        /**
          * When the switch state is changed this event triggers.
         */
        "onPlusChange"?: (event: CustomEvent<void>) => void;
        /**
          * Switches the location of yes and no options
         */
        "reverse"?: boolean;
    }
    interface PlusTabs {
        /**
          * TODO
         */
        "connector"?: string;
        /**
          * TODO
         */
        "onWowChange"?: (event: CustomEvent<any>) => void;
        /**
          * TODO
         */
        "value"?: string;
        /**
          * TODO
         */
        "vertical"?: boolean;
    }
    interface PlusTabsBar {
        /**
          * TODO
         */
        "grow"?: boolean;
        /**
          * TODO
         */
        "justify"?: 'start' | 'center' | 'end';
        /**
          * TODO
         */
        "reverse"?: boolean;
    }
    interface PlusTabsPanel {
        /**
          * TODO
         */
        "value"?: string;
    }
    interface PlusTabsPanels {
        /**
          * TODO
         */
        "connector"?: string;
    }
    interface PlusTabsTab {
        /**
          * TODO
         */
        "disabled"?: boolean;
        /**
          * TODO
         */
        "value"?: string;
    }
    interface PlusTransition {
        /**
          * TODO
         */
        "delay"?: string;
        /**
          * TODO
         */
        "direction"?: TransitionDirection;
        /**
          * TODO
         */
        "duration"?: TransitionDuration;
        /**
          * TODO
         */
        "name"?: string;
        /**
          * TODO
         */
        "onPlusCancel"?: (event: CustomEvent<any>) => void;
        /**
          * TODO
         */
        "onPlusEnd"?: (event: CustomEvent<any>) => void;
        /**
          * TODO
         */
        "onPlusIteration"?: (event: CustomEvent<any>) => void;
        /**
          * TODO
         */
        "onPlusStart"?: (event: CustomEvent<any>) => void;
        /**
          * TODO
         */
        "pause"?: TransitionPause;
        /**
          * TODO
         */
        "repeat"?: TransitionRepeat;
        /**
          * TODO
         */
        "start"?: TransitionStart;
    }
    interface PlusTunnelConsumer {
        "context"?: { [key: string]: any };
        "renderer"?: Function;
        "subscribe"?: SubscribeType;
    }
    interface IntrinsicElements {
        "plus-aspect-ratio": PlusAspectRatio;
        "plus-card": PlusCard;
        "plus-card-body": PlusCardBody;
        "plus-card-footer": PlusCardFooter;
        "plus-card-header": PlusCardHeader;
        "plus-dialog": PlusDialog;
        "plus-dialog-body": PlusDialogBody;
        "plus-dialog-content": PlusDialogContent;
        "plus-dialog-footer": PlusDialogFooter;
        "plus-dialog-header": PlusDialogHeader;
        "plus-dialog-toggler": PlusDialogToggler;
        "plus-drawer": PlusDrawer;
        "plus-drawer-toggler": PlusDrawerToggler;
        "plus-grid": PlusGrid;
        "plus-grid-item": PlusGridItem;
        "plus-intersection": PlusIntersection;
        "plus-menu": PlusMenu;
        "plus-outside-click": PlusOutsideClick;
        "plus-ripple": PlusRipple;
        "plus-spinner": PlusSpinner;
        "plus-switch": PlusSwitch;
        "plus-tabs": PlusTabs;
        "plus-tabs-bar": PlusTabsBar;
        "plus-tabs-panel": PlusTabsPanel;
        "plus-tabs-panels": PlusTabsPanels;
        "plus-tabs-tab": PlusTabsTab;
        "plus-transition": PlusTransition;
        "plus-tunnel-consumer": PlusTunnelConsumer;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "plus-aspect-ratio": LocalJSX.PlusAspectRatio & JSXBase.HTMLAttributes<HTMLPlusAspectRatioElement>;
            "plus-card": LocalJSX.PlusCard & JSXBase.HTMLAttributes<HTMLPlusCardElement>;
            "plus-card-body": LocalJSX.PlusCardBody & JSXBase.HTMLAttributes<HTMLPlusCardBodyElement>;
            "plus-card-footer": LocalJSX.PlusCardFooter & JSXBase.HTMLAttributes<HTMLPlusCardFooterElement>;
            "plus-card-header": LocalJSX.PlusCardHeader & JSXBase.HTMLAttributes<HTMLPlusCardHeaderElement>;
            "plus-dialog": LocalJSX.PlusDialog & JSXBase.HTMLAttributes<HTMLPlusDialogElement>;
            "plus-dialog-body": LocalJSX.PlusDialogBody & JSXBase.HTMLAttributes<HTMLPlusDialogBodyElement>;
            "plus-dialog-content": LocalJSX.PlusDialogContent & JSXBase.HTMLAttributes<HTMLPlusDialogContentElement>;
            "plus-dialog-footer": LocalJSX.PlusDialogFooter & JSXBase.HTMLAttributes<HTMLPlusDialogFooterElement>;
            "plus-dialog-header": LocalJSX.PlusDialogHeader & JSXBase.HTMLAttributes<HTMLPlusDialogHeaderElement>;
            "plus-dialog-toggler": LocalJSX.PlusDialogToggler & JSXBase.HTMLAttributes<HTMLPlusDialogTogglerElement>;
            "plus-drawer": LocalJSX.PlusDrawer & JSXBase.HTMLAttributes<HTMLPlusDrawerElement>;
            "plus-drawer-toggler": LocalJSX.PlusDrawerToggler & JSXBase.HTMLAttributes<HTMLPlusDrawerTogglerElement>;
            "plus-grid": LocalJSX.PlusGrid & JSXBase.HTMLAttributes<HTMLPlusGridElement>;
            "plus-grid-item": LocalJSX.PlusGridItem & JSXBase.HTMLAttributes<HTMLPlusGridItemElement>;
            "plus-intersection": LocalJSX.PlusIntersection & JSXBase.HTMLAttributes<HTMLPlusIntersectionElement>;
            "plus-menu": LocalJSX.PlusMenu & JSXBase.HTMLAttributes<HTMLPlusMenuElement>;
            "plus-outside-click": LocalJSX.PlusOutsideClick & JSXBase.HTMLAttributes<HTMLPlusOutsideClickElement>;
            "plus-ripple": LocalJSX.PlusRipple & JSXBase.HTMLAttributes<HTMLPlusRippleElement>;
            "plus-spinner": LocalJSX.PlusSpinner & JSXBase.HTMLAttributes<HTMLPlusSpinnerElement>;
            "plus-switch": LocalJSX.PlusSwitch & JSXBase.HTMLAttributes<HTMLPlusSwitchElement>;
            "plus-tabs": LocalJSX.PlusTabs & JSXBase.HTMLAttributes<HTMLPlusTabsElement>;
            "plus-tabs-bar": LocalJSX.PlusTabsBar & JSXBase.HTMLAttributes<HTMLPlusTabsBarElement>;
            "plus-tabs-panel": LocalJSX.PlusTabsPanel & JSXBase.HTMLAttributes<HTMLPlusTabsPanelElement>;
            "plus-tabs-panels": LocalJSX.PlusTabsPanels & JSXBase.HTMLAttributes<HTMLPlusTabsPanelsElement>;
            "plus-tabs-tab": LocalJSX.PlusTabsTab & JSXBase.HTMLAttributes<HTMLPlusTabsTabElement>;
            "plus-transition": LocalJSX.PlusTransition & JSXBase.HTMLAttributes<HTMLPlusTransitionElement>;
            "plus-tunnel-consumer": LocalJSX.PlusTunnelConsumer & JSXBase.HTMLAttributes<HTMLPlusTunnelConsumerElement>;
        }
    }
}
