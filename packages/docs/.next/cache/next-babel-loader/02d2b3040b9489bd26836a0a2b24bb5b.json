{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useMemo, useState } from 'react';\nimport { Example, Markup, Page, Parameters, Section, Text, PlusGrid, PlusGridItem, PlusTabs, PlusTabsBar, PlusTabsPanel, PlusTabsPanels, PlusTabsTab } from 'components';\nimport { components } from 'data';\nimport { useStore } from 'hooks';\nimport { observer } from 'mobx-react-lite';\nimport { Utils } from 'utils'; // TODO\n\nimport items from '@htmlplus/examples'; // TODO\n\nexport const ComponentDetails = observer(({\n  item\n}) => {\n  const store = useStore();\n  const {\n    0: selected,\n    1: setSelected\n  } = useState(undefined);\n  const parent = item;\n  const children = useMemo(() => {\n    const result = [];\n    result.push(parent);\n    components.filter(component => !component.main && component.group === (parent === null || parent === void 0 ? void 0 : parent.group)).map(component => result.push(component));\n    return result;\n  }, [parent]);\n  const current = useMemo(() => {\n    return components.find(({\n      key\n    }) => key === (selected || (parent === null || parent === void 0 ? void 0 : parent.key)));\n  }, [parent, selected]);\n  const tabs = useMemo(() => {\n    const {\n      properties,\n      slots,\n      events,\n      styles,\n      methods\n    } = current;\n    return [{\n      key: 'properties',\n      value: 'Properties',\n      items: properties.map(property => {\n        return _objectSpread(_objectSpread({}, property), {}, {\n          name: store.ui.framework === 'react' ? Utils.toCamelCase(property.name) : property.name\n        });\n      })\n    }, {\n      key: 'slots',\n      value: 'Slots',\n      items: slots\n    }, {\n      key: 'events',\n      value: 'Events',\n      items: events.map(event => _objectSpread(_objectSpread({}, event), {}, {\n        value: event.detail,\n        // TODO\n        name: `on${process.env.PLATFORM_EVENT_PREFIX}${Utils.toCapitalCase(event.name)}`\n      }))\n    }, {\n      key: 'styles',\n      value: 'Styles',\n      items: styles\n    }, {\n      key: 'methods',\n      value: 'Methods',\n      items: methods.map(method => _objectSpread(_objectSpread({}, method), {}, {\n        value: method.signature\n      }))\n    }];\n  }, [current, store.ui.framework]); // TODO:\n\n  const examples = useMemo(() => {\n    const examples = [];\n    const current = items.find(example => example.key === parent.key);\n    parent.examples.map(example => {\n      var _example$codes$find;\n\n      example = JSON.parse(JSON.stringify(example));\n      const item = current.examples.find(x => x.key === example.key);\n      const preview = item.ports.preview.script;\n      const port = item.ports[store.ui.framework];\n      const style = ((_example$codes$find = example.codes.find(code => code.key === 'style')) === null || _example$codes$find === void 0 ? void 0 : _example$codes$find.value) || '';\n      example.code = _objectSpread(_objectSpread({\n        preview\n      }, port), {}, {\n        style\n      });\n      examples.push(example);\n    });\n    return examples;\n  }, [store.ui.framework, parent.key]);\n\n  const isDisabled = key => !current[key].length;\n\n  const isActive = key => (tabs.find(tab => !isDisabled(tab.key)) || {}).key === key;\n\n  const hasApi = !!tabs.filter(tab => isActive(tab.key)).length;\n  const hasExamples = !!examples.length;\n  const hasReadme = !!parent.readme;\n  if (!current) return null;\n  return __jsx(Page, {\n    layout: \"default\"\n  }, process.env.GLOBAL_CONFIG_NAME, __jsx(Section, {\n    size: \"page\"\n  }, __jsx(Text, null, parent.title), __jsx(Markup, null, parent.description)), hasReadme && __jsx(Section, {\n    size: \"page\"\n  }, __jsx(Markup, null, parent.readme)), hasApi && __jsx(Section, {\n    size: \"page\"\n  }, __jsx(PlusGrid, {\n    \"align-items\": \"center\",\n    justify: \"between\"\n  }, __jsx(PlusGridItem, null, __jsx(Text, null, \"API\")), __jsx(PlusGridItem, null, __jsx(\"select\", {\n    value: selected,\n    disabled: children.length < 2,\n    onChange: event => setSelected(event.target.value)\n  }, children.map(item => __jsx(\"option\", {\n    key: item.key,\n    value: item.key\n  }, item.tag))))), __jsx(Text, null, \"Select your desired component from below and see the available properties, slots, events, styles and methods.\"), __jsx(PlusTabs, {\n    value: \"properties\"\n  }, __jsx(PlusTabsBar, {\n    grow: true\n  }, tabs.map(tab => __jsx(PlusTabsTab, {\n    key: tab.key,\n    disabled: isDisabled(tab.key),\n    value: tab.key\n  }, __jsx(Text, null, tab.value)))), __jsx(PlusTabsPanels, null, tabs.map(tab => __jsx(PlusTabsPanel, {\n    key: tab.key,\n    value: tab.key\n  }, __jsx(Parameters, {\n    items: tab.items\n  })))))), hasExamples && __jsx(Section, {\n    size: \"page\"\n  }, __jsx(Text, null, \"Examples\"), __jsx(Text, null, \"Below is a collection of simple to complex examples.\")), examples.map(example => __jsx(Section, {\n    key: example.key,\n    size: \"page\"\n  }, __jsx(Text, null, example.title), __jsx(Markup, null, example.readme), __jsx(Example, {\n    value: example\n  }))));\n});","map":null,"metadata":{},"sourceType":"module"}