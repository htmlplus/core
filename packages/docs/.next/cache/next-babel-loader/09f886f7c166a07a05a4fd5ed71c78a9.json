{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar PARAM_REGEX = /^\\[(.+)\\]$/;\nexport var Router = /*#__PURE__*/function () {\n  function Router() {\n    var BASE_URL = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n    _classCallCheck(this, Router);\n\n    this.BASE_URL = BASE_URL;\n\n    _defineProperty(this, \"routes\", []);\n  }\n\n  _createClass(Router, [{\n    key: \"createQueryStringUrl\",\n    value: function createQueryStringUrl() {\n      var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return Object.keys(query).filter(function (key) {\n        return query[key];\n      }).map(function (key) {\n        return \"\".concat(key, \"=\").concat(query[key]);\n      }).join('&');\n    }\n  }, {\n    key: \"joinQueryString\",\n    value: function joinQueryString(url, qs) {\n      return \"\".concat(url).concat(qs ? \"?\".concat(qs) : '');\n    }\n  }, {\n    key: \"getParsed\",\n    value: function getParsed(name) {\n      return this.routes.find(function (item) {\n        return item.name === name;\n      });\n    }\n  }, {\n    key: \"register\",\n    value: function register(name, route) {\n      var parsed = route.path.split('/').filter(function (part) {\n        return part !== '/' && !!part;\n      }).map(function (part) {\n        var parameter = PARAM_REGEX.exec(part); // if this part is a route parameter\n\n        if (parameter) {\n          var regex = '(\\\\/[^\\\\/#\\\\?]*)'; // is an array route parameter\n\n          var isArray = parameter[1].includes('...');\n\n          if (isArray) {\n            regex += '+?';\n          }\n\n          return {\n            regex: regex,\n            param: parameter[1].replace('...', ''),\n            full: part,\n            isArray: isArray\n          };\n        }\n\n        return {\n          regex: \"(\\\\/\".concat(part, \")\")\n        };\n      }).reduce(function (result, part) {\n        var output = _objectSpread(_objectSpread({}, result), {}, {\n          parts: [].concat(_toConsumableArray(result.parts), [part]),\n          regex: result.regex + part.regex\n        });\n\n        if (part.param) {\n          output.params = [].concat(_toConsumableArray(output.params), [part.param]);\n        }\n\n        return output;\n      }, {\n        name: name,\n        options: route,\n        parts: [],\n        params: [],\n        regex: '^'\n      });\n      this.routes.push(_objectSpread(_objectSpread({}, parsed), {}, {\n        regex: new RegExp(parsed.parts.length > 0 ? \"\".concat(parsed.regex, \"([\\\\?#].*)?$\") : '^\\\\/([\\\\?#].*)?$')\n      }));\n    }\n  }, {\n    key: \"al\",\n    value: function al() {\n      return this.routes;\n    }\n  }, {\n    key: \"get\",\n    value: function get(name) {\n      return (this.getParsed(name) || {}).options;\n    }\n  }, {\n    key: \"href\",\n    value: function href(name, query) {\n      var route = this.get(name);\n\n      if (route) {\n        var qs = typeof query === 'string' ? query : this.createQueryStringUrl(query);\n        return this.joinQueryString(route.path, qs);\n      }\n    }\n  }, {\n    key: \"path\",\n    value: function path(name, params, query) {\n      var route = this.getParsed(name);\n\n      if (!route) {\n        return;\n      }\n\n      var pathWithoutQuery = route.parts.filter(function (item) {\n        return !!item.param;\n      }).reduce(function () {\n        var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n        var _ref = arguments.length > 1 ? arguments[1] : undefined,\n            _ref$full = _ref.full,\n            full = _ref$full === void 0 ? '' : _ref$full,\n            param = _ref.param,\n            isArray = _ref.isArray;\n\n        if (!params || !params[param || '']) {\n          return result;\n        }\n\n        return result.replace(full, Array.isArray(params[param]) ? params[param].join('/') : params[param]);\n      }, route.options.path);\n      var qs = this.createQueryStringUrl(query);\n      return this.joinQueryString(pathWithoutQuery, qs);\n    }\n  }, {\n    key: \"getByUrl\",\n    value: function getByUrl() {\n      var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var href = url.replace(this.BASE_URL, '');\n\n      if (href[href.length - 1] === '/') {\n        href = href.slice(0, href.length - 2);\n      }\n\n      if (href === undefined || href === '') {\n        href = '/';\n      }\n\n      var hrefParts = href.split('/').filter(function (part) {\n        return part !== '/' && !!part;\n      });\n      var route = this.routes.find(function (item) {\n        return item.regex.test(href);\n      });\n\n      if (route) {\n        var params = route.regex.exec(href).slice(1).map(function (item, index, allItems) {\n          if (route.parts[index] && route.parts[index].param) {\n            if (route.parts[index].isArray) {\n              return {\n                param: route.parts[index].param,\n                value: hrefParts.slice(index, hrefParts.length - allItems.length - 1)\n              };\n            }\n\n            return {\n              param: route.parts[index].param,\n              value: item.replace('/', '')\n            };\n          }\n        }).filter(function (item) {\n          return !!item;\n        });\n        return {\n          name: route.name,\n          params: params\n        };\n      }\n\n      return undefined;\n    }\n  }]);\n\n  return Router;\n}();","map":null,"metadata":{},"sourceType":"module"}