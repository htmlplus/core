{"ast":null,"code":"import classNames from 'classnames';\nexport const classes = classNames;\nexport const render = (items, level = 0) => {\n  return items.map(item => {\n    if (Array.isArray(item)) {\n      return render(item.filter(item => item !== null), level + 1);\n    } else {\n      if (typeof item === 'undefined') return null;\n      let space = '';\n\n      for (let i = 0; i < level; i++) space += '  ';\n\n      return space + item;\n    }\n  }).filter(item => item !== null).join('\\n');\n};\nexport const toCamelCase = input => {\n  if (!input) return input; // TODO\n\n  return input.replace(/(?:^\\w|[A-Z]|\\b\\w)/g, (word, index) => {\n    return index === 0 ? word.toLowerCase() : word.toUpperCase();\n  }).replace(/\\s+/g, '').replace(/-/g, '');\n};\nexport const toCapitalCase = input => {\n  if (!input) return input;\n  return input.replace(/^\\w/, char => char.toUpperCase());\n};\nexport const toPascalCase = input => {\n  if (!input) return input;\n  return input.split('-').map(word => toCapitalCase(word)).join('');\n};\nexport const toUnit = input => {\n  if (input == null || input === '') return undefined;\n  if (isNaN(+input)) return String(input);\n  return `${Number(input)}px`;\n};","map":{"version":3,"sources":["C:/projects/mine/htmlplus/core/packages/docs/src/utils/utils.ts"],"names":["classNames","classes","render","items","level","map","item","Array","isArray","filter","space","i","join","toCamelCase","input","replace","word","index","toLowerCase","toUpperCase","toCapitalCase","char","toPascalCase","split","toUnit","undefined","isNaN","String","Number"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,YAAvB;AAEA,OAAO,MAAMC,OAAO,GAAGD,UAAhB;AAEP,OAAO,MAAME,MAAM,GAAG,CAACC,KAAD,EAAQC,KAAK,GAAG,CAAhB,KAAsB;AAExC,SAAOD,KAAK,CACPE,GADE,CACGC,IAAD,IAAU;AAEX,QAAIC,KAAK,CAACC,OAAN,CAAcF,IAAd,CAAJ,EAAyB;AAErB,aAAOJ,MAAM,CAACI,IAAI,CAACG,MAAL,CAAaH,IAAD,IAAUA,IAAI,KAAK,IAA/B,CAAD,EAAuCF,KAAK,GAAG,CAA/C,CAAb;AACH,KAHD,MAIK;AAED,UAAI,OAAOE,IAAP,KAAgB,WAApB,EAAiC,OAAO,IAAP;AAEjC,UAAII,KAAK,GAAG,EAAZ;;AAEA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,KAApB,EAA2BO,CAAC,EAA5B,EAAgCD,KAAK,IAAI,IAAT;;AAEhC,aAAOA,KAAK,GAAGJ,IAAf;AACH;AACJ,GAjBE,EAkBFG,MAlBE,CAkBMH,IAAD,IAAUA,IAAI,KAAK,IAlBxB,EAmBFM,IAnBE,CAmBG,IAnBH,CAAP;AAoBH,CAtBM;AAwBP,OAAO,MAAMC,WAAW,GAAIC,KAAD,IAAmB;AAE1C,MAAI,CAACA,KAAL,EAAY,OAAOA,KAAP,CAF8B,CAI1C;;AACA,SAAOA,KAAK,CAACC,OAAN,CAAc,qBAAd,EAAqC,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACzD,WAAOA,KAAK,KAAK,CAAV,GAAcD,IAAI,CAACE,WAAL,EAAd,GAAmCF,IAAI,CAACG,WAAL,EAA1C;AACH,GAFM,EAEJJ,OAFI,CAEI,MAFJ,EAEY,EAFZ,EAEgBA,OAFhB,CAEwB,IAFxB,EAE8B,EAF9B,CAAP;AAGH,CARM;AAUP,OAAO,MAAMK,aAAa,GAAIN,KAAD,IAAmB;AAE5C,MAAI,CAACA,KAAL,EAAY,OAAOA,KAAP;AAEZ,SAAOA,KAAK,CAACC,OAAN,CAAc,KAAd,EAAsBM,IAAD,IAAUA,IAAI,CAACF,WAAL,EAA/B,CAAP;AACH,CALM;AAOP,OAAO,MAAMG,YAAY,GAAIR,KAAD,IAAmB;AAE3C,MAAI,CAACA,KAAL,EAAY,OAAOA,KAAP;AAEZ,SAAOA,KAAK,CAACS,KAAN,CAAY,GAAZ,EAAiBlB,GAAjB,CAAsBW,IAAD,IAAUI,aAAa,CAACJ,IAAD,CAA5C,EAAoDJ,IAApD,CAAyD,EAAzD,CAAP;AACH,CALM;AAOP,OAAO,MAAMY,MAAM,GAAIV,KAAD,IAA4B;AAE9C,MAAIA,KAAK,IAAI,IAAT,IAAiBA,KAAK,KAAK,EAA/B,EAAmC,OAAOW,SAAP;AAEnC,MAAIC,KAAK,CAAC,CAACZ,KAAF,CAAT,EAAoB,OAAOa,MAAM,CAACb,KAAD,CAAb;AAEpB,SAAQ,GAAEc,MAAM,CAACd,KAAD,CAAQ,IAAxB;AACH,CAPM","sourcesContent":["import classNames from 'classnames';\n\nexport const classes = classNames;\n\nexport const render = (items, level = 0) => {\n\n    return items\n        .map((item) => {\n\n            if (Array.isArray(item)) {\n\n                return render(item.filter((item) => item !== null), level + 1);\n            }\n            else {\n\n                if (typeof item === 'undefined') return null;\n\n                let space = '';\n\n                for (let i = 0; i < level; i++) space += '  ';\n\n                return space + item;\n            }\n        })\n        .filter((item) => item !== null)\n        .join('\\n');\n}\n\nexport const toCamelCase = (input: string) => {\n\n    if (!input) return input;\n\n    // TODO\n    return input.replace(/(?:^\\w|[A-Z]|\\b\\w)/g, (word, index) => {\n        return index === 0 ? word.toLowerCase() : word.toUpperCase();\n    }).replace(/\\s+/g, '').replace(/-/g, '');\n}\n\nexport const toCapitalCase = (input: string) => {\n\n    if (!input) return input;\n\n    return input.replace(/^\\w/, (char) => char.toUpperCase());\n}\n\nexport const toPascalCase = (input: string) => {\n\n    if (!input) return input;\n\n    return input.split('-').map((word) => toCapitalCase(word)).join('');\n}\n\nexport const toUnit = (input: string | number) => {\n\n    if (input == null || input === '') return undefined;\n\n    if (isNaN(+input!)) return String(input);\n\n    return `${Number(input)}px`;\n}"]},"metadata":{},"sourceType":"module"}