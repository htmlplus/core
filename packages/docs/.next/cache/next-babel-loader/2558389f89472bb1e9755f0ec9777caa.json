{"ast":null,"code":"import React from 'react';\nimport { Alert, Text } from 'components';\nconst mapper = {\n  p: {\n    name: Text,\n    props: {\n      size: 'body'\n    }\n  },\n  h1: {\n    name: Text,\n    props: {\n      size: 'header'\n    }\n  },\n  blockquote: {\n    name: Alert,\n    props: {\n      type: element => {\n        const text = (element.textContent || '').trim();\n        const types = ['[ERROR]', '[INFO]', '[SUCCESS]', '[WARNING]'];\n\n        for (let i = 0; i < types.length; i++) {\n          const type = types[i];\n          if (text.indexOf(type) === -1) continue;\n          element.innerHTML = element.innerHTML.replace(type, '');\n          return type.replace(/\\[|\\]/g, '').toLowerCase();\n        }\n      }\n    }\n  }\n};\n\nconst convert = input => {\n  const map = mapper[input.localName] || {};\n  const name = map.name || input.localName;\n  const props = map.props || {};\n  props.key = Math.random();\n  const children = [];\n  Object.keys(props).forEach(key => {\n    if (typeof props[key] !== 'function') return null;\n    props[key] = props[key](input);\n  });\n  Array.from(input.children).map(child => children.push(convert(child)));\n  return /*#__PURE__*/React.createElement(name, props, children.length ? children : input.textContent);\n};\n\nexport const parser = input => {\n  // TODO\n  return 'markup'; // const value = Markup.parse((input || '').toString(), { headerIds: false });\n  // const wapper = document.createElement('div');\n  // wapper.innerHTML = value;\n  // return convert(wapper);\n};","map":{"version":3,"sources":["C:/projects/mine/htmlplus/core/packages/docs/src/components/markup/markup.parser.ts"],"names":["React","Alert","Text","mapper","p","name","props","size","h1","blockquote","type","element","text","textContent","trim","types","i","length","indexOf","innerHTML","replace","toLowerCase","convert","input","map","localName","key","Math","random","children","Object","keys","forEach","Array","from","child","push","createElement","parser"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,KAAT,EAAgBC,IAAhB,QAA4B,YAA5B;AAEA,MAAMC,MAAW,GAAG;AAClBC,EAAAA,CAAC,EAAE;AACDC,IAAAA,IAAI,EAAEH,IADL;AAEDI,IAAAA,KAAK,EAAE;AACLC,MAAAA,IAAI,EAAE;AADD;AAFN,GADe;AAOlBC,EAAAA,EAAE,EAAE;AACFH,IAAAA,IAAI,EAAEH,IADJ;AAEFI,IAAAA,KAAK,EAAE;AACLC,MAAAA,IAAI,EAAE;AADD;AAFL,GAPc;AAalBE,EAAAA,UAAU,EAAE;AACVJ,IAAAA,IAAI,EAAEJ,KADI;AAEVK,IAAAA,KAAK,EAAE;AACLI,MAAAA,IAAI,EAAGC,OAAD,IAA0B;AAE9B,cAAMC,IAAI,GAAG,CAACD,OAAO,CAACE,WAAR,IAAuB,EAAxB,EAA4BC,IAA5B,EAAb;AAEA,cAAMC,KAAK,GAAG,CAAC,SAAD,EAAY,QAAZ,EAAsB,WAAtB,EAAmC,WAAnC,CAAd;;AAEA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,KAAK,CAACE,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AAErC,gBAAMN,IAAI,GAAGK,KAAK,CAACC,CAAD,CAAlB;AAEA,cAAIJ,IAAI,CAACM,OAAL,CAAaR,IAAb,MAAuB,CAAC,CAA5B,EAA+B;AAE/BC,UAAAA,OAAO,CAACQ,SAAR,GAAoBR,OAAO,CAACQ,SAAR,CAAkBC,OAAlB,CAA0BV,IAA1B,EAAgC,EAAhC,CAApB;AAEA,iBAAOA,IAAI,CAACU,OAAL,CAAa,QAAb,EAAuB,EAAvB,EAA2BC,WAA3B,EAAP;AACD;AACF;AAjBI;AAFG;AAbM,CAApB;;AAqCA,MAAMC,OAAO,GAAIC,KAAD,IAAoB;AAElC,QAAMC,GAAG,GAAGrB,MAAM,CAACoB,KAAK,CAACE,SAAP,CAAN,IAA2B,EAAvC;AAEA,QAAMpB,IAAI,GAAGmB,GAAG,CAACnB,IAAJ,IAAYkB,KAAK,CAACE,SAA/B;AAEA,QAAMnB,KAAK,GAAGkB,GAAG,CAAClB,KAAJ,IAAa,EAA3B;AAEAA,EAAAA,KAAK,CAACoB,GAAN,GAAYC,IAAI,CAACC,MAAL,EAAZ;AAEA,QAAMC,QAAgC,GAAG,EAAzC;AAEAC,EAAAA,MAAM,CAACC,IAAP,CAAYzB,KAAZ,EAAmB0B,OAAnB,CAA4BN,GAAD,IAAS;AAElC,QAAI,OAAOpB,KAAK,CAACoB,GAAD,CAAZ,KAAsB,UAA1B,EAAsC,OAAO,IAAP;AAEtCpB,IAAAA,KAAK,CAACoB,GAAD,CAAL,GAAapB,KAAK,CAACoB,GAAD,CAAL,CAAWH,KAAX,CAAb;AACD,GALD;AAOAU,EAAAA,KAAK,CAACC,IAAN,CAAWX,KAAK,CAACM,QAAjB,EAA2BL,GAA3B,CAAgCW,KAAD,IAAWN,QAAQ,CAACO,IAAT,CAAcd,OAAO,CAACa,KAAD,CAArB,CAA1C;AAEA,sBAAOnC,KAAK,CAACqC,aAAN,CAAoBhC,IAApB,EAA0BC,KAA1B,EAAiCuB,QAAQ,CAACZ,MAAT,GAAkBY,QAAlB,GAA6BN,KAAK,CAACV,WAApE,CAAP;AACD,CAtBD;;AAwBA,OAAO,MAAMyB,MAAM,GAAIf,KAAD,IAAgB;AAEpC;AACA,SAAO,QAAP,CAHoC,CAKpC;AAEA;AAEA;AAEA;AACD,CAZM","sourcesContent":["import React from 'react';\nimport { Markup } from 'services';\nimport { Alert, Text } from 'components';\n\nconst mapper: any = {\n  p: {\n    name: Text,\n    props: {\n      size: 'body',\n    },\n  },\n  h1: {\n    name: Text,\n    props: {\n      size: 'header',\n    },\n  },\n  blockquote: {\n    name: Alert,\n    props: {\n      type: (element: HTMLElement) => {\n\n        const text = (element.textContent || '').trim();\n\n        const types = ['[ERROR]', '[INFO]', '[SUCCESS]', '[WARNING]'];\n\n        for (let i = 0; i < types.length; i++) {\n\n          const type = types[i];\n\n          if (text.indexOf(type) === -1) continue;\n\n          element.innerHTML = element.innerHTML.replace(type, '');\n\n          return type.replace(/\\[|\\]/g, '').toLowerCase();\n        }\n      },\n    },\n  },\n};\n\nconst convert = (input: Element) => {\n\n  const map = mapper[input.localName] || {};\n\n  const name = map.name || input.localName;\n\n  const props = map.props || {};\n\n  props.key = Math.random();\n\n  const children: Array<React.ReactNode> = [];\n\n  Object.keys(props).forEach((key) => {\n\n    if (typeof props[key] !== 'function') return null;\n\n    props[key] = props[key](input);\n  });\n\n  Array.from(input.children).map((child) => children.push(convert(child)));\n\n  return React.createElement(name, props, children.length ? children : input.textContent);\n};\n\nexport const parser = (input: any) => {\n\n  // TODO\n  return 'markup';\n\n  // const value = Markup.parse((input || '').toString(), { headerIds: false });\n\n  // const wapper = document.createElement('div');\n\n  // wapper.innerHTML = value;\n\n  // return convert(wapper);\n};\n"]},"metadata":{},"sourceType":"module"}