{"ast":null,"code":"var _jsxFileName = \"C:\\\\projects\\\\mine\\\\htmlplus\\\\core\\\\packages\\\\docs\\\\src\\\\components\\\\code\\\\code.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect, useRef } from 'react';\nimport Prism from 'prismjs';\nimport 'prismjs/components/prism-jsx';\nimport { Button, Icon } from '@app/components';\nimport { Clipboard, Utils } from '@app/utils';\nexport const Code = props => {\n  _s();\n\n  const {\n    children,\n    language\n  } = props;\n  const element = useRef(null);\n  const content = (children || '').toString();\n  useEffect(() => Prism.highlightAllUnder(element.current));\n  const classesCode = `${true ? ' ' : ''}language-${language}`;\n  const classes = Utils.classes('code');\n  return __jsx(\"div\", {\n    ref: element,\n    className: classes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }, __jsx(Button, {\n    color: \"main-lighten-5\",\n    onClick: () => Clipboard.copy(content),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  }, __jsx(Icon, {\n    name: \"code\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 11\n    }\n  }), \" \")), __jsx(\"pre\", {\n    className: classesCode,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }, __jsx(\"code\", {\n    className: classesCode,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }, content)));\n};\n\n_s(Code, \"SpBhasJPVJrZGxeF9Xbi1q4ov4I=\");\n\n_c = Code;\n\nvar _c;\n\n$RefreshReg$(_c, \"Code\");","map":{"version":3,"sources":["C:/projects/mine/htmlplus/core/packages/docs/src/components/code/code.tsx"],"names":["React","useEffect","useRef","Prism","Button","Icon","Clipboard","Utils","Code","props","children","language","element","content","toString","highlightAllUnder","current","classesCode","classes","copy"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAO,8BAAP;AACA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,iBAA7B;AACA,SAASC,SAAT,EAAoBC,KAApB,QAAiC,YAAjC;AAGA,OAAO,MAAMC,IAAyB,GAAIC,KAAD,IAAW;AAAA;;AAElD,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAAyBF,KAA/B;AAEA,QAAMG,OAAO,GAAGV,MAAM,CAAC,IAAD,CAAtB;AAEA,QAAMW,OAAO,GAAG,CAACH,QAAQ,IAAI,EAAb,EAAiBI,QAAjB,EAAhB;AAEAb,EAAAA,SAAS,CAAC,MAAME,KAAK,CAACY,iBAAN,CAAwBH,OAAO,CAACI,OAAhC,CAAP,CAAT;AAEA,QAAMC,WAAW,GAAI,GAAE,OAAkB,GAAlB,GAAwB,EAAG,YAAWN,QAAS,EAAtE;AAEA,QAAMO,OAAO,GAAGX,KAAK,CAACW,OAAN,CACd,MADc,CAAhB;AAIA,SACE;AAAK,IAAA,GAAG,EAAEN,OAAV;AAAmB,IAAA,SAAS,EAAEM,OAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,gBAAd;AAA+B,IAAA,OAAO,EAAE,MAAMZ,SAAS,CAACa,IAAV,CAAeN,OAAf,CAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAM,IAAA,IAAI,EAAC,MAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,MADF,CADF,EAME;AAAK,IAAA,SAAS,EAAEI,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAM,IAAA,SAAS,EAAEA,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGJ,OADH,CADF,CANF,CADF;AAcD,CA9BM;;GAAML,I;;KAAAA,I","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport Prism from 'prismjs';\nimport 'prismjs/components/prism-jsx';\nimport { Button, Icon } from '@app/components';\nimport { Clipboard, Utils } from '@app/utils';\nimport { CodeProps } from './code.types';\n\nexport const Code: React.FC<CodeProps> = (props) => {\n\n  const { children, language } = props;\n\n  const element = useRef(null);\n\n  const content = (children || '').toString();\n\n  useEffect(() => Prism.highlightAllUnder(element.current));\n\n  const classesCode = `${process.browser ? ' ' : ''}language-${language}`;\n\n  const classes = Utils.classes(\n    'code'\n  );\n\n  return (\n    <div ref={element} className={classes}>\n      <div className=\"button\">\n        <Button color=\"main-lighten-5\" onClick={() => Clipboard.copy(content)}>\n          <Icon name=\"code\" /> {/* TODO copy icon */}\n        </Button>\n      </div>\n      <pre className={classesCode}>\n        <code className={classesCode}>\n          {content}\n        </code>\n      </pre>\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}