{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useMemo } from 'react';\nimport { Code, PlusTabs, PlusTabsBar, PlusTabsTab, PlusTabsPanels, PlusTabsPanel } from 'components';\nimport { Utils } from 'utils';\nimport { ExampleLanguage } from './example.types';\nimport styles from './example.module.scss';\nexport const Example = ({\n  value\n}) => {\n  const code = value.code || {};\n  const style = useMemo(() => {\n    let rules = code.style || '';\n    let className = `.ex-${value.key}`;\n\n    try {\n      var classLen = className.length,\n          char,\n          nextChar,\n          isAt,\n          isIn;\n      className += ' ';\n      rules = rules.replace(/\\/\\*(?:(?!\\*\\/)[\\s\\S])*\\*\\/|[\\r\\n\\t]+/g, '');\n      rules = rules.replace(/}(\\s*)@/g, '}@');\n      rules = rules.replace(/}(\\s*)}/g, '}}');\n\n      for (var i = 0; i < rules.length - 2; i++) {\n        char = rules[i];\n        nextChar = rules[i + 1];\n        if (char === '@') isAt = true;\n        if (!isAt && char === '{') isIn = true;\n        if (isIn && char === '}') isIn = false;\n\n        if (!isIn && nextChar !== '@' && nextChar !== '}' && (char === '}' || char === ',' || (char === '{' || char === ';') && isAt)) {\n          rules = rules.slice(0, i + 1) + className + rules.slice(i + 1);\n          i += classLen;\n          isAt = false;\n        }\n      }\n\n      ;\n      if (rules.indexOf(className) !== 0 && rules.indexOf('@') !== 0) rules = className + rules;\n      return rules;\n    } catch {}\n  }, [value.key, code.style]);\n  const tabs = useMemo(() => {\n    const tabs = [];\n    Object.keys(code).map(key => {\n      const tab = {\n        key,\n        title: Utils.toCapitalCase(key)\n      };\n\n      if (key === 'preview') {\n        tab.content = () => __jsx(\"div\", {\n          className: `ex-${value.key}`\n        }, code[key](), style && __jsx(\"style\", null, style));\n      } else {\n        const language = ExampleLanguage[key];\n\n        tab.content = () => __jsx(Code, {\n          language: language\n        }, code[key]);\n      }\n\n      tabs.push(tab);\n    });\n    return tabs;\n  }, [code]);\n  const classes = Utils.classes({\n    [styles.example]: true\n  });\n  return __jsx(\"div\", {\n    className: classes\n  }, (value.links || []).map(link => __jsx(\"a\", {\n    key: link.key,\n    href: link.path,\n    target: \"_blank\",\n    rel: \"noopener noreferrer\"\n  }, \"GO TO \", link.value)), __jsx(PlusTabs, {\n    value: \"preview\"\n  }, __jsx(PlusTabsBar, null, tabs.map(item => __jsx(PlusTabsTab, {\n    key: item.key,\n    disabled: !item.content,\n    value: item.key\n  }, item.title))), __jsx(PlusTabsPanels, null, tabs.map(item => __jsx(PlusTabsPanel, {\n    key: item.key,\n    value: item.key\n  }, item.content && item.content())))));\n};","map":null,"metadata":{},"sourceType":"module"}