{"ast":null,"code":"import React from 'react';\nimport { Alert, Link, Text } from 'components';\nimport { lexer } from 'marked';\nvar mapper = {\n  blockquote: {\n    name: function name() {\n      return Alert;\n    },\n    props: {\n      type: function type(input) {\n        var text = (input.text || '').trim();\n        var types = ['[ERROR]', '[INFO]', '[SUCCESS]', '[WARNING]'];\n\n        for (var i = 0; i < types.length; i++) {\n          var type = types[i];\n          if (text.indexOf(type) === -1) continue;\n          input.text = text.replace(type, '').trim();\n          delete input.tokens;\n          return type.replace(/\\[|\\]/g, '').toLowerCase();\n        }\n      }\n    }\n  },\n  codespan: {\n    name: function name() {\n      return Text;\n    },\n    props: {\n      // TODO: set background color to error\n      inline: true,\n      size: 'body'\n    }\n  },\n  heading: {\n    name: function name() {\n      return Text;\n    },\n    props: {\n      size: function size(input) {\n        return ['header', 'title', 'body', 'body', 'body', 'body'][input.depth - 1];\n      }\n    }\n  },\n  link: {\n    name: function name() {\n      return Link;\n    },\n    props: {\n      href: function href(input) {\n        return input.href;\n      }\n    }\n  },\n  paragraph: {\n    name: function name() {\n      return Text;\n    },\n    props: {\n      size: 'body'\n    }\n  }\n};\n\nvar convert = function convert(input) {\n  if (Array.isArray(input)) {\n    return input.map(function (item) {\n      return convert(item);\n    });\n  } else {\n    if (input.type === 'text') return input.text;\n    var map = mapper[input.type];\n    if (!map) return console.error(\"[MARKUP]: '\".concat(input.type, \"' type not available, raw is '\").concat(input.raw, \"'\"));\n    var props = {\n      key: Math.random()\n    };\n    Object.keys(map.props || {}).forEach(function (key) {\n      try {\n        props[key] = map.props[key](input);\n      } catch (_unused) {\n        props[key] = map.props[key];\n      }\n    });\n    var children = [];\n    (input.tokens || []).map(function (item) {\n      return children.push(convert(item));\n    });\n    return /*#__PURE__*/React.createElement(map.name(), props, children.length ? children : input.text);\n  }\n};\n\nexport var parser = function parser(input) {\n  var tokens = Array.from(lexer(input));\n  return convert(tokens);\n};","map":null,"metadata":{},"sourceType":"module"}