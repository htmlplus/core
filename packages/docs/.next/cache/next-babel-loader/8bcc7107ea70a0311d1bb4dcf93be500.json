{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useRouter as useRouterNext } from 'next/router';\nimport { router } from 'services';\nexport const useRouter = () => {\n  _s();\n\n  const nextRouter = useRouterNext();\n\n  const push = (name, params, query) => {\n    const href = router.href(name, query);\n    const path = router.path(name, params, query);\n\n    if (!path) {\n      throw new Error('Invalid route name');\n    }\n\n    nextRouter.push(href, path);\n  };\n\n  const pushUrl = url => {\n    const route = router.getByUrl(url);\n\n    if (!route) {\n      throw new Error('Invalid url');\n    }\n\n    nextRouter.push(router.get(route.name).path, url);\n  };\n\n  return {\n    location: {\n      query: nextRouter.query,\n      path: nextRouter.asPath\n    },\n    push,\n    pushUrl,\n    href: (name, query) => router.href(name, query),\n    path: (name, params, query) => router.path(name, params, query)\n  };\n};\n\n_s(useRouter, \"fsgjCjaOnyNZzkqEIduTsGu56HI=\", false, function () {\n  return [useRouterNext];\n});","map":{"version":3,"sources":["C:/projects/mine/htmlplus/core/packages/docs/src/hooks/use-router.ts"],"names":["useRouter","useRouterNext","router","nextRouter","push","name","params","query","href","path","Error","pushUrl","url","route","getByUrl","get","location","asPath"],"mappings":";;AAAA,SAASA,SAAS,IAAIC,aAAtB,QAA2C,aAA3C;AAEA,SAASC,MAAT,QAAuB,UAAvB;AAuBA,OAAO,MAAMF,SAAS,GAAG,MAAkB;AAAA;;AACzC,QAAMG,UAAU,GAAGF,aAAa,EAAhC;;AAEA,QAAMG,IAAI,GAAG,CAACC,IAAD,EAAeC,MAAf,EAAgCC,KAAhC,KAAmD;AAC9D,UAAMC,IAAI,GAAGN,MAAM,CAACM,IAAP,CAAYH,IAAZ,EAAkBE,KAAlB,CAAb;AACA,UAAME,IAAI,GAAGP,MAAM,CAACO,IAAP,CAAYJ,IAAZ,EAAkBC,MAAlB,EAA0BC,KAA1B,CAAb;;AACA,QAAI,CAACE,IAAL,EAAW;AACT,YAAM,IAAIC,KAAJ,CAAU,oBAAV,CAAN;AACD;;AACDP,IAAAA,UAAU,CAACC,IAAX,CAAgBI,IAAhB,EAAsBC,IAAtB;AACD,GAPD;;AASA,QAAME,OAAO,GAAIC,GAAD,IAAS;AACvB,UAAMC,KAAK,GAAGX,MAAM,CAACY,QAAP,CAAgBF,GAAhB,CAAd;;AACA,QAAI,CAACC,KAAL,EAAY;AACV,YAAM,IAAIH,KAAJ,CAAU,aAAV,CAAN;AACD;;AACDP,IAAAA,UAAU,CAACC,IAAX,CAAgBF,MAAM,CAACa,GAAP,CAAWF,KAAK,CAACR,IAAjB,EAAuBI,IAAvC,EAA6CG,GAA7C;AACD,GAND;;AAQA,SAAO;AACLI,IAAAA,QAAQ,EAAE;AACRT,MAAAA,KAAK,EAAEJ,UAAU,CAACI,KADV;AAERE,MAAAA,IAAI,EAAEN,UAAU,CAACc;AAFT,KADL;AAKLb,IAAAA,IALK;AAMLO,IAAAA,OANK;AAOLH,IAAAA,IAAI,EAAE,CAACH,IAAD,EAAeE,KAAf,KAAkCL,MAAM,CAACM,IAAP,CAAYH,IAAZ,EAAkBE,KAAlB,CAPnC;AAQLE,IAAAA,IAAI,EAAE,CAACJ,IAAD,EAAeC,MAAf,EAAgCC,KAAhC,KAAmDL,MAAM,CAACO,IAAP,CAAYJ,IAAZ,EAAkBC,MAAlB,EAA0BC,KAA1B;AARpD,GAAP;AAUD,CA9BM;;GAAMP,S;UACQC,a","sourcesContent":["import { useRouter as useRouterNext } from 'next/router';\nimport { ParsedUrlQuery } from 'querystring';\nimport { router } from 'services';\n\ninterface RouterHook {\n  location: {\n    query: ParsedUrlQuery;\n    path: string;\n    route?: {\n      name: string;\n      options: {\n        path: string;\n        [key: string]: any;\n      };\n      params: {\n        [key: string]: any;\n      };\n    };\n  };\n  push: (name: string, params?: object, query?: object) => void;\n  pushUrl: (url: string) => void;\n  href: (name: string, query?: object) => string;\n  path: (name: string, params?: object, query?: object) => string;\n}\n\nexport const useRouter = (): RouterHook => {\n  const nextRouter = useRouterNext();\n\n  const push = (name: string, params?: object, query?: object) => {\n    const href = router.href(name, query);\n    const path = router.path(name, params, query);\n    if (!path) {\n      throw new Error('Invalid route name');\n    }\n    nextRouter.push(href, path);\n  };\n\n  const pushUrl = (url) => {\n    const route = router.getByUrl(url);\n    if (!route) {\n      throw new Error('Invalid url');\n    }\n    nextRouter.push(router.get(route.name).path, url);\n  };\n\n  return {\n    location: {\n      query: nextRouter.query,\n      path: nextRouter.asPath,\n    },\n    push,\n    pushUrl,\n    href: (name: string, query?: object) => router.href(name, query),\n    path: (name: string, params?: object, query?: object) => router.path(name, params, query),\n  };\n};\n"]},"metadata":{},"sourceType":"module"}