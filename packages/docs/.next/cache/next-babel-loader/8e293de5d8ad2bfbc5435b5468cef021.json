{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport class Router {\n  constructor() {\n    _defineProperty(this, \"routes\", []);\n  }\n\n  all() {\n    return this.routes;\n  }\n\n  find(name) {\n    return this.routes.find(item => item.name === name);\n  }\n\n  path(name, params) {\n    const route = this.find(name);\n    if (!route) return;\n    let path = route.path;\n    Object.keys(params || {}).map(key => {\n      path = path.replace(`[${key}]`, params[key]);\n    });\n    return path;\n  }\n\n  register(route) {\n    this.routes.push(route);\n    return route;\n  }\n\n}","map":{"version":3,"sources":["C:/projects/mine/htmlplus/core/packages/docs/src/services/router/router.ts"],"names":["Router","all","routes","find","name","item","path","params","route","Object","keys","map","key","replace","register","push"],"mappings":";;AAKA,OAAO,MAAMA,MAAN,CAAa;AAAA;AAAA,oCAEiB,EAFjB;AAAA;;AAIlBC,EAAAA,GAAG,GAAG;AACJ,WAAO,KAAKC,MAAZ;AACD;;AAEDC,EAAAA,IAAI,CAACC,IAAD,EAAsB;AACxB,WAAO,KAAKF,MAAL,CAAYC,IAAZ,CAAkBE,IAAD,IAAUA,IAAI,CAACD,IAAL,KAAcA,IAAzC,CAAP;AACD;;AAEDE,EAAAA,IAAI,CAACF,IAAD,EAAeG,MAAf,EAAwC;AAE1C,UAAMC,KAAK,GAAG,KAAKL,IAAL,CAAUC,IAAV,CAAd;AAEA,QAAI,CAACI,KAAL,EAAY;AAEZ,QAAIF,IAAI,GAAGE,KAAK,CAACF,IAAjB;AAEAG,IAAAA,MAAM,CAACC,IAAP,CAAYH,MAAM,IAAI,EAAtB,EACGI,GADH,CACQC,GAAD,IAAS;AACZN,MAAAA,IAAI,GAAGA,IAAI,CAACO,OAAL,CAAc,IAAGD,GAAI,GAArB,EAAyBL,MAAM,CAACK,GAAD,CAA/B,CAAP;AACD,KAHH;AAKA,WAAON,IAAP;AACD;;AAEDQ,EAAAA,QAAQ,CAACN,KAAD,EAAsB;AAE5B,SAAKN,MAAL,CAAYa,IAAZ,CAAiBP,KAAjB;AAEA,WAAOA,KAAP;AACD;;AAjCiB","sourcesContent":["export interface Route {\n  name: string,\n  path: string\n}\n\nexport class Router {\n\n  private readonly routes: Route[] = [];\n\n  all() {\n    return this.routes;\n  }\n\n  find(name: string): Route {\n    return this.routes.find((item) => item.name === name);\n  }\n\n  path(name: string, params?: object): string {\n\n    const route = this.find(name);\n\n    if (!route) return;\n\n    let path = route.path;\n\n    Object.keys(params || {})\n      .map((key) => {\n        path = path.replace(`[${key}]`, params[key])\n      });\n\n    return path;\n  }\n\n  register(route: Route): Route {\n\n    this.routes.push(route);\n\n    return route;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}