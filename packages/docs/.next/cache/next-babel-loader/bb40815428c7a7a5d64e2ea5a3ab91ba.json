{"ast":null,"code":"import React from 'react';\nimport { Alert, Link, Text } from 'components';\nimport { lexer } from 'marked';\nconst mapper = {\n  blockquote: {\n    name: () => Alert,\n    props: {\n      type: input => {\n        const text = (input.text || '').trim();\n        const types = ['[ERROR]', '[INFO]', '[SUCCESS]', '[WARNING]'];\n\n        for (let i = 0; i < types.length; i++) {\n          const type = types[i];\n          if (text.indexOf(type) === -1) continue;\n          input.text = text.replace(type, '').trim();\n          delete input.tokens;\n          return type.replace(/\\[|\\]/g, '').toLowerCase();\n        }\n      }\n    }\n  },\n  codespan: {\n    name: () => Text,\n    props: {\n      // TODO: set background color to error\n      inline: true,\n      size: 'body'\n    }\n  },\n  heading: {\n    name: () => Text,\n    props: {\n      size: input => {\n        return ['header', 'title', 'body', 'body', 'body', 'body'][input.depth - 1];\n      }\n    }\n  },\n  link: {\n    name: () => Link,\n    props: {\n      href: input => input.href\n    }\n  },\n  paragraph: {\n    name: () => Text,\n    props: {\n      size: 'body'\n    }\n  }\n};\n\nconst convert = input => {\n  if (Array.isArray(input)) {\n    return input.map(item => convert(item));\n  } else {\n    if (input.type === 'text') return input.text;\n    const map = mapper[input.type];\n    if (!map) return console.error(`[MARKUP]: '${input.type}' type not available, raw is '${input.raw}'`);\n    const props = {\n      key: Math.random()\n    };\n    Object.keys(map.props || {}).forEach(key => {\n      try {\n        props[key] = map.props[key](input);\n      } catch {\n        props[key] = map.props[key];\n      }\n    });\n    const children = [];\n    (input.tokens || []).map(item => children.push(convert(item)));\n    return /*#__PURE__*/React.createElement(map.name(), props, children.length ? children : input.text);\n  }\n};\n\nexport const parser = input => {\n  const tokens = Array.from(lexer(input));\n  return convert(tokens);\n};","map":null,"metadata":{},"sourceType":"module"}