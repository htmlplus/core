{"ast":null,"code":"var _jsxFileName = \"C:\\\\projects\\\\mine\\\\htmlplus\\\\core\\\\packages\\\\docs\\\\src\\\\components\\\\markup\\\\markup.renderers.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Alert, Code, Link, Text } from 'components';\nimport * as Constants from '../../../constants';\nexport const renderers = {\n  blockquote: props => {\n    const value = props.node.children[0].children[0].value.trim();\n    const token = (value.match(/\\[\\w+\\]/) || [])[0] || '';\n    const type = token.replace(/\\[|\\]/g, '');\n    return __jsx(Alert, {\n      type: type,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 16\n      }\n    }, value.replace(token, ''));\n  },\n  code: props => __jsx(Code, {\n    language: props.language,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 22\n    }\n  }, props.value),\n  heading: props => __jsx(Text, {\n    size: props.level.toString(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 25\n    }\n  }, props.children),\n  // inlineCode: (props) => <Text color=\"error\" size=\"body\" inline>{props.children}</Text>,\n  link: props => __jsx(Link, {\n    href: props.href,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 22\n    }\n  }, props.children),\n  paragraph: props => __jsx(Text, {\n    size: \"paragraph\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 27\n    }\n  }, props.children)\n};\nexport const tokenizer = input => {\n  const tokens = input.match(/\\{\\{(.*?)\\}\\}/g) || [];\n  tokens.map(token => {\n    const raw = token.replace(/\\{|\\}/g, '');\n    const sections = raw.split(':');\n    const type = sections[0];\n    const value = sections[1];\n\n    switch (type) {\n      case 'CONSTANT':\n        input = input.replace(token, Constants[value]);\n        break;\n\n      case 'ROUTE':\n        input = input.replace(token, value);\n        break;\n    }\n  });\n  return input;\n};","map":{"version":3,"sources":["C:/projects/mine/htmlplus/core/packages/docs/src/components/markup/markup.renderers.tsx"],"names":["Alert","Code","Link","Text","Constants","renderers","blockquote","props","value","node","children","trim","token","match","type","replace","code","language","heading","level","toString","link","href","paragraph","tokenizer","input","tokens","map","raw","sections","split"],"mappings":";;;AAAA,SAASA,KAAT,EAAgBC,IAAhB,EAAsBC,IAAtB,EAA4BC,IAA5B,QAAwC,YAAxC;AACA,OAAO,KAAKC,SAAZ,MAA2B,oBAA3B;AAEA,OAAO,MAAMC,SAAS,GAAG;AACrBC,EAAAA,UAAU,EAAGC,KAAD,IAAW;AAEnB,UAAMC,KAAK,GAAGD,KAAK,CAACE,IAAN,CAAWC,QAAX,CAAoB,CAApB,EAAuBA,QAAvB,CAAgC,CAAhC,EAAmCF,KAAnC,CAAyCG,IAAzC,EAAd;AAEA,UAAMC,KAAK,GAAI,CAACJ,KAAK,CAACK,KAAN,CAAY,SAAZ,KAA0B,EAA3B,EAA+B,CAA/B,KAAqC,EAApD;AAEA,UAAMC,IAAI,GAAGF,KAAK,CAACG,OAAN,CAAc,QAAd,EAAwB,EAAxB,CAAb;AAEA,WAAO,MAAC,KAAD;AAAO,MAAA,IAAI,EAAED,IAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAoBN,KAAK,CAACO,OAAN,CAAcH,KAAd,EAAqB,EAArB,CAApB,CAAP;AACH,GAVoB;AAWrBI,EAAAA,IAAI,EAAGT,KAAD,IAAW,MAAC,IAAD;AAAM,IAAA,QAAQ,EAAEA,KAAK,CAACU,QAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAiCV,KAAK,CAACC,KAAvC,CAXI;AAYrBU,EAAAA,OAAO,EAAGX,KAAD,IAAW,MAAC,IAAD;AAAM,IAAA,IAAI,EAAEA,KAAK,CAACY,KAAN,CAAYC,QAAZ,EAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAqCb,KAAK,CAACG,QAA3C,CAZC;AAarB;AACAW,EAAAA,IAAI,EAAGd,KAAD,IAAW,MAAC,IAAD;AAAM,IAAA,IAAI,EAAEA,KAAK,CAACe,IAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAyBf,KAAK,CAACG,QAA/B,CAdI;AAerBa,EAAAA,SAAS,EAAGhB,KAAD,IAAW,MAAC,IAAD;AAAM,IAAA,IAAI,EAAC,WAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAwBA,KAAK,CAACG,QAA9B;AAfD,CAAlB;AAkBP,OAAO,MAAMc,SAAS,GAAIC,KAAD,IAAW;AAEhC,QAAMC,MAAM,GAAGD,KAAK,CAACZ,KAAN,CAAY,gBAAZ,KAAiC,EAAhD;AAEAa,EAAAA,MAAM,CAACC,GAAP,CAAYf,KAAD,IAAW;AAElB,UAAMgB,GAAG,GAAGhB,KAAK,CAACG,OAAN,CAAc,QAAd,EAAwB,EAAxB,CAAZ;AAEA,UAAMc,QAAQ,GAAGD,GAAG,CAACE,KAAJ,CAAU,GAAV,CAAjB;AAEA,UAAMhB,IAAI,GAAGe,QAAQ,CAAC,CAAD,CAArB;AAEA,UAAMrB,KAAK,GAAGqB,QAAQ,CAAC,CAAD,CAAtB;;AAEA,YAAQf,IAAR;AAEI,WAAK,UAAL;AACIW,QAAAA,KAAK,GAAGA,KAAK,CAACV,OAAN,CAAcH,KAAd,EAAqBR,SAAS,CAACI,KAAD,CAA9B,CAAR;AACA;;AAEJ,WAAK,OAAL;AACIiB,QAAAA,KAAK,GAAGA,KAAK,CAACV,OAAN,CAAcH,KAAd,EAAqBJ,KAArB,CAAR;AACA;AARR;AAUH,GApBD;AAsBA,SAAOiB,KAAP;AACH,CA3BM","sourcesContent":["import { Alert, Code, Link, Text } from 'components';\nimport * as Constants from '../../../constants';\n\nexport const renderers = {\n    blockquote: (props) => {\n\n        const value = props.node.children[0].children[0].value.trim();\n\n        const token = ((value.match(/\\[\\w+\\]/) || [])[0] || '');\n\n        const type = token.replace(/\\[|\\]/g, '');\n\n        return <Alert type={type}>{value.replace(token, '')}</Alert>;\n    },\n    code: (props) => <Code language={props.language}>{props.value}</Code>,\n    heading: (props) => <Text size={props.level.toString()}>{props.children}</Text>,\n    // inlineCode: (props) => <Text color=\"error\" size=\"body\" inline>{props.children}</Text>,\n    link: (props) => <Link href={props.href}>{props.children}</Link>,\n    paragraph: (props) => <Text size=\"paragraph\">{props.children}</Text>,\n};\n\nexport const tokenizer = (input) => {\n\n    const tokens = input.match(/\\{\\{(.*?)\\}\\}/g) || [];\n\n    tokens.map((token) => {\n\n        const raw = token.replace(/\\{|\\}/g, '');\n\n        const sections = raw.split(':');\n\n        const type = sections[0];\n\n        const value = sections[1];\n\n        switch (type) {\n\n            case 'CONSTANT':\n                input = input.replace(token, Constants[value]);\n                break;\n\n            case 'ROUTE':\n                input = input.replace(token, value);\n                break;\n        }\n    });\n\n    return input;\n}"]},"metadata":{},"sourceType":"module"}