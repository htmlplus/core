{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\projects\\\\mine\\\\htmlplus\\\\core\\\\packages\\\\docs\\\\src\\\\components\\\\markup\\\\markup.renderers.tsx\";\nimport { Alert, Code, Link, Text, TocItem } from '@app/components';\nimport * as Constants from '@app/constants';\nimport { router } from '@app/services';\nexport const renderers = {\n  blockquote: props => {\n    const value = props.node.children[0].children[0].value.trim();\n    const token = (value.match(/\\[\\w+\\]/) || [])[0] || '';\n    const type = token.replace(/\\[|\\]/g, '');\n    return /*#__PURE__*/_jsxDEV(Alert, {\n      type: type,\n      children: value.replace(token, '')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 16\n    }, this);\n  },\n  code: props => /*#__PURE__*/_jsxDEV(Code, {\n    language: props.language,\n    children: props.value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 22\n  }, this),\n  heading: props => {\n    const {\n      children,\n      level\n    } = props;\n    const content = level === 1 ? children : /*#__PURE__*/_jsxDEV(TocItem, {\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 50\n    }, this);\n    return /*#__PURE__*/_jsxDEV(Text, {\n      size: level.toString(),\n      children: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 16\n    }, this);\n  },\n  link: props => /*#__PURE__*/_jsxDEV(Link, {\n    to: props.href,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 22\n  }, this),\n  paragraph: props => /*#__PURE__*/_jsxDEV(Text, {\n    size: \"paragraph\",\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 27\n  }, this)\n};\nexport const tokenizer = input => {\n  const tokens = input.match(/\\{(.*?)\\}/g) || [];\n  tokens.map(token => {\n    const raw = token.replace(/\\{|\\}/g, '');\n    const sections = raw.split('.');\n    const type = sections[0];\n    const value = sections[1];\n\n    switch (type) {\n      case 'Constants':\n        input = input.replace(token, Constants[value]);\n        break;\n\n      case 'Router':\n        input = input.replace(token, router.path(value));\n        break;\n    }\n  });\n  return input;\n};","map":{"version":3,"sources":["C:/projects/mine/htmlplus/core/packages/docs/src/components/markup/markup.renderers.tsx"],"names":["Alert","Code","Link","Text","TocItem","Constants","router","renderers","blockquote","props","value","node","children","trim","token","match","type","replace","code","language","heading","level","content","toString","link","href","paragraph","tokenizer","input","tokens","map","raw","sections","split","path"],"mappings":";;AAAA,SAASA,KAAT,EAAgBC,IAAhB,EAAsBC,IAAtB,EAA4BC,IAA5B,EAAkCC,OAAlC,QAAiD,iBAAjD;AACA,OAAO,KAAKC,SAAZ,MAA2B,gBAA3B;AACA,SAASC,MAAT,QAAuB,eAAvB;AAEA,OAAO,MAAMC,SAAS,GAAG;AACrBC,EAAAA,UAAU,EAAGC,KAAD,IAAW;AAEnB,UAAMC,KAAK,GAAGD,KAAK,CAACE,IAAN,CAAWC,QAAX,CAAoB,CAApB,EAAuBA,QAAvB,CAAgC,CAAhC,EAAmCF,KAAnC,CAAyCG,IAAzC,EAAd;AAEA,UAAMC,KAAK,GAAI,CAACJ,KAAK,CAACK,KAAN,CAAY,SAAZ,KAA0B,EAA3B,EAA+B,CAA/B,KAAqC,EAApD;AAEA,UAAMC,IAAI,GAAGF,KAAK,CAACG,OAAN,CAAc,QAAd,EAAwB,EAAxB,CAAb;AAEA,wBAAO,QAAC,KAAD;AAAO,MAAA,IAAI,EAAED,IAAb;AAAA,gBAAoBN,KAAK,CAACO,OAAN,CAAcH,KAAd,EAAqB,EAArB;AAApB;AAAA;AAAA;AAAA;AAAA,YAAP;AACH,GAVoB;AAWrBI,EAAAA,IAAI,EAAGT,KAAD,iBAAW,QAAC,IAAD;AAAM,IAAA,QAAQ,EAAEA,KAAK,CAACU,QAAtB;AAAA,cAAiCV,KAAK,CAACC;AAAvC;AAAA;AAAA;AAAA;AAAA,UAXI;AAYrBU,EAAAA,OAAO,EAAGX,KAAD,IAAW;AAEhB,UAAM;AAAEG,MAAAA,QAAF;AAAYS,MAAAA;AAAZ,QAAsBZ,KAA5B;AAEA,UAAMa,OAAO,GAAGD,KAAK,KAAK,CAAV,GAAcT,QAAd,gBAAyB,QAAC,OAAD;AAAA,gBAAUA;AAAV;AAAA;AAAA;AAAA;AAAA,YAAzC;AAEA,wBAAO,QAAC,IAAD;AAAM,MAAA,IAAI,EAAES,KAAK,CAACE,QAAN,EAAZ;AAAA,gBAA+BD;AAA/B;AAAA;AAAA;AAAA;AAAA,YAAP;AACH,GAnBoB;AAoBrBE,EAAAA,IAAI,EAAGf,KAAD,iBAAW,QAAC,IAAD;AAAM,IAAA,EAAE,EAAEA,KAAK,CAACgB,IAAhB;AAAA,cAAuBhB,KAAK,CAACG;AAA7B;AAAA;AAAA;AAAA;AAAA,UApBI;AAqBrBc,EAAAA,SAAS,EAAGjB,KAAD,iBAAW,QAAC,IAAD;AAAM,IAAA,IAAI,EAAC,WAAX;AAAA,cAAwBA,KAAK,CAACG;AAA9B;AAAA;AAAA;AAAA;AAAA;AArBD,CAAlB;AAwBP,OAAO,MAAMe,SAAS,GAAIC,KAAD,IAAW;AAEhC,QAAMC,MAAM,GAAGD,KAAK,CAACb,KAAN,CAAY,YAAZ,KAA6B,EAA5C;AAEAc,EAAAA,MAAM,CAACC,GAAP,CAAYhB,KAAD,IAAW;AAElB,UAAMiB,GAAG,GAAGjB,KAAK,CAACG,OAAN,CAAc,QAAd,EAAwB,EAAxB,CAAZ;AAEA,UAAMe,QAAQ,GAAGD,GAAG,CAACE,KAAJ,CAAU,GAAV,CAAjB;AAEA,UAAMjB,IAAI,GAAGgB,QAAQ,CAAC,CAAD,CAArB;AAEA,UAAMtB,KAAK,GAAGsB,QAAQ,CAAC,CAAD,CAAtB;;AAEA,YAAQhB,IAAR;AAEI,WAAK,WAAL;AACIY,QAAAA,KAAK,GAAGA,KAAK,CAACX,OAAN,CAAcH,KAAd,EAAqBT,SAAS,CAACK,KAAD,CAA9B,CAAR;AACA;;AAEJ,WAAK,QAAL;AACIkB,QAAAA,KAAK,GAAGA,KAAK,CAACX,OAAN,CAAcH,KAAd,EAAqBR,MAAM,CAAC4B,IAAP,CAAYxB,KAAZ,CAArB,CAAR;AACA;AARR;AAUH,GApBD;AAsBA,SAAOkB,KAAP;AACH,CA3BM","sourcesContent":["import { Alert, Code, Link, Text, TocItem } from '@app/components';\nimport * as Constants from '@app/constants';\nimport { router } from '@app/services';\n\nexport const renderers = {\n    blockquote: (props) => {\n\n        const value = props.node.children[0].children[0].value.trim();\n\n        const token = ((value.match(/\\[\\w+\\]/) || [])[0] || '');\n\n        const type = token.replace(/\\[|\\]/g, '');\n\n        return <Alert type={type}>{value.replace(token, '')}</Alert>;\n    },\n    code: (props) => <Code language={props.language}>{props.value}</Code>,\n    heading: (props) => {\n\n        const { children, level } = props;\n\n        const content = level === 1 ? children : <TocItem>{children}</TocItem>;\n\n        return <Text size={level.toString()}>{content}</Text>;\n    },\n    link: (props) => <Link to={props.href}>{props.children}</Link>,\n    paragraph: (props) => <Text size=\"paragraph\">{props.children}</Text>,\n};\n\nexport const tokenizer = (input) => {\n\n    const tokens = input.match(/\\{(.*?)\\}/g) || [];\n\n    tokens.map((token) => {\n\n        const raw = token.replace(/\\{|\\}/g, '');\n\n        const sections = raw.split('.');\n\n        const type = sections[0];\n\n        const value = sections[1];\n\n        switch (type) {\n\n            case 'Constants':\n                input = input.replace(token, Constants[value]);\n                break;\n\n            case 'Router':\n                input = input.replace(token, router.path(value));\n                break;\n        }\n    });\n\n    return input;\n}"]},"metadata":{},"sourceType":"module"}