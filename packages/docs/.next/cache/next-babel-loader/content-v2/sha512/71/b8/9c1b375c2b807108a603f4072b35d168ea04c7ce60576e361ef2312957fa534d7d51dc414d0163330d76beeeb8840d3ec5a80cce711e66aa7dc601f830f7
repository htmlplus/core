{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { makeAutoObservable } from 'mobx';\nexport class TocStore {\n  constructor(root) {\n    this.root = root;\n\n    _defineProperty(this, \"items\", []);\n\n    makeAutoObservable(this, {\n      root: false\n    });\n  }\n\n  add(item) {\n    this.items.push(item);\n    if (item.key && `#${item.key}` !== window.location.hash) return;\n    setTimeout(() => {\n      item.active = true;\n      item.scrollTo();\n    }, 1000);\n  }\n\n  remove(key) {\n    this.items = this.items.filter(item => item.key !== key);\n  }\n\n  update(key, entry) {\n    const active = this.items.find(item => {\n      var _item$entry;\n\n      return (_item$entry = item.entry) === null || _item$entry === void 0 ? void 0 : _item$entry.isIntersecting;\n    });\n    const item = this.items.find(item => item.key === key);\n    item.entry = entry;\n    const entries = this.items.filter(item => {\n      var _item$entry2;\n\n      return (_item$entry2 = item.entry) === null || _item$entry2 === void 0 ? void 0 : _item$entry2.isIntersecting;\n    });\n    let next;\n\n    if (entries.length) {\n      next = entries[0];\n    } else {\n      if (!active || !active.entry) return;\n      const top = active.entry.target.getBoundingClientRect().top;\n      const toDown = top < 0;\n      const index = this.items.findIndex(item => item.key === active.key);\n      next = this.items[toDown ? index : index - 1];\n    }\n\n    if (!next) return;\n    this.items.map(item => item.active = item.key === next.key);\n  }\n\n}","map":{"version":3,"sources":["C:/projects/mine/htmlplus/core/packages/docs/src/store/store.toc.ts"],"names":["makeAutoObservable","TocStore","constructor","root","add","item","items","push","key","window","location","hash","setTimeout","active","scrollTo","remove","filter","update","entry","find","isIntersecting","entries","next","length","top","target","getBoundingClientRect","toDown","index","findIndex","map"],"mappings":";;AAAA,SAASA,kBAAT,QAAmC,MAAnC;AAIA,OAAO,MAAMC,QAAN,CAAe;AAIpBC,EAAAA,WAAW,CAAUC,IAAV,EAAuB;AAAA,SAAbA,IAAa,GAAbA,IAAa;;AAAA,mCAFV,EAEU;;AAEhCH,IAAAA,kBAAkB,CAAC,IAAD,EAAO;AAAEG,MAAAA,IAAI,EAAE;AAAR,KAAP,CAAlB;AACD;;AAEDC,EAAAA,GAAG,CAACC,IAAD,EAAgB;AAEjB,SAAKC,KAAL,CAAWC,IAAX,CAAgBF,IAAhB;AAEA,QAAIA,IAAI,CAACG,GAAL,IAAa,IAAGH,IAAI,CAACG,GAAI,EAAb,KAAmBC,MAAM,CAACC,QAAP,CAAgBC,IAAnD,EAAyD;AAEzDC,IAAAA,UAAU,CAAC,MAAM;AAEfP,MAAAA,IAAI,CAACQ,MAAL,GAAc,IAAd;AAEAR,MAAAA,IAAI,CAACS,QAAL;AACD,KALS,EAKP,IALO,CAAV;AAMD;;AAEDC,EAAAA,MAAM,CAACP,GAAD,EAAc;AAElB,SAAKF,KAAL,GAAa,KAAKA,KAAL,CAAWU,MAAX,CAAmBX,IAAD,IAAUA,IAAI,CAACG,GAAL,KAAaA,GAAzC,CAAb;AACD;;AAEDS,EAAAA,MAAM,CAACT,GAAD,EAAcU,KAAd,EAAqB;AAEzB,UAAML,MAAM,GAAG,KAAKP,KAAL,CAAWa,IAAX,CAAiBd,IAAD;AAAA;;AAAA,4BAAUA,IAAI,CAACa,KAAf,gDAAU,YAAYE,cAAtB;AAAA,KAAhB,CAAf;AAEA,UAAMf,IAAI,GAAG,KAAKC,KAAL,CAAWa,IAAX,CAAiBd,IAAD,IAAUA,IAAI,CAACG,GAAL,KAAaA,GAAvC,CAAb;AAEAH,IAAAA,IAAI,CAACa,KAAL,GAAaA,KAAb;AAEA,UAAMG,OAAO,GAAG,KAAKf,KAAL,CAAWU,MAAX,CAAmBX,IAAD;AAAA;;AAAA,6BAAUA,IAAI,CAACa,KAAf,iDAAU,aAAYE,cAAtB;AAAA,KAAlB,CAAhB;AAEA,QAAIE,IAAJ;;AAEA,QAAID,OAAO,CAACE,MAAZ,EAAoB;AAElBD,MAAAA,IAAI,GAAGD,OAAO,CAAC,CAAD,CAAd;AACD,KAHD,MAIK;AAEH,UAAI,CAACR,MAAD,IAAW,CAACA,MAAM,CAACK,KAAvB,EAA8B;AAE9B,YAAMM,GAAG,GAAGX,MAAM,CAACK,KAAP,CAAaO,MAAb,CAAoBC,qBAApB,GAA4CF,GAAxD;AAEA,YAAMG,MAAM,GAAGH,GAAG,GAAG,CAArB;AAEA,YAAMI,KAAK,GAAG,KAAKtB,KAAL,CAAWuB,SAAX,CAAsBxB,IAAD,IAAUA,IAAI,CAACG,GAAL,KAAaK,MAAM,CAACL,GAAnD,CAAd;AAEAc,MAAAA,IAAI,GAAG,KAAKhB,KAAL,CAAWqB,MAAM,GAAGC,KAAH,GAAWA,KAAK,GAAG,CAApC,CAAP;AACD;;AAED,QAAI,CAACN,IAAL,EAAW;AAEX,SAAKhB,KAAL,CAAWwB,GAAX,CAAgBzB,IAAD,IAAUA,IAAI,CAACQ,MAAL,GAAcR,IAAI,CAACG,GAAL,KAAac,IAAI,CAACd,GAAzD;AACD;;AA5DmB","sourcesContent":["import { makeAutoObservable } from 'mobx';\nimport { Store } from './store';\nimport { TocItem } from './store.toc.types';\n\nexport class TocStore {\n\n  items: Array<TocItem> = [];\n\n  constructor(readonly root: Store) {\n\n    makeAutoObservable(this, { root: false });\n  }\n\n  add(item: TocItem) {\n\n    this.items.push(item);\n\n    if (item.key && `#${item.key}` !== window.location.hash) return;\n\n    setTimeout(() => {\n\n      item.active = true;\n\n      item.scrollTo();\n    }, 1000);\n  }\n\n  remove(key: string) {\n\n    this.items = this.items.filter((item) => item.key !== key);\n  }\n\n  update(key: string, entry) {\n\n    const active = this.items.find((item) => item.entry?.isIntersecting);\n\n    const item = this.items.find((item) => item.key === key);\n\n    item.entry = entry;\n\n    const entries = this.items.filter((item) => item.entry?.isIntersecting);\n\n    let next;\n\n    if (entries.length) {\n\n      next = entries[0];\n    }\n    else {\n\n      if (!active || !active.entry) return;\n\n      const top = active.entry.target.getBoundingClientRect().top;\n\n      const toDown = top < 0;\n\n      const index = this.items.findIndex((item) => item.key === active.key);\n\n      next = this.items[toDown ? index : index - 1];\n    }\n\n    if (!next) return;\n\n    this.items.map((item) => item.active = item.key === next.key);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}