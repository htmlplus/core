{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\projects\\\\mine\\\\htmlplus\\\\core\\\\packages\\\\docs\\\\src\\\\components\\\\example\\\\example.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useMemo } from 'react';\nimport { Code, Icon, Link, PlusGrid, PlusGridItem, PlusTabs, PlusTabsBar, PlusTabsTab, PlusTabsPanels, PlusTabsPanel } from '@app/components';\nimport * as Utils from '@app/utils';\nimport { ExampleLanguage } from './example.types';\nexport const Example = props => {\n  const {\n    value\n  } = props;\n  const code = value.code || {};\n  const links = useMemo(() => {\n    return (code.links || []).map(link => {\n      const map = {\n        codesandbox: 'Edit in CodeSandbox',\n        github: 'View on Github'\n      };\n      return _objectSpread(_objectSpread({}, link), {}, {\n        title: map[link.key]\n      });\n    });\n  }, [code.links]);\n  const style = useMemo(() => {\n    if (!code.style) return;\n    let rules = code.style;\n    let className = `.ex-${value.key}`;\n\n    try {\n      var classLen = className.length,\n          char,\n          nextChar,\n          isAt,\n          isIn;\n      className += ' ';\n      rules = rules.replace(/\\/\\*(?:(?!\\*\\/)[\\s\\S])*\\*\\/|[\\r\\n\\t]+/g, '');\n      rules = rules.replace(/}(\\s*)@/g, '}@');\n      rules = rules.replace(/}(\\s*)}/g, '}}');\n\n      for (var i = 0; i < rules.length - 2; i++) {\n        char = rules[i];\n        nextChar = rules[i + 1];\n        if (char === '@') isAt = true;\n        if (!isAt && char === '{') isIn = true;\n        if (isIn && char === '}') isIn = false;\n\n        if (!isIn && nextChar !== '@' && nextChar !== '}' && (char === '}' || char === ',' || (char === '{' || char === ';') && isAt)) {\n          rules = rules.slice(0, i + 1) + className + rules.slice(i + 1);\n          i += classLen;\n          isAt = false;\n        }\n      }\n\n      ;\n      if (rules.indexOf(className) !== 0 && rules.indexOf('@') !== 0) rules = className + rules;\n      return rules;\n    } catch {}\n  }, [value.key, code.style]);\n  const tabs = useMemo(() => {\n    const tabs = [];\n    Object.keys(code).filter(key => key !== 'links').map(key => {\n      const tab = {\n        key,\n        title: Utils.toCapitalCase(key),\n        disabled: !code[key]\n      };\n\n      if (key === 'preview') {\n        tab.content = () => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `preview-wrapper ex-${value.key}`,\n          children: [code[key](), style && /*#__PURE__*/_jsxDEV(\"style\", {\n            children: style\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this);\n      } else {\n        const language = ExampleLanguage[key];\n\n        tab.content = () => /*#__PURE__*/_jsxDEV(Code, {\n          language: language,\n          children: code[key]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 31\n        }, this);\n      }\n\n      tabs.push(tab);\n    });\n    return tabs;\n  }, [code]);\n  const classes = Utils.classes('example');\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes,\n    children: /*#__PURE__*/_jsxDEV(PlusTabs, {\n      value: \"preview\",\n      children: [/*#__PURE__*/_jsxDEV(PlusGrid, {\n        className: \"toolbar\",\n        alignItems: \"center\",\n        justify: \"between\",\n        gutterX: \"sm\",\n        children: [/*#__PURE__*/_jsxDEV(PlusGridItem, {\n          xs: \"grow\",\n          children: /*#__PURE__*/_jsxDEV(PlusTabsBar, {\n            children: tabs.map(item => /*#__PURE__*/_jsxDEV(PlusTabsTab, {\n              disabled: item.disabled,\n              value: item.key,\n              children: item.title\n            }, item.key, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), links.map(link => /*#__PURE__*/_jsxDEV(PlusGridItem, {\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: link.value,\n            target: \"_blank\",\n            title: link.title,\n            children: /*#__PURE__*/_jsxDEV(Icon, {\n              name: \"github\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 15\n          }, this)\n        }, link.key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PlusTabsPanels, {\n        className: \"body\",\n        children: tabs.map(item => /*#__PURE__*/_jsxDEV(PlusTabsPanel, {\n          value: item.key,\n          children: item.content && /*#__PURE__*/_jsxDEV(item.content, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 32\n          }, this)\n        }, item.key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};","map":{"version":3,"sources":["C:/projects/mine/htmlplus/core/packages/docs/src/components/example/example.tsx"],"names":["React","useMemo","Code","Icon","Link","PlusGrid","PlusGridItem","PlusTabs","PlusTabsBar","PlusTabsTab","PlusTabsPanels","PlusTabsPanel","Utils","ExampleLanguage","Example","props","value","code","links","map","link","codesandbox","github","title","key","style","rules","className","classLen","length","char","nextChar","isAt","isIn","replace","i","slice","indexOf","tabs","Object","keys","filter","tab","toCapitalCase","disabled","content","language","push","classes","item"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AACA,SAASC,IAAT,EAAeC,IAAf,EAAqBC,IAArB,EAA2BC,QAA3B,EAAqCC,YAArC,EAAmDC,QAAnD,EAA6DC,WAA7D,EAA0EC,WAA1E,EAAuFC,cAAvF,EAAuGC,aAAvG,QAA4H,iBAA5H;AACA,OAAO,KAAKC,KAAZ,MAAuB,YAAvB;AACA,SAAuBC,eAAvB,QAA8C,iBAA9C;AAEA,OAAO,MAAMC,OAA+B,GAAIC,KAAD,IAAW;AAExD,QAAM;AAAEC,IAAAA;AAAF,MAAYD,KAAlB;AAEA,QAAME,IAAI,GAAGD,KAAK,CAACC,IAAN,IAAc,EAA3B;AAEA,QAAMC,KAAK,GAAGjB,OAAO,CAAC,MAAM;AAE1B,WAAO,CAACgB,IAAI,CAACC,KAAL,IAAc,EAAf,EACJC,GADI,CACCC,IAAD,IAAU;AAEb,YAAMD,GAAG,GAAG;AACVE,QAAAA,WAAW,EAAE,qBADH;AAEVC,QAAAA,MAAM,EAAE;AAFE,OAAZ;AAKA,6CACKF,IADL;AAEEG,QAAAA,KAAK,EAAEJ,GAAG,CAACC,IAAI,CAACI,GAAN;AAFZ;AAID,KAZI,CAAP;AAaD,GAfoB,EAelB,CAACP,IAAI,CAACC,KAAN,CAfkB,CAArB;AAiBA,QAAMO,KAAK,GAAGxB,OAAO,CACnB,MAAM;AAEJ,QAAI,CAACgB,IAAI,CAACQ,KAAV,EAAiB;AAEjB,QAAIC,KAAK,GAAGT,IAAI,CAACQ,KAAjB;AAEA,QAAIE,SAAS,GAAI,OAAMX,KAAK,CAACQ,GAAI,EAAjC;;AAEA,QAAI;AAAE,UAAII,QAAQ,GAAGD,SAAS,CAACE,MAAzB;AAAA,UAAiCC,IAAjC;AAAA,UAAuCC,QAAvC;AAAA,UAAiDC,IAAjD;AAAA,UAAuDC,IAAvD;AAA6DN,MAAAA,SAAS,IAAI,GAAb;AAAkBD,MAAAA,KAAK,GAAGA,KAAK,CAACQ,OAAN,CAAc,wCAAd,EAAwD,EAAxD,CAAR;AAAqER,MAAAA,KAAK,GAAGA,KAAK,CAACQ,OAAN,CAAc,UAAd,EAA0B,IAA1B,CAAR;AAAyCR,MAAAA,KAAK,GAAGA,KAAK,CAACQ,OAAN,CAAc,UAAd,EAA0B,IAA1B,CAAR;;AAAyC,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,KAAK,CAACG,MAAN,GAAe,CAAnC,EAAsCM,CAAC,EAAvC,EAA2C;AAAEL,QAAAA,IAAI,GAAGJ,KAAK,CAACS,CAAD,CAAZ;AAAiBJ,QAAAA,QAAQ,GAAGL,KAAK,CAACS,CAAC,GAAG,CAAL,CAAhB;AAAyB,YAAIL,IAAI,KAAK,GAAb,EAAkBE,IAAI,GAAG,IAAP;AAAa,YAAI,CAACA,IAAD,IAASF,IAAI,KAAK,GAAtB,EAA2BG,IAAI,GAAG,IAAP;AAAa,YAAIA,IAAI,IAAIH,IAAI,KAAK,GAArB,EAA0BG,IAAI,GAAG,KAAP;;AAAc,YAAI,CAACA,IAAD,IAASF,QAAQ,KAAK,GAAtB,IAA6BA,QAAQ,KAAK,GAA1C,KAAkDD,IAAI,KAAK,GAAT,IAAgBA,IAAI,KAAK,GAAzB,IAAiC,CAACA,IAAI,KAAK,GAAT,IAAgBA,IAAI,KAAK,GAA1B,KAAkCE,IAArH,CAAJ,EAAiI;AAAEN,UAAAA,KAAK,GAAGA,KAAK,CAACU,KAAN,CAAY,CAAZ,EAAeD,CAAC,GAAG,CAAnB,IAAwBR,SAAxB,GAAoCD,KAAK,CAACU,KAAN,CAAYD,CAAC,GAAG,CAAhB,CAA5C;AAAgEA,UAAAA,CAAC,IAAIP,QAAL;AAAeI,UAAAA,IAAI,GAAG,KAAP;AAAe;AAAE;;AAAA;AAAE,UAAIN,KAAK,CAACW,OAAN,CAAcV,SAAd,MAA6B,CAA7B,IAAkCD,KAAK,CAACW,OAAN,CAAc,GAAd,MAAuB,CAA7D,EAAgEX,KAAK,GAAGC,SAAS,GAAGD,KAApB;AAA2B,aAAOA,KAAP;AAAe,KAAjwB,CAAkwB,MAAM,CAAG;AAC5wB,GAVkB,EAWnB,CAACV,KAAK,CAACQ,GAAP,EAAYP,IAAI,CAACQ,KAAjB,CAXmB,CAArB;AAcA,QAAMa,IAAI,GAAGrC,OAAO,CAAC,MAAM;AAEzB,UAAMqC,IAAI,GAAG,EAAb;AAEAC,IAAAA,MAAM,CAACC,IAAP,CAAYvB,IAAZ,EACGwB,MADH,CACWjB,GAAD,IAASA,GAAG,KAAK,OAD3B,EAEGL,GAFH,CAEQK,GAAD,IAAS;AAEZ,YAAMkB,GAAQ,GAAG;AACflB,QAAAA,GADe;AAEfD,QAAAA,KAAK,EAAEX,KAAK,CAAC+B,aAAN,CAAoBnB,GAApB,CAFQ;AAGfoB,QAAAA,QAAQ,EAAE,CAAC3B,IAAI,CAACO,GAAD;AAHA,OAAjB;;AAMA,UAAIA,GAAG,KAAK,SAAZ,EAAuB;AAErBkB,QAAAA,GAAG,CAACG,OAAJ,GAAc,mBACZ;AAAK,UAAA,SAAS,EAAG,sBAAqB7B,KAAK,CAACQ,GAAI,EAAhD;AAAA,qBACGP,IAAI,CAACO,GAAD,CAAJ,EADH,EAEGC,KAAK,iBAAI;AAAA,sBAAQA;AAAR;AAAA;AAAA;AAAA;AAAA,kBAFZ;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF;AAMD,OARD,MASK;AAEH,cAAMqB,QAAQ,GAAGjC,eAAe,CAACW,GAAD,CAAhC;;AAEAkB,QAAAA,GAAG,CAACG,OAAJ,GAAc,mBAAM,QAAC,IAAD;AAAM,UAAA,QAAQ,EAAEC,QAAhB;AAAA,oBAA2B7B,IAAI,CAACO,GAAD;AAA/B;AAAA;AAAA;AAAA;AAAA,gBAApB;AACD;;AAEDc,MAAAA,IAAI,CAACS,IAAL,CAAUL,GAAV;AACD,KA3BH;AA6BA,WAAOJ,IAAP;AACD,GAlCmB,EAkCjB,CAACrB,IAAD,CAlCiB,CAApB;AAoCA,QAAM+B,OAAO,GAAGpC,KAAK,CAACoC,OAAN,CACd,SADc,CAAhB;AAIA,sBACE;AAAK,IAAA,SAAS,EAAEA,OAAhB;AAAA,2BACE,QAAC,QAAD;AAAU,MAAA,KAAK,EAAC,SAAhB;AAAA,8BACE,QAAC,QAAD;AAAU,QAAA,SAAS,EAAC,SAApB;AAA8B,QAAA,UAAU,EAAC,QAAzC;AAAkD,QAAA,OAAO,EAAC,SAA1D;AAAoE,QAAA,OAAO,EAAC,IAA5E;AAAA,gCACE,QAAC,YAAD;AAAc,UAAA,EAAE,EAAC,MAAjB;AAAA,iCACE,QAAC,WAAD;AAAA,sBACGV,IAAI,CAACnB,GAAL,CAAU8B,IAAD,iBACR,QAAC,WAAD;AAA4B,cAAA,QAAQ,EAAEA,IAAI,CAACL,QAA3C;AAAqD,cAAA,KAAK,EAAEK,IAAI,CAACzB,GAAjE;AAAA,wBACGyB,IAAI,CAAC1B;AADR,eAAkB0B,IAAI,CAACzB,GAAvB;AAAA;AAAA;AAAA;AAAA,oBADD;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,EAUGN,KAAK,CAACC,GAAN,CAAWC,IAAD,iBACT,QAAC,YAAD;AAAA,iCACE,QAAC,IAAD;AACE,YAAA,EAAE,EAAEA,IAAI,CAACJ,KADX;AAEE,YAAA,MAAM,EAAC,QAFT;AAGE,YAAA,KAAK,EAAEI,IAAI,CAACG,KAHd;AAAA,mCAKE,QAAC,IAAD;AAAM,cAAA,IAAI,EAAC;AAAX;AAAA;AAAA;AAAA;AAAA;AALF;AAAA;AAAA;AAAA;AAAA;AADF,WAAmBH,IAAI,CAACI,GAAxB;AAAA;AAAA;AAAA;AAAA,gBADD,CAVH;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAuBE,QAAC,cAAD;AAAgB,QAAA,SAAS,EAAC,MAA1B;AAAA,kBACGc,IAAI,CAACnB,GAAL,CAAU8B,IAAD,iBACR,QAAC,aAAD;AAA8B,UAAA,KAAK,EAAEA,IAAI,CAACzB,GAA1C;AAAA,oBACGyB,IAAI,CAACJ,OAAL,iBAAgB,QAAC,IAAD,CAAM,OAAN;AAAA;AAAA;AAAA;AAAA;AADnB,WAAoBI,IAAI,CAACzB,GAAzB;AAAA;AAAA;AAAA;AAAA,gBADD;AADH;AAAA;AAAA;AAAA;AAAA,cAvBF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAmCD,CAhHM","sourcesContent":["import React, { useMemo } from 'react';\nimport { Code, Icon, Link, PlusGrid, PlusGridItem, PlusTabs, PlusTabsBar, PlusTabsTab, PlusTabsPanels, PlusTabsPanel } from '@app/components';\nimport * as Utils from '@app/utils';\nimport { ExampleProps, ExampleLanguage } from './example.types';\n\nexport const Example: React.FC<ExampleProps> = (props) => {\n\n  const { value } = props;\n\n  const code = value.code || {};\n\n  const links = useMemo(() => {\n\n    return (code.links || [])\n      .map((link) => {\n\n        const map = {\n          codesandbox: 'Edit in CodeSandbox',\n          github: 'View on Github',\n        }\n\n        return {\n          ...link,\n          title: map[link.key],\n        }\n      });\n  }, [code.links]);\n\n  const style = useMemo(\n    () => {\n\n      if (!code.style) return;\n\n      let rules = code.style;\n\n      let className = `.ex-${value.key}`;\n\n      try { var classLen = className.length, char, nextChar, isAt, isIn; className += ' '; rules = rules.replace(/\\/\\*(?:(?!\\*\\/)[\\s\\S])*\\*\\/|[\\r\\n\\t]+/g, ''); rules = rules.replace(/}(\\s*)@/g, '}@'); rules = rules.replace(/}(\\s*)}/g, '}}'); for (var i = 0; i < rules.length - 2; i++) { char = rules[i]; nextChar = rules[i + 1]; if (char === '@') isAt = true; if (!isAt && char === '{') isIn = true; if (isIn && char === '}') isIn = false; if (!isIn && nextChar !== '@' && nextChar !== '}' && (char === '}' || char === ',' || ((char === '{' || char === ';') && isAt))) { rules = rules.slice(0, i + 1) + className + rules.slice(i + 1); i += classLen; isAt = false; } }; if (rules.indexOf(className) !== 0 && rules.indexOf('@') !== 0) rules = className + rules; return rules; } catch { }\n    },\n    [value.key, code.style]\n  );\n\n  const tabs = useMemo(() => {\n\n    const tabs = [];\n\n    Object.keys(code)\n      .filter((key) => key !== 'links')\n      .map((key) => {\n\n        const tab: any = {\n          key,\n          title: Utils.toCapitalCase(key),\n          disabled: !code[key]\n        };\n\n        if (key === 'preview') {\n\n          tab.content = () => (\n            <div className={`preview-wrapper ex-${value.key}`}>\n              {code[key]()}\n              {style && <style>{style}</style>}\n            </div>\n          )\n        }\n        else {\n\n          const language = ExampleLanguage[key as keyof typeof ExampleLanguage];\n\n          tab.content = () => <Code language={language}>{code[key]}</Code>\n        }\n\n        tabs.push(tab);\n      });\n\n    return tabs;\n  }, [code]);\n\n  const classes = Utils.classes(\n    'example'\n  );\n\n  return (\n    <div className={classes}>\n      <PlusTabs value=\"preview\">\n        <PlusGrid className=\"toolbar\" alignItems=\"center\" justify=\"between\" gutterX=\"sm\">\n          <PlusGridItem xs=\"grow\">\n            <PlusTabsBar>\n              {tabs.map((item: any) => (\n                <PlusTabsTab key={item.key} disabled={item.disabled} value={item.key}>\n                  {item.title}\n                </PlusTabsTab>\n              ))}\n            </PlusTabsBar>\n          </PlusGridItem>\n          {links.map((link: any) => (\n            <PlusGridItem key={link.key}>\n              <Link\n                to={link.value}\n                target=\"_blank\"\n                title={link.title}\n              >\n                <Icon name=\"github\" />\n              </Link>\n            </PlusGridItem>\n          ))}\n        </PlusGrid>\n        <PlusTabsPanels className=\"body\">\n          {tabs.map((item: any) => (\n            <PlusTabsPanel key={item.key} value={item.key}>\n              {item.content && <item.content />}\n            </PlusTabsPanel>\n          ))}\n        </PlusTabsPanels>\n      </PlusTabs>\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}