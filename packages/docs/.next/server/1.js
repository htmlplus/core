exports.ids = [1];
exports.modules = {

/***/ "./src/content/en/getting-started/installation.angular.md":
/*!****************************************************************!*\
  !*** ./src/content/en/getting-started/installation.angular.md ***!
  \****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("# Angular\n\nTo utilize web components in your angular application follow these steps.\n\n## Install\n\nInstalling `{Constants.PLATFORM_NAME}` package using node package manager.\n\n```shell\nnpm install {Constants.PORT_ANGULAR_PACKAGE_NAME}\n```\n\n## Import\n\nFinally the  `main.ts` would be something like this.\n\n```js\nimport { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\n// Import package\nimport { applyPolyfills, defineCustomElements } from '{Constants.PORT_JAVASCRIPT_PACKAGE_LOADER}';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic()\n  .bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n\n// Bind the custom elements to the window object\napplyPolyfills().then(() =>  defineCustomElements());\n```\n\nTODO\n\n```js\nimport { BrowserModule } from '@angular/platform-browser';\nimport { CUSTOM_ELEMENTS_SCHEMA, NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [BrowserModule],\n  providers: [],\n  bootstrap: [AppComponent],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n}),\nexport class AppModule {}\n```\n\n## Usage\n\nTODO\n\n## Properties\n\nTODO\n\n## Events\n\nTODO");

/***/ })

};;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29udGVudC9lbi9nZXR0aW5nLXN0YXJ0ZWQvaW5zdGFsbGF0aW9uLmFuZ3VsYXIubWQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTtBQUFlLHFMQUFzSCx3QkFBd0IsZ0VBQWdFLG9DQUFvQyw2RkFBNkYsaUJBQWlCLHNCQUFzQixVQUFVLHlCQUF5QiwwQ0FBMEMsWUFBWSxZQUFZLHlCQUF5QixVQUFVLGNBQWMsbUNBQW1DLCtCQUErQix1Q0FBdUMsUUFBUSx5Q0FBeUMsRUFBRSxpQ0FBaUMscUJBQXFCLEdBQUcsK0ZBQStGLDJHQUEyRyxnQ0FBZ0MsZ0JBQWdCLGtDQUFrQyxVQUFVLG1DQUFtQyxzQkFBc0IsWUFBWSxlQUFlLHdCQUF3QixlQUFlLHVKQUF1Siw2QkFBNkIsd0VBQXdFLEUiLCJmaWxlIjoiMS5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IFwiIyBBbmd1bGFyXFxuXFxuVG8gdXRpbGl6ZSB3ZWIgY29tcG9uZW50cyBpbiB5b3VyIGFuZ3VsYXIgYXBwbGljYXRpb24gZm9sbG93IHRoZXNlIHN0ZXBzLlxcblxcbiMjIEluc3RhbGxcXG5cXG5JbnN0YWxsaW5nIGB7Q29uc3RhbnRzLlBMQVRGT1JNX05BTUV9YCBwYWNrYWdlIHVzaW5nIG5vZGUgcGFja2FnZSBtYW5hZ2VyLlxcblxcbmBgYHNoZWxsXFxubnBtIGluc3RhbGwge0NvbnN0YW50cy5QT1JUX0FOR1VMQVJfUEFDS0FHRV9OQU1FfVxcbmBgYFxcblxcbiMjIEltcG9ydFxcblxcbkZpbmFsbHkgdGhlICBgbWFpbi50c2Agd291bGQgYmUgc29tZXRoaW5nIGxpa2UgdGhpcy5cXG5cXG5gYGBqc1xcbmltcG9ydCB7IGVuYWJsZVByb2RNb2RlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XFxuaW1wb3J0IHsgcGxhdGZvcm1Ccm93c2VyRHluYW1pYyB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXItZHluYW1pYyc7XFxuXFxuaW1wb3J0IHsgQXBwTW9kdWxlIH0gZnJvbSAnLi9hcHAvYXBwLm1vZHVsZSc7XFxuaW1wb3J0IHsgZW52aXJvbm1lbnQgfSBmcm9tICcuL2Vudmlyb25tZW50cy9lbnZpcm9ubWVudCc7XFxuXFxuLy8gSW1wb3J0IHBhY2thZ2VcXG5pbXBvcnQgeyBhcHBseVBvbHlmaWxscywgZGVmaW5lQ3VzdG9tRWxlbWVudHMgfSBmcm9tICd7Q29uc3RhbnRzLlBPUlRfSkFWQVNDUklQVF9QQUNLQUdFX0xPQURFUn0nO1xcblxcbmlmIChlbnZpcm9ubWVudC5wcm9kdWN0aW9uKSB7XFxuICBlbmFibGVQcm9kTW9kZSgpO1xcbn1cXG5cXG5wbGF0Zm9ybUJyb3dzZXJEeW5hbWljKClcXG4gIC5ib290c3RyYXBNb2R1bGUoQXBwTW9kdWxlKVxcbiAgLmNhdGNoKGVyciA9PiBjb25zb2xlLmxvZyhlcnIpKTtcXG5cXG4vLyBCaW5kIHRoZSBjdXN0b20gZWxlbWVudHMgdG8gdGhlIHdpbmRvdyBvYmplY3RcXG5hcHBseVBvbHlmaWxscygpLnRoZW4oKCkgPT4gIGRlZmluZUN1c3RvbUVsZW1lbnRzKCkpO1xcbmBgYFxcblxcblRPRE9cXG5cXG5gYGBqc1xcbmltcG9ydCB7IEJyb3dzZXJNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcXG5pbXBvcnQgeyBDVVNUT01fRUxFTUVOVFNfU0NIRU1BLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xcblxcbmltcG9ydCB7IEFwcENvbXBvbmVudCB9IGZyb20gJy4vYXBwLmNvbXBvbmVudCc7XFxuXFxuQE5nTW9kdWxlKHtcXG4gIGRlY2xhcmF0aW9uczogW0FwcENvbXBvbmVudF0sXFxuICBpbXBvcnRzOiBbQnJvd3Nlck1vZHVsZV0sXFxuICBwcm92aWRlcnM6IFtdLFxcbiAgYm9vdHN0cmFwOiBbQXBwQ29tcG9uZW50XSxcXG4gIHNjaGVtYXM6IFtDVVNUT01fRUxFTUVOVFNfU0NIRU1BXSxcXG59KSxcXG5leHBvcnQgY2xhc3MgQXBwTW9kdWxlIHt9XFxuYGBgXFxuXFxuIyMgVXNhZ2VcXG5cXG5UT0RPXFxuXFxuIyMgUHJvcGVydGllc1xcblxcblRPRE9cXG5cXG4jIyBFdmVudHNcXG5cXG5UT0RPXCI7Il0sInNvdXJjZVJvb3QiOiIifQ==