exports.ids = [4];
exports.modules = {

/***/ "./src/content/en/getting-started/installation.vue.md":
/*!************************************************************!*\
  !*** ./src/content/en/getting-started/installation.vue.md ***!
  \************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("# Vue\n\nVue framework is fully compatilbe with web components. To utilize web components in your vue application follow these steps.\n\n##  Install\n\nInstalling `{Constants.PLATFORM_NAME}` package using node package manager.\n\n```shell\nnpm install {Constants.PORT_VUE_PACKAGE_NAME}\n```\n\n## Import\n\nThe `main.js` would be something like this finally.\n```js\nimport Vue from 'vue';\nimport App from './App.vue';\n\n// Import package\nimport { applyPolyfills, defineCustomElements } from '{Constants.PORT_VUE_PACKAGE_LOADER}';\n\n// Tell Vue to ignore all custom element tags defined in the `{Constants.PORT_VUE_PACKAGE_NAME}`\nVue.config.ignoredElements = [/${Constants.PLATFORM_TAG_PREFIX}-\\w*/];\n\n// Bind the custom elements to the window object\napplyPolyfills().then(() => defineCustomElements());\n\nnew Vue({\n  render: h => h(App)\n}).$mount('#app');\n```\n\n## Usage\n\nAll `{Constants.PLATFORM_NAME}` components are available as same as a local tag (div, video, etc.) in the vue project. Add below code in the vue's template section and see the result.\n\n```html\n<plus-switch/>\n```\n\n## Properties\n\nTODO\n\n```html\n<plus-switch reverse/>\nOr\n<plus-switch :reverse=\"true\"/>\n```\n\n## Events\n\nTODO\n\n```html\n<template>\n  <plus-switch @plusChange=\"change\"/>\n</template>\n\n<script>\nexport default {\n  methods: {\n    change: () => alert('The switch toggled!')\n  }\n}\n</script>\n```\n");

/***/ })

};;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29udGVudC9lbi9nZXR0aW5nLXN0YXJ0ZWQvaW5zdGFsbGF0aW9uLnZ1ZS5tZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBO0FBQWUscU9BQXNLLHdCQUF3QixnRUFBZ0UsZ0NBQWdDLHdHQUF3Ryw4QkFBOEIsK0JBQStCLHVDQUF1QyxRQUFRLGtDQUFrQyxFQUFFLG1FQUFtRSxnQ0FBZ0Msb0NBQW9DLDhCQUE4QixRQUFRLDBHQUEwRyxhQUFhLDBCQUEwQixpQkFBaUIsMkJBQTJCLHdCQUF3QixnYUFBZ2EsY0FBYyxxREFBcUQsR0FBRyxtQkFBbUIsRSIsImZpbGUiOiI0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCIjIFZ1ZVxcblxcblZ1ZSBmcmFtZXdvcmsgaXMgZnVsbHkgY29tcGF0aWxiZSB3aXRoIHdlYiBjb21wb25lbnRzLiBUbyB1dGlsaXplIHdlYiBjb21wb25lbnRzIGluIHlvdXIgdnVlIGFwcGxpY2F0aW9uIGZvbGxvdyB0aGVzZSBzdGVwcy5cXG5cXG4jIyAgSW5zdGFsbFxcblxcbkluc3RhbGxpbmcgYHtDb25zdGFudHMuUExBVEZPUk1fTkFNRX1gIHBhY2thZ2UgdXNpbmcgbm9kZSBwYWNrYWdlIG1hbmFnZXIuXFxuXFxuYGBgc2hlbGxcXG5ucG0gaW5zdGFsbCB7Q29uc3RhbnRzLlBPUlRfVlVFX1BBQ0tBR0VfTkFNRX1cXG5gYGBcXG5cXG4jIyBJbXBvcnRcXG5cXG5UaGUgYG1haW4uanNgIHdvdWxkIGJlIHNvbWV0aGluZyBsaWtlIHRoaXMgZmluYWxseS5cXG5gYGBqc1xcbmltcG9ydCBWdWUgZnJvbSAndnVlJztcXG5pbXBvcnQgQXBwIGZyb20gJy4vQXBwLnZ1ZSc7XFxuXFxuLy8gSW1wb3J0IHBhY2thZ2VcXG5pbXBvcnQgeyBhcHBseVBvbHlmaWxscywgZGVmaW5lQ3VzdG9tRWxlbWVudHMgfSBmcm9tICd7Q29uc3RhbnRzLlBPUlRfVlVFX1BBQ0tBR0VfTE9BREVSfSc7XFxuXFxuLy8gVGVsbCBWdWUgdG8gaWdub3JlIGFsbCBjdXN0b20gZWxlbWVudCB0YWdzIGRlZmluZWQgaW4gdGhlIGB7Q29uc3RhbnRzLlBPUlRfVlVFX1BBQ0tBR0VfTkFNRX1gXFxuVnVlLmNvbmZpZy5pZ25vcmVkRWxlbWVudHMgPSBbLyR7Q29uc3RhbnRzLlBMQVRGT1JNX1RBR19QUkVGSVh9LVxcXFx3Ki9dO1xcblxcbi8vIEJpbmQgdGhlIGN1c3RvbSBlbGVtZW50cyB0byB0aGUgd2luZG93IG9iamVjdFxcbmFwcGx5UG9seWZpbGxzKCkudGhlbigoKSA9PiBkZWZpbmVDdXN0b21FbGVtZW50cygpKTtcXG5cXG5uZXcgVnVlKHtcXG4gIHJlbmRlcjogaCA9PiBoKEFwcClcXG59KS4kbW91bnQoJyNhcHAnKTtcXG5gYGBcXG5cXG4jIyBVc2FnZVxcblxcbkFsbCBge0NvbnN0YW50cy5QTEFURk9STV9OQU1FfWAgY29tcG9uZW50cyBhcmUgYXZhaWxhYmxlIGFzIHNhbWUgYXMgYSBsb2NhbCB0YWcgKGRpdiwgdmlkZW8sIGV0Yy4pIGluIHRoZSB2dWUgcHJvamVjdC4gQWRkIGJlbG93IGNvZGUgaW4gdGhlIHZ1ZSdzIHRlbXBsYXRlIHNlY3Rpb24gYW5kIHNlZSB0aGUgcmVzdWx0LlxcblxcbmBgYGh0bWxcXG48cGx1cy1zd2l0Y2gvPlxcbmBgYFxcblxcbiMjIFByb3BlcnRpZXNcXG5cXG5UT0RPXFxuXFxuYGBgaHRtbFxcbjxwbHVzLXN3aXRjaCByZXZlcnNlLz5cXG5PclxcbjxwbHVzLXN3aXRjaCA6cmV2ZXJzZT1cXFwidHJ1ZVxcXCIvPlxcbmBgYFxcblxcbiMjIEV2ZW50c1xcblxcblRPRE9cXG5cXG5gYGBodG1sXFxuPHRlbXBsYXRlPlxcbiAgPHBsdXMtc3dpdGNoIEBwbHVzQ2hhbmdlPVxcXCJjaGFuZ2VcXFwiLz5cXG48L3RlbXBsYXRlPlxcblxcbjxzY3JpcHQ+XFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgbWV0aG9kczoge1xcbiAgICBjaGFuZ2U6ICgpID0+IGFsZXJ0KCdUaGUgc3dpdGNoIHRvZ2dsZWQhJylcXG4gIH1cXG59XFxuPC9zY3JpcHQ+XFxuYGBgXFxuXCI7Il0sInNvdXJjZVJvb3QiOiIifQ==