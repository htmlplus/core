{"version":3,"sources":["../../core/dist/esm/tunnel-consumer.entry.js"],"names":["TunnelConsumer","hostRef","registerInstance","this","context","renderer","subscribe","unsubscribe","$host","Object","assign","getElement"],"mappings":"2MAEMA,EAAc,WAClB,WAAYC,GAAS,oBACnBC,YAAiBC,KAAMF,GACvBE,KAAKC,QAAU,GACfD,KAAKE,SAAW,kBAAM,MAJN,gEAOM,MAAlBF,KAAKG,YACPH,KAAKI,YAAcJ,KAAKG,UAAUH,KAAKK,MAAO,CAAC,eARjC,6CAYQ,MAApBL,KAAKI,aACPJ,KAAKI,gBAbS,+BAiBhB,OAAOJ,KAAKE,SAASI,OAAOC,OAAO,GAAIP,KAAKC,YAjB5B,4BAmBJ,OAAOO,YAAWR,UAnBd","file":"static/js/18.e1276891.chunk.js","sourcesContent":["import { r as registerInstance, g as getElement } from './index-b4553237.js';\n\nconst TunnelConsumer = class {\r\n  constructor(hostRef) {\r\n    registerInstance(this, hostRef);\r\n    this.context = {};\r\n    this.renderer = () => null;\r\n  }\r\n  connectedCallback() {\r\n    if (this.subscribe != null) {\r\n      this.unsubscribe = this.subscribe(this.$host, ['context']);\r\n    }\r\n  }\r\n  disconnectedCallback() {\r\n    if (this.unsubscribe != null) {\r\n      this.unsubscribe();\r\n    }\r\n  }\r\n  render() {\r\n    return this.renderer(Object.assign({}, this.context));\r\n  }\r\n  get $host() { return getElement(this); }\r\n};\n\nexport { TunnelConsumer as tunnel_consumer };\n"],"sourceRoot":""}